
Self_made.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000232  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a1c  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f7  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031d  00000000  00000000  00001547  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001864  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000472  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000368  00000000  00000000  00001d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000020f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>
  26:	12 c0       	rjmp	.+36     	; 0x4c <__bad_interrupt>
  28:	11 c0       	rjmp	.+34     	; 0x4c <__bad_interrupt>
  2a:	10 c0       	rjmp	.+32     	; 0x4c <__bad_interrupt>
  2c:	0f c0       	rjmp	.+30     	; 0x4c <__bad_interrupt>
  2e:	0e c0       	rjmp	.+28     	; 0x4c <__bad_interrupt>
  30:	0d c0       	rjmp	.+26     	; 0x4c <__bad_interrupt>
  32:	0c c0       	rjmp	.+24     	; 0x4c <__bad_interrupt>
  34:	0b c0       	rjmp	.+22     	; 0x4c <__bad_interrupt>
  36:	0a c0       	rjmp	.+20     	; 0x4c <__bad_interrupt>
  38:	09 c0       	rjmp	.+18     	; 0x4c <__bad_interrupt>
  3a:	08 c0       	rjmp	.+16     	; 0x4c <__bad_interrupt>

0000003c <__ctors_end>:
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf ef       	ldi	r28, 0xFF	; 255
  42:	d2 e0       	ldi	r29, 0x02	; 2
  44:	de bf       	out	0x3e, r29	; 62
  46:	cd bf       	out	0x3d, r28	; 61
  48:	cc d0       	rcall	.+408    	; 0x1e2 <main>
  4a:	f1 c0       	rjmp	.+482    	; 0x22e <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <set_big_RGB_LED>:
#define OFF 0

typedef unsigned char byte;

void set_big_RGB_LED(byte red,byte green, byte blue)
{
  4e:	cf 93       	push	r28
  50:	df 93       	push	r29
  52:	00 d0       	rcall	.+0      	; 0x54 <set_big_RGB_LED+0x6>
  54:	00 d0       	rcall	.+0      	; 0x56 <set_big_RGB_LED+0x8>
  56:	cd b7       	in	r28, 0x3d	; 61
  58:	de b7       	in	r29, 0x3e	; 62
  5a:	8a 83       	std	Y+2, r24	; 0x02
  5c:	6b 83       	std	Y+3, r22	; 0x03
  5e:	4c 83       	std	Y+4, r20	; 0x04
	byte color = red|(green<<1)|(blue<<2);
  60:	8b 81       	ldd	r24, Y+3	; 0x03
  62:	88 2f       	mov	r24, r24
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	88 0f       	add	r24, r24
  68:	99 1f       	adc	r25, r25
  6a:	98 2f       	mov	r25, r24
  6c:	8a 81       	ldd	r24, Y+2	; 0x02
  6e:	29 2f       	mov	r18, r25
  70:	28 2b       	or	r18, r24
  72:	8c 81       	ldd	r24, Y+4	; 0x04
  74:	88 2f       	mov	r24, r24
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	88 0f       	add	r24, r24
  7a:	99 1f       	adc	r25, r25
  7c:	88 0f       	add	r24, r24
  7e:	99 1f       	adc	r25, r25
  80:	82 2b       	or	r24, r18
  82:	89 83       	std	Y+1, r24	; 0x01
	DDRB = 0x07;
  84:	87 e3       	ldi	r24, 0x37	; 55
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	27 e0       	ldi	r18, 0x07	; 7
  8a:	fc 01       	movw	r30, r24
  8c:	20 83       	st	Z, r18
	PORTB = (PORTB&0xF8);
  8e:	88 e3       	ldi	r24, 0x38	; 56
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	28 e3       	ldi	r18, 0x38	; 56
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	f9 01       	movw	r30, r18
  98:	20 81       	ld	r18, Z
  9a:	28 7f       	andi	r18, 0xF8	; 248
  9c:	fc 01       	movw	r30, r24
  9e:	20 83       	st	Z, r18
	PORTB = (PORTB|color);
  a0:	88 e3       	ldi	r24, 0x38	; 56
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	28 e3       	ldi	r18, 0x38	; 56
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	f9 01       	movw	r30, r18
  aa:	30 81       	ld	r19, Z
  ac:	29 81       	ldd	r18, Y+1	; 0x01
  ae:	23 2b       	or	r18, r19
  b0:	fc 01       	movw	r30, r24
  b2:	20 83       	st	Z, r18
}
  b4:	00 00       	nop
  b6:	0f 90       	pop	r0
  b8:	0f 90       	pop	r0
  ba:	0f 90       	pop	r0
  bc:	0f 90       	pop	r0
  be:	df 91       	pop	r29
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <wait_1ms>:

void wait_1ms(int delay)
{
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	00 d0       	rcall	.+0      	; 0xca <wait_1ms+0x6>
  ca:	00 d0       	rcall	.+0      	; 0xcc <wait_1ms+0x8>
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	9c 83       	std	Y+4, r25	; 0x04
  d2:	8b 83       	std	Y+3, r24	; 0x03
	int tick_1ms_cnt;
	if (delay != 0) tick_1ms_cnt = delay; else tick_1ms_cnt = 1;
  d4:	8b 81       	ldd	r24, Y+3	; 0x03
  d6:	9c 81       	ldd	r25, Y+4	; 0x04
  d8:	89 2b       	or	r24, r25
  da:	29 f0       	breq	.+10     	; 0xe6 <wait_1ms+0x22>
  dc:	8b 81       	ldd	r24, Y+3	; 0x03
  de:	9c 81       	ldd	r25, Y+4	; 0x04
  e0:	9a 83       	std	Y+2, r25	; 0x02
  e2:	89 83       	std	Y+1, r24	; 0x01
  e4:	04 c0       	rjmp	.+8      	; 0xee <wait_1ms+0x2a>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	9a 83       	std	Y+2, r25	; 0x02
  ec:	89 83       	std	Y+1, r24	; 0x01
	while(tick_1ms_cnt != 1);
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	9a 81       	ldd	r25, Y+2	; 0x02
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	e1 f7       	brne	.-8      	; 0xee <wait_1ms+0x2a>
}
  f6:	00 00       	nop
  f8:	0f 90       	pop	r0
  fa:	0f 90       	pop	r0
  fc:	0f 90       	pop	r0
  fe:	0f 90       	pop	r0
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <RGB_LED_PWM>:

/* takes the parameters off time form each color and the runntime 
	all parameters are in mili seconds*/

void RGB_LED_PWM(byte red_pwm,byte green_pwm,byte blue_pwm,byte time_length)
{
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	00 d0       	rcall	.+0      	; 0x10c <RGB_LED_PWM+0x6>
 10c:	00 d0       	rcall	.+0      	; 0x10e <RGB_LED_PWM+0x8>
 10e:	1f 92       	push	r1
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
 114:	8a 83       	std	Y+2, r24	; 0x02
 116:	6b 83       	std	Y+3, r22	; 0x03
 118:	4c 83       	std	Y+4, r20	; 0x04
 11a:	2d 83       	std	Y+5, r18	; 0x05
	
	for(byte i =0;i<time_length;i++)
 11c:	19 82       	std	Y+1, r1	; 0x01
 11e:	2b c0       	rjmp	.+86     	; 0x176 <RGB_LED_PWM+0x70>
	{
		if ((i%red_pwm) == 0)
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	9a 81       	ldd	r25, Y+2	; 0x02
 124:	69 2f       	mov	r22, r25
 126:	77 d0       	rcall	.+238    	; 0x216 <__udivmodqi4>
 128:	89 2f       	mov	r24, r25
 12a:	88 23       	and	r24, r24
 12c:	21 f4       	brne	.+8      	; 0x136 <RGB_LED_PWM+0x30>
		{
			set_big_RGB_LED(ON,OFF,OFF);
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	8c df       	rcall	.-232    	; 0x4e <set_big_RGB_LED>
		}
		if ((i%green_pwm) == 0)
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	9b 81       	ldd	r25, Y+3	; 0x03
 13a:	69 2f       	mov	r22, r25
 13c:	6c d0       	rcall	.+216    	; 0x216 <__udivmodqi4>
 13e:	89 2f       	mov	r24, r25
 140:	88 23       	and	r24, r24
 142:	21 f4       	brne	.+8      	; 0x14c <RGB_LED_PWM+0x46>
		{
			set_big_RGB_LED(OFF,ON,OFF);
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	81 df       	rcall	.-254    	; 0x4e <set_big_RGB_LED>
		}
		if ((i%blue_pwm) == 0)
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	9c 81       	ldd	r25, Y+4	; 0x04
 150:	69 2f       	mov	r22, r25
 152:	61 d0       	rcall	.+194    	; 0x216 <__udivmodqi4>
 154:	89 2f       	mov	r24, r25
 156:	88 23       	and	r24, r24
 158:	21 f4       	brne	.+8      	; 0x162 <RGB_LED_PWM+0x5c>
		{
			set_big_RGB_LED(OFF,OFF,ON);
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	76 df       	rcall	.-276    	; 0x4e <set_big_RGB_LED>
		}
		set_big_RGB_LED(OFF,OFF,OFF);
 162:	40 e0       	ldi	r20, 0x00	; 0
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	72 df       	rcall	.-284    	; 0x4e <set_big_RGB_LED>
		wait_1ms(1);
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	aa df       	rcall	.-172    	; 0xc4 <wait_1ms>
	all parameters are in mili seconds*/

void RGB_LED_PWM(byte red_pwm,byte green_pwm,byte blue_pwm,byte time_length)
{
	
	for(byte i =0;i<time_length;i++)
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	8f 5f       	subi	r24, 0xFF	; 255
 174:	89 83       	std	Y+1, r24	; 0x01
 176:	99 81       	ldd	r25, Y+1	; 0x01
 178:	8d 81       	ldd	r24, Y+5	; 0x05
 17a:	98 17       	cp	r25, r24
 17c:	88 f2       	brcs	.-94     	; 0x120 <RGB_LED_PWM+0x1a>
			set_big_RGB_LED(OFF,OFF,ON);
		}
		set_big_RGB_LED(OFF,OFF,OFF);
		wait_1ms(1);
	}
} 
 17e:	00 00       	nop
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
 188:	0f 90       	pop	r0
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <get_buttons>:

byte get_buttons(byte button)
{
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	1f 92       	push	r1
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	89 83       	std	Y+1, r24	; 0x01
	DDRA = (DDRA & 0xFC);
 19c:	8a e3       	ldi	r24, 0x3A	; 58
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	2a e3       	ldi	r18, 0x3A	; 58
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	f9 01       	movw	r30, r18
 1a6:	20 81       	ld	r18, Z
 1a8:	2c 7f       	andi	r18, 0xFC	; 252
 1aa:	fc 01       	movw	r30, r24
 1ac:	20 83       	st	Z, r18
	switch(button)
 1ae:	89 81       	ldd	r24, Y+1	; 0x01
 1b0:	88 2f       	mov	r24, r24
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	91 05       	cpc	r25, r1
 1b8:	19 f0       	breq	.+6      	; 0x1c0 <get_buttons+0x30>
 1ba:	02 97       	sbiw	r24, 0x02	; 2
 1bc:	39 f0       	breq	.+14     	; 0x1cc <get_buttons+0x3c>
 1be:	0c c0       	rjmp	.+24     	; 0x1d8 <get_buttons+0x48>
	{
		case 1: return (PINA&0x01);
 1c0:	89 e3       	ldi	r24, 0x39	; 57
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	fc 01       	movw	r30, r24
 1c6:	80 81       	ld	r24, Z
 1c8:	81 70       	andi	r24, 0x01	; 1
 1ca:	07 c0       	rjmp	.+14     	; 0x1da <get_buttons+0x4a>
			break;
		case 2: return (PINA&0x02);
 1cc:	89 e3       	ldi	r24, 0x39	; 57
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	fc 01       	movw	r30, r24
 1d2:	80 81       	ld	r24, Z
 1d4:	82 70       	andi	r24, 0x02	; 2
 1d6:	01 c0       	rjmp	.+2      	; 0x1da <get_buttons+0x4a>
			break;
		default: return 2;
 1d8:	82 e0       	ldi	r24, 0x02	; 2
	}
}
 1da:	0f 90       	pop	r0
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <main>:

int main(void)
{
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	1f 92       	push	r1
 1e8:	cd b7       	in	r28, 0x3d	; 61
 1ea:	de b7       	in	r29, 0x3e	; 62
	byte the_button;
	
	set_big_RGB_LED(OFF,ON,OFF);
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	2d df       	rcall	.-422    	; 0x4e <set_big_RGB_LED>
	
	while (1)
	{
		the_button = get_buttons(1);
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	cc df       	rcall	.-104    	; 0x190 <get_buttons>
 1f8:	89 83       	std	Y+1, r24	; 0x01
		if(the_button==1)
 1fa:	89 81       	ldd	r24, Y+1	; 0x01
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	29 f4       	brne	.+10     	; 0x20a <main+0x28>
		{
			set_big_RGB_LED(OFF,ON,OFF);
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	23 df       	rcall	.-442    	; 0x4e <set_big_RGB_LED>
 208:	f5 cf       	rjmp	.-22     	; 0x1f4 <main+0x12>
		}
		else
		{
			RGB_LED_PWM(100,100,1,100000);
 20a:	20 ea       	ldi	r18, 0xA0	; 160
 20c:	41 e0       	ldi	r20, 0x01	; 1
 20e:	64 e6       	ldi	r22, 0x64	; 100
 210:	84 e6       	ldi	r24, 0x64	; 100
 212:	79 df       	rcall	.-270    	; 0x106 <RGB_LED_PWM>
		}
		
	}
 214:	ef cf       	rjmp	.-34     	; 0x1f4 <main+0x12>

00000216 <__udivmodqi4>:
 216:	99 1b       	sub	r25, r25
 218:	79 e0       	ldi	r23, 0x09	; 9
 21a:	04 c0       	rjmp	.+8      	; 0x224 <__udivmodqi4_ep>

0000021c <__udivmodqi4_loop>:
 21c:	99 1f       	adc	r25, r25
 21e:	96 17       	cp	r25, r22
 220:	08 f0       	brcs	.+2      	; 0x224 <__udivmodqi4_ep>
 222:	96 1b       	sub	r25, r22

00000224 <__udivmodqi4_ep>:
 224:	88 1f       	adc	r24, r24
 226:	7a 95       	dec	r23
 228:	c9 f7       	brne	.-14     	; 0x21c <__udivmodqi4_loop>
 22a:	80 95       	com	r24
 22c:	08 95       	ret

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
