
1H_Network.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  000010a2  00001136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  00800204  00800204  0000113a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000113a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000116c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001014  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d55  00000000  00000000  00002238  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046e  00000000  00000000  00002f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  000033fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000628  00000000  00000000  000035b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000037d  00000000  00000000  00003bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00003f59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
       2:	00 00       	nop
       4:	cf c0       	rjmp	.+414    	; 0x1a4 <__bad_interrupt>
       6:	00 00       	nop
       8:	cd c0       	rjmp	.+410    	; 0x1a4 <__bad_interrupt>
       a:	00 00       	nop
       c:	cb c0       	rjmp	.+406    	; 0x1a4 <__bad_interrupt>
       e:	00 00       	nop
      10:	c9 c0       	rjmp	.+402    	; 0x1a4 <__bad_interrupt>
      12:	00 00       	nop
      14:	c7 c0       	rjmp	.+398    	; 0x1a4 <__bad_interrupt>
      16:	00 00       	nop
      18:	c5 c0       	rjmp	.+394    	; 0x1a4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c3 c0       	rjmp	.+390    	; 0x1a4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c1 c0       	rjmp	.+386    	; 0x1a4 <__bad_interrupt>
      22:	00 00       	nop
      24:	bf c0       	rjmp	.+382    	; 0x1a4 <__bad_interrupt>
      26:	00 00       	nop
      28:	bd c0       	rjmp	.+378    	; 0x1a4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bb c0       	rjmp	.+374    	; 0x1a4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b9 c0       	rjmp	.+370    	; 0x1a4 <__bad_interrupt>
      32:	00 00       	nop
      34:	b7 c0       	rjmp	.+366    	; 0x1a4 <__bad_interrupt>
      36:	00 00       	nop
      38:	b5 c0       	rjmp	.+362    	; 0x1a4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b3 c0       	rjmp	.+358    	; 0x1a4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b1 c0       	rjmp	.+354    	; 0x1a4 <__bad_interrupt>
      42:	00 00       	nop
      44:	af c0       	rjmp	.+350    	; 0x1a4 <__bad_interrupt>
      46:	00 00       	nop
      48:	ad c0       	rjmp	.+346    	; 0x1a4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ab c0       	rjmp	.+342    	; 0x1a4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	bc c0       	rjmp	.+376    	; 0x1ca <__vector_20>
      52:	00 00       	nop
      54:	a7 c0       	rjmp	.+334    	; 0x1a4 <__bad_interrupt>
      56:	00 00       	nop
      58:	a5 c0       	rjmp	.+330    	; 0x1a4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a3 c0       	rjmp	.+326    	; 0x1a4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a1 c0       	rjmp	.+322    	; 0x1a4 <__bad_interrupt>
      62:	00 00       	nop
      64:	9f c0       	rjmp	.+318    	; 0x1a4 <__bad_interrupt>
      66:	00 00       	nop
      68:	9d c0       	rjmp	.+314    	; 0x1a4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9b c0       	rjmp	.+310    	; 0x1a4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	99 c0       	rjmp	.+306    	; 0x1a4 <__bad_interrupt>
      72:	00 00       	nop
      74:	97 c0       	rjmp	.+302    	; 0x1a4 <__bad_interrupt>
      76:	00 00       	nop
      78:	95 c0       	rjmp	.+298    	; 0x1a4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	93 c0       	rjmp	.+294    	; 0x1a4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	91 c0       	rjmp	.+290    	; 0x1a4 <__bad_interrupt>
      82:	00 00       	nop
      84:	8f c0       	rjmp	.+286    	; 0x1a4 <__bad_interrupt>
      86:	00 00       	nop
      88:	8d c0       	rjmp	.+282    	; 0x1a4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8b c0       	rjmp	.+278    	; 0x1a4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	89 c0       	rjmp	.+274    	; 0x1a4 <__bad_interrupt>
      92:	00 00       	nop
      94:	87 c0       	rjmp	.+270    	; 0x1a4 <__bad_interrupt>
      96:	00 00       	nop
      98:	85 c0       	rjmp	.+266    	; 0x1a4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	83 c0       	rjmp	.+262    	; 0x1a4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	81 c0       	rjmp	.+258    	; 0x1a4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	7f c0       	rjmp	.+254    	; 0x1a4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7d c0       	rjmp	.+250    	; 0x1a4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7b c0       	rjmp	.+246    	; 0x1a4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	79 c0       	rjmp	.+242    	; 0x1a4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	77 c0       	rjmp	.+238    	; 0x1a4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	75 c0       	rjmp	.+234    	; 0x1a4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	73 c0       	rjmp	.+230    	; 0x1a4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	71 c0       	rjmp	.+226    	; 0x1a4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	6f c0       	rjmp	.+222    	; 0x1a4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	6d c0       	rjmp	.+218    	; 0x1a4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	6b c0       	rjmp	.+214    	; 0x1a4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	69 c0       	rjmp	.+210    	; 0x1a4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	67 c0       	rjmp	.+206    	; 0x1a4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	65 c0       	rjmp	.+202    	; 0x1a4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	63 c0       	rjmp	.+198    	; 0x1a4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	61 c0       	rjmp	.+194    	; 0x1a4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <train+0x16>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e2 ea       	ldi	r30, 0xA2	; 162
     17e:	f0 e1       	ldi	r31, 0x10	; 16
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a4 30       	cpi	r26, 0x04	; 4
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	22 e0       	ldi	r18, 0x02	; 2
     192:	a4 e0       	ldi	r26, 0x04	; 4
     194:	b2 e0       	ldi	r27, 0x02	; 2
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a1 34       	cpi	r26, 0x41	; 65
     19c:	b2 07       	cpc	r27, r18
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	8c d0       	rcall	.+280    	; 0x2ba <main>
     1a2:	7d c7       	rjmp	.+3834   	; 0x109e <_exit>

000001a4 <__bad_interrupt>:
     1a4:	2d cf       	rjmp	.-422    	; 0x0 <__vectors>

000001a6 <init_timer>:
unsigned int iterations = 2000;							//how many training iterrations in one epoch
unsigned int timer = 0;
unsigned char yhat;

void init_timer()
{
     1a6:	cf 93       	push	r28
     1a8:	df 93       	push	r29
     1aa:	cd b7       	in	r28, 0x3d	; 61
     1ac:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (1<<CS10);
     1ae:	81 e8       	ldi	r24, 0x81	; 129
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	21 e0       	ldi	r18, 0x01	; 1
     1b4:	fc 01       	movw	r30, r24
     1b6:	20 83       	st	Z, r18
	TIMSK1 = (1<<TOIE1);
     1b8:	8f e6       	ldi	r24, 0x6F	; 111
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	21 e0       	ldi	r18, 0x01	; 1
     1be:	fc 01       	movw	r30, r24
     1c0:	20 83       	st	Z, r18
}
     1c2:	00 00       	nop
     1c4:	df 91       	pop	r29
     1c6:	cf 91       	pop	r28
     1c8:	08 95       	ret

000001ca <__vector_20>:

ISR(TIMER1_OVF_vect)
{
     1ca:	1f 92       	push	r1
     1cc:	0f 92       	push	r0
     1ce:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     1d2:	0f 92       	push	r0
     1d4:	11 24       	eor	r1, r1
     1d6:	8f 93       	push	r24
     1d8:	9f 93       	push	r25
     1da:	cf 93       	push	r28
     1dc:	df 93       	push	r29
     1de:	cd b7       	in	r28, 0x3d	; 61
     1e0:	de b7       	in	r29, 0x3e	; 62
	timer++;
     1e2:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
     1e6:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__data_end+0x1>
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <__data_end+0x1>
     1f0:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__data_end>
}
     1f4:	00 00       	nop
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	9f 91       	pop	r25
     1fc:	8f 91       	pop	r24
     1fe:	0f 90       	pop	r0
     200:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     204:	0f 90       	pop	r0
     206:	1f 90       	pop	r1
     208:	18 95       	reti

0000020a <blink>:

void blink(unsigned char times)
{
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	00 d0       	rcall	.+0      	; 0x210 <blink+0x6>
     210:	cd b7       	in	r28, 0x3d	; 61
     212:	de b7       	in	r29, 0x3e	; 62
     214:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i < times; i++)
     216:	1a 82       	std	Y+2, r1	; 0x02
     218:	19 82       	std	Y+1, r1	; 0x01
     21a:	24 c0       	rjmp	.+72     	; 0x264 <blink+0x5a>
	{
		PORTA = 0x00;
     21c:	82 e2       	ldi	r24, 0x22	; 34
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	fc 01       	movw	r30, r24
     222:	10 82       	st	Z, r1
		timer =0;
     224:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <__data_end+0x1>
     228:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <__data_end>
		while (timer<5);
     22c:	00 00       	nop
     22e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
     232:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__data_end+0x1>
     236:	05 97       	sbiw	r24, 0x05	; 5
     238:	d0 f3       	brcs	.-12     	; 0x22e <blink+0x24>
		PORTA = 0xFF;
     23a:	82 e2       	ldi	r24, 0x22	; 34
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	2f ef       	ldi	r18, 0xFF	; 255
     240:	fc 01       	movw	r30, r24
     242:	20 83       	st	Z, r18
		timer =0;
     244:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <__data_end+0x1>
     248:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <__data_end>
		while (timer<5);	
     24c:	00 00       	nop
     24e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
     252:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__data_end+0x1>
     256:	05 97       	sbiw	r24, 0x05	; 5
     258:	d0 f3       	brcs	.-12     	; 0x24e <blink+0x44>
	timer++;
}

void blink(unsigned char times)
{
	for (int i = 0; i < times; i++)
     25a:	89 81       	ldd	r24, Y+1	; 0x01
     25c:	9a 81       	ldd	r25, Y+2	; 0x02
     25e:	01 96       	adiw	r24, 0x01	; 1
     260:	9a 83       	std	Y+2, r25	; 0x02
     262:	89 83       	std	Y+1, r24	; 0x01
     264:	8b 81       	ldd	r24, Y+3	; 0x03
     266:	28 2f       	mov	r18, r24
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	9a 81       	ldd	r25, Y+2	; 0x02
     26e:	82 17       	cp	r24, r18
     270:	93 07       	cpc	r25, r19
     272:	a4 f2       	brlt	.-88     	; 0x21c <blink+0x12>
		while (timer<5);
		PORTA = 0xFF;
		timer =0;
		while (timer<5);	
	}
}
     274:	00 00       	nop
     276:	0f 90       	pop	r0
     278:	0f 90       	pop	r0
     27a:	0f 90       	pop	r0
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <wait>:
void wait(int length)
{
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	1f 92       	push	r1
     288:	1f 92       	push	r1
     28a:	cd b7       	in	r28, 0x3d	; 61
     28c:	de b7       	in	r29, 0x3e	; 62
     28e:	9a 83       	std	Y+2, r25	; 0x02
     290:	89 83       	std	Y+1, r24	; 0x01
	timer = 0;
     292:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <__data_end+0x1>
     296:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <__data_end>
	while (timer<length);
     29a:	00 00       	nop
     29c:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__data_end>
     2a0:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__data_end+0x1>
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	9a 81       	ldd	r25, Y+2	; 0x02
     2a8:	28 17       	cp	r18, r24
     2aa:	39 07       	cpc	r19, r25
     2ac:	b8 f3       	brcs	.-18     	; 0x29c <wait+0x1a>
}
     2ae:	00 00       	nop
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	08 95       	ret

000002ba <main>:

int main(void)
{
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	1f 92       	push	r1
     2c0:	1f 92       	push	r1
     2c2:	cd b7       	in	r28, 0x3d	; 61
     2c4:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF;										//set led Port to output
     2c6:	81 e2       	ldi	r24, 0x21	; 33
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	2f ef       	ldi	r18, 0xFF	; 255
     2cc:	fc 01       	movw	r30, r24
     2ce:	20 83       	st	Z, r18
	DDRC = 0;											//set PORT C as Input
     2d0:	87 e2       	ldi	r24, 0x27	; 39
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	fc 01       	movw	r30, r24
     2d6:	10 82       	st	Z, r1
	DDRE = 0;
     2d8:	8d e2       	ldi	r24, 0x2D	; 45
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	fc 01       	movw	r30, r24
     2de:	10 82       	st	Z, r1
	DDRH = 0xFF;										//set rgb led port to output
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	91 e0       	ldi	r25, 0x01	; 1
     2e4:	2f ef       	ldi	r18, 0xFF	; 255
     2e6:	fc 01       	movw	r30, r24
     2e8:	20 83       	st	Z, r18

	PORTH = 0;											//turn off rgb led's
     2ea:	82 e0       	ldi	r24, 0x02	; 2
     2ec:	91 e0       	ldi	r25, 0x01	; 1
     2ee:	fc 01       	movw	r30, r24
     2f0:	10 82       	st	Z, r1
	PORTA = 0xFF;										//turn off led's
     2f2:	82 e2       	ldi	r24, 0x22	; 34
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	2f ef       	ldi	r18, 0xFF	; 255
     2f8:	fc 01       	movw	r30, r24

	init_timer();
     2fa:	20 83       	st	Z, r18
	sei();
     2fc:	54 df       	rcall	.-344    	; 0x1a6 <init_timer>

	//init Neural Network vars
	for (unsigned char i=0;i<8;i++)
     2fe:	78 94       	sei
     300:	19 82       	std	Y+1, r1	; 0x01
	{
		NN.weights[i]=0.1;								//define all weights
     302:	17 c0       	rjmp	.+46     	; 0x332 <main+0x78>
     304:	89 81       	ldd	r24, Y+1	; 0x01
     306:	88 2f       	mov	r24, r24
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	02 96       	adiw	r24, 0x02	; 2
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	9c 01       	movw	r18, r24
     316:	28 5f       	subi	r18, 0xF8	; 248
     318:	3d 4f       	sbci	r19, 0xFD	; 253
     31a:	8d ec       	ldi	r24, 0xCD	; 205
     31c:	9c ec       	ldi	r25, 0xCC	; 204
     31e:	ac ec       	ldi	r26, 0xCC	; 204
     320:	bd e3       	ldi	r27, 0x3D	; 61
     322:	f9 01       	movw	r30, r18
     324:	80 83       	st	Z, r24
     326:	91 83       	std	Z+1, r25	; 0x01
     328:	a2 83       	std	Z+2, r26	; 0x02

	init_timer();
	sei();

	//init Neural Network vars
	for (unsigned char i=0;i<8;i++)
     32a:	b3 83       	std	Z+3, r27	; 0x03
     32c:	89 81       	ldd	r24, Y+1	; 0x01
     32e:	8f 5f       	subi	r24, 0xFF	; 255
     330:	89 83       	std	Y+1, r24	; 0x01
     332:	89 81       	ldd	r24, Y+1	; 0x01
     334:	88 30       	cpi	r24, 0x08	; 8
	{
		NN.weights[i]=0.1;								//define all weights
	}
	
	NN.alpha = 0;										//the summ of all inputs times the weights
     336:	30 f3       	brcs	.-52     	; 0x304 <main+0x4a>
     338:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <NN+0x28>
     33c:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <NN+0x29>
     340:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <NN+0x2a>
     344:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <NN+0x2b>
	NN.Yhat = 0;										//answer of the neural network
     348:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <NN+0x2c>
     34c:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <NN+0x2d>
     350:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <NN+0x2e>
     354:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <NN+0x2f>
	NN.Y = 0;											//right answer
     358:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <NN+0x30>
     35c:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <NN+0x31>
     360:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <NN+0x32>
     364:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <NN+0x33>
	NN.LR = 0.1;										//Learning rate
     368:	8d ec       	ldi	r24, 0xCD	; 205
     36a:	9c ec       	ldi	r25, 0xCC	; 204
     36c:	ac ec       	ldi	r26, 0xCC	; 204
     36e:	bd e3       	ldi	r27, 0x3D	; 61
     370:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <NN+0x34>
     374:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <NN+0x35>
     378:	a0 93 3e 02 	sts	0x023E, r26	; 0x80023e <NN+0x36>

	blink(4);
     37c:	b0 93 3f 02 	sts	0x023F, r27	; 0x80023f <NN+0x37>
	RGB_GREEN;
     380:	84 e0       	ldi	r24, 0x04	; 4
     382:	43 df       	rcall	.-378    	; 0x20a <blink>
     384:	82 e0       	ldi	r24, 0x02	; 2
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	22 e0       	ldi	r18, 0x02	; 2
     38a:	31 e0       	ldi	r19, 0x01	; 1
     38c:	f9 01       	movw	r30, r18
     38e:	20 81       	ld	r18, Z
     390:	20 61       	ori	r18, 0x10	; 16
    while (1) 
    {
		if (S1)															//wait for taste 1
     392:	fc 01       	movw	r30, r24
     394:	20 83       	st	Z, r18
     396:	8c e2       	ldi	r24, 0x2C	; 44
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	fc 01       	movw	r30, r24
     39c:	80 81       	ld	r24, Z
     39e:	88 2f       	mov	r24, r24
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	80 71       	andi	r24, 0x10	; 16
     3a4:	99 27       	eor	r25, r25
		{
			RGB_RED;
     3a6:	89 2b       	or	r24, r25
     3a8:	b1 f3       	breq	.-20     	; 0x396 <main+0xdc>
     3aa:	82 e0       	ldi	r24, 0x02	; 2
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	22 e0       	ldi	r18, 0x02	; 2
     3b0:	31 e0       	ldi	r19, 0x01	; 1
     3b2:	f9 01       	movw	r30, r18
     3b4:	20 81       	ld	r18, Z
     3b6:	28 60       	ori	r18, 0x08	; 8
			//read hardware input
			for (unsigned char neuron = 0; neuron<8;neuron++)
     3b8:	fc 01       	movw	r30, r24
     3ba:	20 83       	st	Z, r18
			{
				NN.neurons[neuron] = (PINC&(1<<neuron))>>neuron;		//neurons are equal to inputs
     3bc:	1a 82       	std	Y+2, r1	; 0x02
     3be:	24 c0       	rjmp	.+72     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3c0:	8a 81       	ldd	r24, Y+2	; 0x02
     3c2:	88 2f       	mov	r24, r24
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	26 e2       	ldi	r18, 0x26	; 38
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	f9 01       	movw	r30, r18
     3cc:	20 81       	ld	r18, Z
     3ce:	42 2f       	mov	r20, r18
     3d0:	50 e0       	ldi	r21, 0x00	; 0
     3d2:	2a 81       	ldd	r18, Y+2	; 0x02
     3d4:	62 2f       	mov	r22, r18
     3d6:	70 e0       	ldi	r23, 0x00	; 0
     3d8:	21 e0       	ldi	r18, 0x01	; 1
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <main+0x128>
     3de:	22 0f       	add	r18, r18
     3e0:	33 1f       	adc	r19, r19
     3e2:	6a 95       	dec	r22
     3e4:	e2 f7       	brpl	.-8      	; 0x3de <main+0x124>
     3e6:	24 23       	and	r18, r20
     3e8:	35 23       	and	r19, r21
     3ea:	4a 81       	ldd	r20, Y+2	; 0x02
     3ec:	44 2f       	mov	r20, r20
     3ee:	50 e0       	ldi	r21, 0x00	; 0
     3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <main+0x13c>
     3f2:	35 95       	asr	r19
     3f4:	27 95       	ror	r18
     3f6:	4a 95       	dec	r20
     3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <main+0x138>
     3fa:	88 5f       	subi	r24, 0xF8	; 248
     3fc:	9d 4f       	sbci	r25, 0xFD	; 253
    {
		if (S1)															//wait for taste 1
		{
			RGB_RED;
			//read hardware input
			for (unsigned char neuron = 0; neuron<8;neuron++)
     3fe:	fc 01       	movw	r30, r24
     400:	20 83       	st	Z, r18
     402:	8a 81       	ldd	r24, Y+2	; 0x02
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	8a 83       	std	Y+2, r24	; 0x02
			{
				NN.neurons[neuron] = (PINC&(1<<neuron))>>neuron;		//neurons are equal to inputs
			}

			fead_forward(&NN);											// normal fead forward 
     408:	8a 81       	ldd	r24, Y+2	; 0x02
     40a:	88 30       	cpi	r24, 0x08	; 8
     40c:	c8 f2       	brcs	.-78     	; 0x3c0 <main+0x106>
			NN.Yhat*=255;
     40e:	88 e0       	ldi	r24, 0x08	; 8
     410:	92 e0       	ldi	r25, 0x02	; 2
     412:	18 d1       	rcall	.+560    	; 0x644 <fead_forward>
     414:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <NN+0x2c>
     418:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <NN+0x2d>
     41c:	a0 91 36 02 	lds	r26, 0x0236	; 0x800236 <NN+0x2e>
     420:	b0 91 37 02 	lds	r27, 0x0237	; 0x800237 <NN+0x2f>
     424:	20 e0       	ldi	r18, 0x00	; 0
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	4f e7       	ldi	r20, 0x7F	; 127
     42a:	53 e4       	ldi	r21, 0x43	; 67
     42c:	bc 01       	movw	r22, r24
     42e:	cd 01       	movw	r24, r26
     430:	34 d5       	rcall	.+2664   	; 0xe9a <__mulsf3>
     432:	dc 01       	movw	r26, r24
     434:	cb 01       	movw	r24, r22
     436:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <NN+0x2c>
     43a:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <NN+0x2d>
     43e:	a0 93 36 02 	sts	0x0236, r26	; 0x800236 <NN+0x2e>
			yhat = NN.Yhat;
     442:	b0 93 37 02 	sts	0x0237, r27	; 0x800237 <NN+0x2f>
     446:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <NN+0x2c>
     44a:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <NN+0x2d>
     44e:	a0 91 36 02 	lds	r26, 0x0236	; 0x800236 <NN+0x2e>
     452:	b0 91 37 02 	lds	r27, 0x0237	; 0x800237 <NN+0x2f>
     456:	bc 01       	movw	r22, r24
     458:	cd 01       	movw	r24, r26
     45a:	d0 d3       	rcall	.+1952   	; 0xbfc <__fixunssfsi>
     45c:	dc 01       	movw	r26, r24
			PORTA = ~yhat;											// make a u8 value from double Yhat
     45e:	cb 01       	movw	r24, r22
     460:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <yhat>
     464:	82 e2       	ldi	r24, 0x22	; 34
     466:	90 e0       	ldi	r25, 0x00	; 0

			wait(500);
     468:	20 91 40 02 	lds	r18, 0x0240	; 0x800240 <yhat>
     46c:	20 95       	com	r18
     46e:	fc 01       	movw	r30, r24
			blink(4);
     470:	20 83       	st	Z, r18
     472:	84 ef       	ldi	r24, 0xF4	; 244
     474:	91 e0       	ldi	r25, 0x01	; 1

			RGB_GREEN_of;
     476:	05 df       	rcall	.-502    	; 0x282 <wait>
     478:	84 e0       	ldi	r24, 0x04	; 4
     47a:	c7 de       	rcall	.-626    	; 0x20a <blink>
     47c:	82 e0       	ldi	r24, 0x02	; 2
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	22 e0       	ldi	r18, 0x02	; 2
     482:	31 e0       	ldi	r19, 0x01	; 1
     484:	f9 01       	movw	r30, r18
     486:	20 81       	ld	r18, Z
			RGB_RED_of;
     488:	2f 7e       	andi	r18, 0xEF	; 239
     48a:	fc 01       	movw	r30, r24
     48c:	20 83       	st	Z, r18
     48e:	82 e0       	ldi	r24, 0x02	; 2
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	22 e0       	ldi	r18, 0x02	; 2
     494:	31 e0       	ldi	r19, 0x01	; 1
     496:	f9 01       	movw	r30, r18
     498:	20 81       	ld	r18, Z

			while(1)													//wait for user feedback
			{
				RGB_BLUE;
     49a:	27 7f       	andi	r18, 0xF7	; 247
     49c:	fc 01       	movw	r30, r24
     49e:	20 83       	st	Z, r18
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	22 e0       	ldi	r18, 0x02	; 2
     4a6:	31 e0       	ldi	r19, 0x01	; 1
     4a8:	f9 01       	movw	r30, r18
     4aa:	20 81       	ld	r18, Z
				PORTA = ~PINC;
     4ac:	20 62       	ori	r18, 0x20	; 32
     4ae:	fc 01       	movw	r30, r24
     4b0:	20 83       	st	Z, r18
     4b2:	82 e2       	ldi	r24, 0x22	; 34
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	26 e2       	ldi	r18, 0x26	; 38
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	f9 01       	movw	r30, r18
     4bc:	20 81       	ld	r18, Z
				if (S1)											//if s1 is pressed its wrong
     4be:	20 95       	com	r18
     4c0:	fc 01       	movw	r30, r24
     4c2:	20 83       	st	Z, r18
     4c4:	8c e2       	ldi	r24, 0x2C	; 44
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	fc 01       	movw	r30, r24
     4ca:	80 81       	ld	r24, Z
     4cc:	88 2f       	mov	r24, r24
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	80 71       	andi	r24, 0x10	; 16
     4d2:	99 27       	eor	r25, r25
				{
					RGB_BLUE_of;
     4d4:	89 2b       	or	r24, r25
     4d6:	09 f4       	brne	.+2      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4d8:	8b c0       	rjmp	.+278    	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
     4da:	82 e0       	ldi	r24, 0x02	; 2
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	22 e0       	ldi	r18, 0x02	; 2
     4e0:	31 e0       	ldi	r19, 0x01	; 1
     4e2:	f9 01       	movw	r30, r18
     4e4:	20 81       	ld	r18, Z
					RGB_GREEN;
     4e6:	2f 7d       	andi	r18, 0xDF	; 223
     4e8:	fc 01       	movw	r30, r24
     4ea:	20 83       	st	Z, r18
     4ec:	82 e0       	ldi	r24, 0x02	; 2
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	22 e0       	ldi	r18, 0x02	; 2
     4f2:	31 e0       	ldi	r19, 0x01	; 1
     4f4:	f9 01       	movw	r30, r18
     4f6:	20 81       	ld	r18, Z
					RGB_RED;
     4f8:	20 61       	ori	r18, 0x10	; 16
     4fa:	fc 01       	movw	r30, r24
     4fc:	20 83       	st	Z, r18
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	22 e0       	ldi	r18, 0x02	; 2
     504:	31 e0       	ldi	r19, 0x01	; 1
     506:	f9 01       	movw	r30, r18
     508:	20 81       	ld	r18, Z

					NN.Y=PINC;											//read the right value from Port C
     50a:	28 60       	ori	r18, 0x08	; 8
     50c:	fc 01       	movw	r30, r24
     50e:	20 83       	st	Z, r18
     510:	86 e2       	ldi	r24, 0x26	; 38
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	fc 01       	movw	r30, r24
     516:	80 81       	ld	r24, Z
     518:	88 2f       	mov	r24, r24
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	a0 e0       	ldi	r26, 0x00	; 0
     51e:	b0 e0       	ldi	r27, 0x00	; 0
     520:	bc 01       	movw	r22, r24
     522:	cd 01       	movw	r24, r26
     524:	97 d3       	rcall	.+1838   	; 0xc54 <__floatunsisf>
     526:	dc 01       	movw	r26, r24
     528:	cb 01       	movw	r24, r22
     52a:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <NN+0x30>
     52e:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <NN+0x31>
     532:	a0 93 3a 02 	sts	0x023A, r26	; 0x80023a <NN+0x32>
					train(&NN,epochs,iterations);						// train
     536:	b0 93 3b 02 	sts	0x023B, r27	; 0x80023b <NN+0x33>
     53a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <iterations>
     53e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <iterations+0x1>
     542:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     546:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     54a:	a9 01       	movw	r20, r18
     54c:	bc 01       	movw	r22, r24

					RGB_GREEN_of;
     54e:	88 e0       	ldi	r24, 0x08	; 8
     550:	92 e0       	ldi	r25, 0x02	; 2
     552:	fb d1       	rcall	.+1014   	; 0x94a <train>
     554:	82 e0       	ldi	r24, 0x02	; 2
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	22 e0       	ldi	r18, 0x02	; 2
     55a:	31 e0       	ldi	r19, 0x01	; 1
     55c:	f9 01       	movw	r30, r18
     55e:	20 81       	ld	r18, Z
					RGB_RED_of;
     560:	2f 7e       	andi	r18, 0xEF	; 239
     562:	fc 01       	movw	r30, r24
     564:	20 83       	st	Z, r18
     566:	82 e0       	ldi	r24, 0x02	; 2
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	22 e0       	ldi	r18, 0x02	; 2
     56c:	31 e0       	ldi	r19, 0x01	; 1
     56e:	f9 01       	movw	r30, r18
     570:	20 81       	ld	r18, Z
					RGB_BLUE;
     572:	27 7f       	andi	r18, 0xF7	; 247
     574:	fc 01       	movw	r30, r24
     576:	20 83       	st	Z, r18
     578:	82 e0       	ldi	r24, 0x02	; 2
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	22 e0       	ldi	r18, 0x02	; 2
     57e:	31 e0       	ldi	r19, 0x01	; 1
     580:	f9 01       	movw	r30, r18
     582:	20 81       	ld	r18, Z

					NN.Yhat*=255;
     584:	20 62       	ori	r18, 0x20	; 32
     586:	fc 01       	movw	r30, r24
     588:	20 83       	st	Z, r18
     58a:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <NN+0x2c>
     58e:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <NN+0x2d>
     592:	a0 91 36 02 	lds	r26, 0x0236	; 0x800236 <NN+0x2e>
     596:	b0 91 37 02 	lds	r27, 0x0237	; 0x800237 <NN+0x2f>
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	4f e7       	ldi	r20, 0x7F	; 127
     5a0:	53 e4       	ldi	r21, 0x43	; 67
     5a2:	bc 01       	movw	r22, r24
     5a4:	cd 01       	movw	r24, r26
     5a6:	79 d4       	rcall	.+2290   	; 0xe9a <__mulsf3>
     5a8:	dc 01       	movw	r26, r24
     5aa:	cb 01       	movw	r24, r22
     5ac:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <NN+0x2c>
     5b0:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <NN+0x2d>
					yhat = NN.Yhat;
     5b4:	a0 93 36 02 	sts	0x0236, r26	; 0x800236 <NN+0x2e>
     5b8:	b0 93 37 02 	sts	0x0237, r27	; 0x800237 <NN+0x2f>
     5bc:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <NN+0x2c>
     5c0:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <NN+0x2d>
     5c4:	a0 91 36 02 	lds	r26, 0x0236	; 0x800236 <NN+0x2e>
     5c8:	b0 91 37 02 	lds	r27, 0x0237	; 0x800237 <NN+0x2f>
     5cc:	bc 01       	movw	r22, r24
     5ce:	cd 01       	movw	r24, r26
					PORTA = ~yhat;
     5d0:	15 d3       	rcall	.+1578   	; 0xbfc <__fixunssfsi>
     5d2:	dc 01       	movw	r26, r24
     5d4:	cb 01       	movw	r24, r22
     5d6:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <yhat>
     5da:	82 e2       	ldi	r24, 0x22	; 34
     5dc:	90 e0       	ldi	r25, 0x00	; 0
					wait(500);											// make a u8 value from double Yhat
     5de:	20 91 40 02 	lds	r18, 0x0240	; 0x800240 <yhat>
     5e2:	20 95       	com	r18
     5e4:	fc 01       	movw	r30, r24
					break;
     5e6:	20 83       	st	Z, r18
				}
				else if (S2)										//if s2 is pressed its true and the programm goes on
     5e8:	84 ef       	ldi	r24, 0xF4	; 244
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	4a de       	rcall	.-876    	; 0x282 <wait>
     5ee:	0c c0       	rjmp	.+24     	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
     5f0:	8c e2       	ldi	r24, 0x2C	; 44
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	fc 01       	movw	r30, r24
     5f6:	80 81       	ld	r24, Z
     5f8:	88 2f       	mov	r24, r24
				{
					break;
				}
			}
     5fa:	90 e0       	ldi	r25, 0x00	; 0
					wait(500);											// make a u8 value from double Yhat
					break;
				}
				else if (S2)										//if s2 is pressed its true and the programm goes on
				{
					break;
     5fc:	80 72       	andi	r24, 0x20	; 32
				}
			}
			blink(4);
     5fe:	99 27       	eor	r25, r25
     600:	89 2b       	or	r24, r25
     602:	09 f4       	brne	.+2      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
			RGB_BLUE_of;
     604:	4d cf       	rjmp	.-358    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     606:	00 00       	nop
     608:	84 e0       	ldi	r24, 0x04	; 4
     60a:	ff dd       	rcall	.-1026   	; 0x20a <blink>
     60c:	82 e0       	ldi	r24, 0x02	; 2
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	22 e0       	ldi	r18, 0x02	; 2
     612:	31 e0       	ldi	r19, 0x01	; 1
     614:	f9 01       	movw	r30, r18
			RGB_RED_of;
     616:	20 81       	ld	r18, Z
     618:	2f 7d       	andi	r18, 0xDF	; 223
     61a:	fc 01       	movw	r30, r24
     61c:	20 83       	st	Z, r18
     61e:	82 e0       	ldi	r24, 0x02	; 2
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	22 e0       	ldi	r18, 0x02	; 2
     624:	31 e0       	ldi	r19, 0x01	; 1
     626:	f9 01       	movw	r30, r18
			RGB_GREEN;
     628:	20 81       	ld	r18, Z
     62a:	27 7f       	andi	r18, 0xF7	; 247
     62c:	fc 01       	movw	r30, r24
     62e:	20 83       	st	Z, r18
     630:	82 e0       	ldi	r24, 0x02	; 2
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	22 e0       	ldi	r18, 0x02	; 2
     636:	31 e0       	ldi	r19, 0x01	; 1
     638:	f9 01       	movw	r30, r18
		}
    }
     63a:	20 81       	ld	r18, Z
     63c:	20 61       	ori	r18, 0x10	; 16
     63e:	fc 01       	movw	r30, r24
     640:	20 83       	st	Z, r18
     642:	a9 ce       	rjmp	.-686    	; 0x396 <main+0xdc>

00000644 <fead_forward>:
{
	return learnd_in_pc;
}

void fead_forward(struct NeuralNet *NN1)
{
     644:	8f 92       	push	r8
     646:	9f 92       	push	r9
     648:	af 92       	push	r10
     64a:	bf 92       	push	r11
     64c:	cf 92       	push	r12
     64e:	df 92       	push	r13
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	00 d0       	rcall	.+0      	; 0x65a <fead_forward+0x16>
     65a:	cd b7       	in	r28, 0x3d	; 61
     65c:	de b7       	in	r29, 0x3e	; 62
     65e:	9b 83       	std	Y+3, r25	; 0x03
     660:	8a 83       	std	Y+2, r24	; 0x02
	 //reset values
	 NN1->Yhat = 0;
     662:	8a 81       	ldd	r24, Y+2	; 0x02
     664:	9b 81       	ldd	r25, Y+3	; 0x03
     666:	fc 01       	movw	r30, r24
     668:	14 a6       	std	Z+44, r1	; 0x2c
     66a:	15 a6       	std	Z+45, r1	; 0x2d
     66c:	16 a6       	std	Z+46, r1	; 0x2e
     66e:	17 a6       	std	Z+47, r1	; 0x2f
	 NN1->alpha = 0;
     670:	8a 81       	ldd	r24, Y+2	; 0x02
     672:	9b 81       	ldd	r25, Y+3	; 0x03
     674:	fc 01       	movw	r30, r24
     676:	10 a6       	std	Z+40, r1	; 0x28
     678:	11 a6       	std	Z+41, r1	; 0x29
     67a:	12 a6       	std	Z+42, r1	; 0x2a
     67c:	13 a6       	std	Z+43, r1	; 0x2b
	 
	 //compute potential
	 for (unsigned char index = 0;index < 8;index++)
     67e:	19 82       	std	Y+1, r1	; 0x01
     680:	44 c0       	rjmp	.+136    	; 0x70a <fead_forward+0xc6>
	 {
		 NN1->alpha += ((NN1->neurons[index])*(NN1->weights[index]));			//summ of the neuron values times the weights of each neuron
     682:	8a 81       	ldd	r24, Y+2	; 0x02
     684:	9b 81       	ldd	r25, Y+3	; 0x03
     686:	fc 01       	movw	r30, r24
     688:	c0 a4       	ldd	r12, Z+40	; 0x28
     68a:	d1 a4       	ldd	r13, Z+41	; 0x29
     68c:	e2 a4       	ldd	r14, Z+42	; 0x2a
     68e:	f3 a4       	ldd	r15, Z+43	; 0x2b
     690:	89 81       	ldd	r24, Y+1	; 0x01
     692:	88 2f       	mov	r24, r24
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	2a 81       	ldd	r18, Y+2	; 0x02
     698:	3b 81       	ldd	r19, Y+3	; 0x03
     69a:	82 0f       	add	r24, r18
     69c:	93 1f       	adc	r25, r19
     69e:	fc 01       	movw	r30, r24
     6a0:	80 81       	ld	r24, Z
     6a2:	88 2f       	mov	r24, r24
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	09 2e       	mov	r0, r25
     6a8:	00 0c       	add	r0, r0
     6aa:	aa 0b       	sbc	r26, r26
     6ac:	bb 0b       	sbc	r27, r27
     6ae:	bc 01       	movw	r22, r24
     6b0:	cd 01       	movw	r24, r26
     6b2:	d2 d2       	rcall	.+1444   	; 0xc58 <__floatsisf>
     6b4:	4b 01       	movw	r8, r22
     6b6:	5c 01       	movw	r10, r24
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	88 2f       	mov	r24, r24
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	2a 81       	ldd	r18, Y+2	; 0x02
     6c0:	3b 81       	ldd	r19, Y+3	; 0x03
     6c2:	02 96       	adiw	r24, 0x02	; 2
     6c4:	88 0f       	add	r24, r24
     6c6:	99 1f       	adc	r25, r25
     6c8:	88 0f       	add	r24, r24
     6ca:	99 1f       	adc	r25, r25
     6cc:	82 0f       	add	r24, r18
     6ce:	93 1f       	adc	r25, r19
     6d0:	fc 01       	movw	r30, r24
     6d2:	80 81       	ld	r24, Z
     6d4:	91 81       	ldd	r25, Z+1	; 0x01
     6d6:	a2 81       	ldd	r26, Z+2	; 0x02
     6d8:	b3 81       	ldd	r27, Z+3	; 0x03
     6da:	9c 01       	movw	r18, r24
     6dc:	ad 01       	movw	r20, r26
     6de:	c5 01       	movw	r24, r10
     6e0:	b4 01       	movw	r22, r8
     6e2:	db d3       	rcall	.+1974   	; 0xe9a <__mulsf3>
     6e4:	dc 01       	movw	r26, r24
     6e6:	cb 01       	movw	r24, r22
     6e8:	9c 01       	movw	r18, r24
     6ea:	ad 01       	movw	r20, r26
     6ec:	c7 01       	movw	r24, r14
     6ee:	b6 01       	movw	r22, r12
     6f0:	88 d1       	rcall	.+784    	; 0xa02 <__addsf3>
     6f2:	dc 01       	movw	r26, r24
     6f4:	cb 01       	movw	r24, r22
     6f6:	2a 81       	ldd	r18, Y+2	; 0x02
     6f8:	3b 81       	ldd	r19, Y+3	; 0x03
     6fa:	f9 01       	movw	r30, r18
     6fc:	80 a7       	std	Z+40, r24	; 0x28
     6fe:	91 a7       	std	Z+41, r25	; 0x29
     700:	a2 a7       	std	Z+42, r26	; 0x2a
     702:	b3 a7       	std	Z+43, r27	; 0x2b
	 //reset values
	 NN1->Yhat = 0;
	 NN1->alpha = 0;
	 
	 //compute potential
	 for (unsigned char index = 0;index < 8;index++)
     704:	89 81       	ldd	r24, Y+1	; 0x01
     706:	8f 5f       	subi	r24, 0xFF	; 255
     708:	89 83       	std	Y+1, r24	; 0x01
     70a:	89 81       	ldd	r24, Y+1	; 0x01
     70c:	88 30       	cpi	r24, 0x08	; 8
     70e:	08 f4       	brcc	.+2      	; 0x712 <fead_forward+0xce>
     710:	b8 cf       	rjmp	.-144    	; 0x682 <fead_forward+0x3e>
	 {
		 NN1->alpha += ((NN1->neurons[index])*(NN1->weights[index]));			//summ of the neuron values times the weights of each neuron
	 }
	 //compute sigmoid function
	 NN1->Yhat =(1/(1+exp(-1*NN1->alpha)));							// the final answer (sigmoid (1/(1+e^-z)))
     712:	8a 81       	ldd	r24, Y+2	; 0x02
     714:	9b 81       	ldd	r25, Y+3	; 0x03
     716:	fc 01       	movw	r30, r24
     718:	80 a5       	ldd	r24, Z+40	; 0x28
     71a:	91 a5       	ldd	r25, Z+41	; 0x29
     71c:	a2 a5       	ldd	r26, Z+42	; 0x2a
     71e:	b3 a5       	ldd	r27, Z+43	; 0x2b
     720:	b0 58       	subi	r27, 0x80	; 128
     722:	bc 01       	movw	r22, r24
     724:	cd 01       	movw	r24, r26
     726:	3e d2       	rcall	.+1148   	; 0xba4 <exp>
     728:	dc 01       	movw	r26, r24
     72a:	cb 01       	movw	r24, r22
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	40 e8       	ldi	r20, 0x80	; 128
     732:	5f e3       	ldi	r21, 0x3F	; 63
     734:	bc 01       	movw	r22, r24
     736:	cd 01       	movw	r24, r26
     738:	64 d1       	rcall	.+712    	; 0xa02 <__addsf3>
     73a:	dc 01       	movw	r26, r24
     73c:	cb 01       	movw	r24, r22
     73e:	9c 01       	movw	r18, r24
     740:	ad 01       	movw	r20, r26
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	80 e8       	ldi	r24, 0x80	; 128
     748:	9f e3       	ldi	r25, 0x3F	; 63
     74a:	bf d1       	rcall	.+894    	; 0xaca <__divsf3>
     74c:	dc 01       	movw	r26, r24
     74e:	cb 01       	movw	r24, r22
     750:	2a 81       	ldd	r18, Y+2	; 0x02
     752:	3b 81       	ldd	r19, Y+3	; 0x03
     754:	f9 01       	movw	r30, r18
     756:	84 a7       	std	Z+44, r24	; 0x2c
     758:	95 a7       	std	Z+45, r25	; 0x2d
     75a:	a6 a7       	std	Z+46, r26	; 0x2e
     75c:	b7 a7       	std	Z+47, r27	; 0x2f
}
     75e:	00 00       	nop
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	ff 90       	pop	r15
     76c:	ef 90       	pop	r14
     76e:	df 90       	pop	r13
     770:	cf 90       	pop	r12
     772:	bf 90       	pop	r11
     774:	af 90       	pop	r10
     776:	9f 90       	pop	r9
     778:	8f 90       	pop	r8
     77a:	08 95       	ret

0000077c <back_propagation>:

 void back_propagation(struct NeuralNet *NN1)
 {
     77c:	8f 92       	push	r8
     77e:	9f 92       	push	r9
     780:	af 92       	push	r10
     782:	bf 92       	push	r11
     784:	cf 92       	push	r12
     786:	df 92       	push	r13
     788:	ef 92       	push	r14
     78a:	ff 92       	push	r15
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
     798:	27 97       	sbiw	r28, 0x07	; 7
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	de bf       	out	0x3e, r29	; 62
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	cd bf       	out	0x3d, r28	; 61
     7a4:	9f 83       	std	Y+7, r25	; 0x07
     7a6:	8e 83       	std	Y+6, r24	; 0x06
	 double delta = (
	 -(((NN1->Y)-(NN1->Yhat))/255)*					// divide Y and Yhat with 255 to make it to the right value
     7a8:	8e 81       	ldd	r24, Y+6	; 0x06
     7aa:	9f 81       	ldd	r25, Y+7	; 0x07
     7ac:	fc 01       	movw	r30, r24
     7ae:	80 a9       	ldd	r24, Z+48	; 0x30
     7b0:	91 a9       	ldd	r25, Z+49	; 0x31
     7b2:	a2 a9       	ldd	r26, Z+50	; 0x32
     7b4:	b3 a9       	ldd	r27, Z+51	; 0x33
     7b6:	2e 81       	ldd	r18, Y+6	; 0x06
     7b8:	3f 81       	ldd	r19, Y+7	; 0x07
     7ba:	f9 01       	movw	r30, r18
     7bc:	24 a5       	ldd	r18, Z+44	; 0x2c
     7be:	35 a5       	ldd	r19, Z+45	; 0x2d
     7c0:	46 a5       	ldd	r20, Z+46	; 0x2e
     7c2:	57 a5       	ldd	r21, Z+47	; 0x2f
     7c4:	bc 01       	movw	r22, r24
     7c6:	cd 01       	movw	r24, r26
     7c8:	1b d1       	rcall	.+566    	; 0xa00 <__subsf3>
     7ca:	dc 01       	movw	r26, r24
     7cc:	cb 01       	movw	r24, r22
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	4f e7       	ldi	r20, 0x7F	; 127
     7d4:	53 e4       	ldi	r21, 0x43	; 67
     7d6:	bc 01       	movw	r22, r24
     7d8:	cd 01       	movw	r24, r26
     7da:	77 d1       	rcall	.+750    	; 0xaca <__divsf3>
     7dc:	dc 01       	movw	r26, r24
     7de:	cb 01       	movw	r24, r22
     7e0:	6c 01       	movw	r12, r24
     7e2:	7d 01       	movw	r14, r26
     7e4:	f7 fa       	bst	r15, 7
     7e6:	f0 94       	com	r15
     7e8:	f7 f8       	bld	r15, 7
     7ea:	f0 94       	com	r15
	 (exp((NN1->alpha))/pow( 1+exp( (NN1->alpha) ),2))	// multiply with the dreifediv of sigmoid function
     7ec:	8e 81       	ldd	r24, Y+6	; 0x06
     7ee:	9f 81       	ldd	r25, Y+7	; 0x07
     7f0:	fc 01       	movw	r30, r24
     7f2:	80 a5       	ldd	r24, Z+40	; 0x28
     7f4:	91 a5       	ldd	r25, Z+41	; 0x29
     7f6:	a2 a5       	ldd	r26, Z+42	; 0x2a
     7f8:	b3 a5       	ldd	r27, Z+43	; 0x2b
     7fa:	bc 01       	movw	r22, r24
     7fc:	cd 01       	movw	r24, r26
     7fe:	d2 d1       	rcall	.+932    	; 0xba4 <exp>
     800:	4b 01       	movw	r8, r22
     802:	5c 01       	movw	r10, r24
     804:	8e 81       	ldd	r24, Y+6	; 0x06
     806:	9f 81       	ldd	r25, Y+7	; 0x07
     808:	fc 01       	movw	r30, r24
     80a:	80 a5       	ldd	r24, Z+40	; 0x28
     80c:	91 a5       	ldd	r25, Z+41	; 0x29
     80e:	a2 a5       	ldd	r26, Z+42	; 0x2a
     810:	b3 a5       	ldd	r27, Z+43	; 0x2b
     812:	bc 01       	movw	r22, r24
     814:	cd 01       	movw	r24, r26
     816:	c6 d1       	rcall	.+908    	; 0xba4 <exp>
     818:	dc 01       	movw	r26, r24
     81a:	cb 01       	movw	r24, r22
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	40 e8       	ldi	r20, 0x80	; 128
     822:	5f e3       	ldi	r21, 0x3F	; 63
     824:	bc 01       	movw	r22, r24
     826:	cd 01       	movw	r24, r26
     828:	ec d0       	rcall	.+472    	; 0xa02 <__addsf3>
     82a:	dc 01       	movw	r26, r24
     82c:	cb 01       	movw	r24, r22
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	40 e0       	ldi	r20, 0x00	; 0
     834:	50 e4       	ldi	r21, 0x40	; 64
     836:	bc 01       	movw	r22, r24
     838:	cd 01       	movw	r24, r26
     83a:	92 d3       	rcall	.+1828   	; 0xf60 <pow>
     83c:	dc 01       	movw	r26, r24
     83e:	cb 01       	movw	r24, r22
     840:	9c 01       	movw	r18, r24
     842:	ad 01       	movw	r20, r26
     844:	c5 01       	movw	r24, r10
     846:	b4 01       	movw	r22, r8
     848:	40 d1       	rcall	.+640    	; 0xaca <__divsf3>
     84a:	dc 01       	movw	r26, r24
	 NN1->Yhat =(1/(1+exp(-1*NN1->alpha)));							// the final answer (sigmoid (1/(1+e^-z)))
}

 void back_propagation(struct NeuralNet *NN1)
 {
	 double delta = (
     84c:	cb 01       	movw	r24, r22
     84e:	9c 01       	movw	r18, r24
     850:	ad 01       	movw	r20, r26
     852:	c7 01       	movw	r24, r14
     854:	b6 01       	movw	r22, r12
     856:	21 d3       	rcall	.+1602   	; 0xe9a <__mulsf3>
     858:	dc 01       	movw	r26, r24
     85a:	cb 01       	movw	r24, r22
     85c:	8a 83       	std	Y+2, r24	; 0x02
     85e:	9b 83       	std	Y+3, r25	; 0x03
     860:	ac 83       	std	Y+4, r26	; 0x04
     862:	bd 83       	std	Y+5, r27	; 0x05
	 -(((NN1->Y)-(NN1->Yhat))/255)*					// divide Y and Yhat with 255 to make it to the right value
	 (exp((NN1->alpha))/pow( 1+exp( (NN1->alpha) ),2))	// multiply with the dreifediv of sigmoid function
	 );
	 for (unsigned char i=0;i<8;i++)
     864:	19 82       	std	Y+1, r1	; 0x01
     866:	59 c0       	rjmp	.+178    	; 0x91a <back_propagation+0x19e>
	 {
		 (NN1->weights[i]) -= (NN1->LR)*(delta*(NN1->neurons[i]));				//redifine weights
     868:	89 81       	ldd	r24, Y+1	; 0x01
     86a:	08 2f       	mov	r16, r24
     86c:	10 e0       	ldi	r17, 0x00	; 0
     86e:	89 81       	ldd	r24, Y+1	; 0x01
     870:	88 2f       	mov	r24, r24
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	2e 81       	ldd	r18, Y+6	; 0x06
     876:	3f 81       	ldd	r19, Y+7	; 0x07
     878:	02 96       	adiw	r24, 0x02	; 2
     87a:	88 0f       	add	r24, r24
     87c:	99 1f       	adc	r25, r25
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	82 0f       	add	r24, r18
     884:	93 1f       	adc	r25, r19
     886:	fc 01       	movw	r30, r24
     888:	c0 80       	ld	r12, Z
     88a:	d1 80       	ldd	r13, Z+1	; 0x01
     88c:	e2 80       	ldd	r14, Z+2	; 0x02
     88e:	f3 80       	ldd	r15, Z+3	; 0x03
     890:	8e 81       	ldd	r24, Y+6	; 0x06
     892:	9f 81       	ldd	r25, Y+7	; 0x07
     894:	fc 01       	movw	r30, r24
     896:	84 a8       	ldd	r8, Z+52	; 0x34
     898:	95 a8       	ldd	r9, Z+53	; 0x35
     89a:	a6 a8       	ldd	r10, Z+54	; 0x36
     89c:	b7 a8       	ldd	r11, Z+55	; 0x37
     89e:	89 81       	ldd	r24, Y+1	; 0x01
     8a0:	88 2f       	mov	r24, r24
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	2e 81       	ldd	r18, Y+6	; 0x06
     8a6:	3f 81       	ldd	r19, Y+7	; 0x07
     8a8:	82 0f       	add	r24, r18
     8aa:	93 1f       	adc	r25, r19
     8ac:	fc 01       	movw	r30, r24
     8ae:	80 81       	ld	r24, Z
     8b0:	88 2f       	mov	r24, r24
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	09 2e       	mov	r0, r25
     8b6:	00 0c       	add	r0, r0
     8b8:	aa 0b       	sbc	r26, r26
     8ba:	bb 0b       	sbc	r27, r27
     8bc:	bc 01       	movw	r22, r24
     8be:	cd 01       	movw	r24, r26
     8c0:	cb d1       	rcall	.+918    	; 0xc58 <__floatsisf>
     8c2:	dc 01       	movw	r26, r24
     8c4:	cb 01       	movw	r24, r22
     8c6:	2a 81       	ldd	r18, Y+2	; 0x02
     8c8:	3b 81       	ldd	r19, Y+3	; 0x03
     8ca:	4c 81       	ldd	r20, Y+4	; 0x04
     8cc:	5d 81       	ldd	r21, Y+5	; 0x05
     8ce:	bc 01       	movw	r22, r24
     8d0:	cd 01       	movw	r24, r26
     8d2:	e3 d2       	rcall	.+1478   	; 0xe9a <__mulsf3>
     8d4:	dc 01       	movw	r26, r24
     8d6:	cb 01       	movw	r24, r22
     8d8:	9c 01       	movw	r18, r24
     8da:	ad 01       	movw	r20, r26
     8dc:	c5 01       	movw	r24, r10
     8de:	b4 01       	movw	r22, r8
     8e0:	dc d2       	rcall	.+1464   	; 0xe9a <__mulsf3>
     8e2:	dc 01       	movw	r26, r24
     8e4:	cb 01       	movw	r24, r22
     8e6:	9c 01       	movw	r18, r24
     8e8:	ad 01       	movw	r20, r26
     8ea:	c7 01       	movw	r24, r14
     8ec:	b6 01       	movw	r22, r12
     8ee:	88 d0       	rcall	.+272    	; 0xa00 <__subsf3>
     8f0:	dc 01       	movw	r26, r24
     8f2:	cb 01       	movw	r24, r22
     8f4:	4e 81       	ldd	r20, Y+6	; 0x06
     8f6:	5f 81       	ldd	r21, Y+7	; 0x07
     8f8:	98 01       	movw	r18, r16
     8fa:	2e 5f       	subi	r18, 0xFE	; 254
     8fc:	3f 4f       	sbci	r19, 0xFF	; 255
     8fe:	22 0f       	add	r18, r18
     900:	33 1f       	adc	r19, r19
     902:	22 0f       	add	r18, r18
     904:	33 1f       	adc	r19, r19
     906:	24 0f       	add	r18, r20
     908:	35 1f       	adc	r19, r21
     90a:	f9 01       	movw	r30, r18
     90c:	80 83       	st	Z, r24
     90e:	91 83       	std	Z+1, r25	; 0x01
     910:	a2 83       	std	Z+2, r26	; 0x02
     912:	b3 83       	std	Z+3, r27	; 0x03
 {
	 double delta = (
	 -(((NN1->Y)-(NN1->Yhat))/255)*					// divide Y and Yhat with 255 to make it to the right value
	 (exp((NN1->alpha))/pow( 1+exp( (NN1->alpha) ),2))	// multiply with the dreifediv of sigmoid function
	 );
	 for (unsigned char i=0;i<8;i++)
     914:	89 81       	ldd	r24, Y+1	; 0x01
     916:	8f 5f       	subi	r24, 0xFF	; 255
     918:	89 83       	std	Y+1, r24	; 0x01
     91a:	89 81       	ldd	r24, Y+1	; 0x01
     91c:	88 30       	cpi	r24, 0x08	; 8
     91e:	08 f4       	brcc	.+2      	; 0x922 <back_propagation+0x1a6>
     920:	a3 cf       	rjmp	.-186    	; 0x868 <back_propagation+0xec>
	 {
		 (NN1->weights[i]) -= (NN1->LR)*(delta*(NN1->neurons[i]));				//redifine weights
	 }
 }
     922:	00 00       	nop
     924:	27 96       	adiw	r28, 0x07	; 7
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	f8 94       	cli
     92a:	de bf       	out	0x3e, r29	; 62
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	cd bf       	out	0x3d, r28	; 61
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	ff 90       	pop	r15
     93a:	ef 90       	pop	r14
     93c:	df 90       	pop	r13
     93e:	cf 90       	pop	r12
     940:	bf 90       	pop	r11
     942:	af 90       	pop	r10
     944:	9f 90       	pop	r9
     946:	8f 90       	pop	r8
     948:	08 95       	ret

0000094a <train>:

void train(struct NeuralNet *NN1,unsigned int epochs,unsigned int iterations)
{
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
     952:	2a 97       	sbiw	r28, 0x0a	; 10
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	de bf       	out	0x3e, r29	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	cd bf       	out	0x3d, r28	; 61
     95e:	9e 83       	std	Y+6, r25	; 0x06
     960:	8d 83       	std	Y+5, r24	; 0x05
     962:	78 87       	std	Y+8, r23	; 0x08
     964:	6f 83       	std	Y+7, r22	; 0x07
     966:	5a 87       	std	Y+10, r21	; 0x0a
     968:	49 87       	std	Y+9, r20	; 0x09
	 for (unsigned int epoch = 1; epoch <= epochs; epoch++)
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	9a 83       	std	Y+2, r25	; 0x02
     970:	89 83       	std	Y+1, r24	; 0x01
     972:	31 c0       	rjmp	.+98     	; 0x9d6 <train+0x8c>
	 {
		 for (unsigned int iteration = 0; iteration < iterations; iteration++)
     974:	1c 82       	std	Y+4, r1	; 0x04
     976:	1b 82       	std	Y+3, r1	; 0x03
     978:	22 c0       	rjmp	.+68     	; 0x9be <train+0x74>
		 {
			 fead_forward(NN1);
     97a:	8d 81       	ldd	r24, Y+5	; 0x05
     97c:	9e 81       	ldd	r25, Y+6	; 0x06
     97e:	62 de       	rcall	.-828    	; 0x644 <fead_forward>
			 (NN1->Yhat)*=255;
     980:	8d 81       	ldd	r24, Y+5	; 0x05
     982:	9e 81       	ldd	r25, Y+6	; 0x06
     984:	fc 01       	movw	r30, r24
     986:	84 a5       	ldd	r24, Z+44	; 0x2c
     988:	95 a5       	ldd	r25, Z+45	; 0x2d
     98a:	a6 a5       	ldd	r26, Z+46	; 0x2e
     98c:	b7 a5       	ldd	r27, Z+47	; 0x2f
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	4f e7       	ldi	r20, 0x7F	; 127
     994:	53 e4       	ldi	r21, 0x43	; 67
     996:	bc 01       	movw	r22, r24
     998:	cd 01       	movw	r24, r26
     99a:	7f d2       	rcall	.+1278   	; 0xe9a <__mulsf3>
     99c:	dc 01       	movw	r26, r24
     99e:	cb 01       	movw	r24, r22
     9a0:	2d 81       	ldd	r18, Y+5	; 0x05
     9a2:	3e 81       	ldd	r19, Y+6	; 0x06
     9a4:	f9 01       	movw	r30, r18
     9a6:	84 a7       	std	Z+44, r24	; 0x2c
     9a8:	95 a7       	std	Z+45, r25	; 0x2d
     9aa:	a6 a7       	std	Z+46, r26	; 0x2e
			 
			 //bakpropagation
			 back_propagation(NN1);			
     9ac:	b7 a7       	std	Z+47, r27	; 0x2f
     9ae:	8d 81       	ldd	r24, Y+5	; 0x05
     9b0:	9e 81       	ldd	r25, Y+6	; 0x06

void train(struct NeuralNet *NN1,unsigned int epochs,unsigned int iterations)
{
	 for (unsigned int epoch = 1; epoch <= epochs; epoch++)
	 {
		 for (unsigned int iteration = 0; iteration < iterations; iteration++)
     9b2:	e4 de       	rcall	.-568    	; 0x77c <back_propagation>
     9b4:	8b 81       	ldd	r24, Y+3	; 0x03
     9b6:	9c 81       	ldd	r25, Y+4	; 0x04
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	9c 83       	std	Y+4, r25	; 0x04
     9bc:	8b 83       	std	Y+3, r24	; 0x03
     9be:	2b 81       	ldd	r18, Y+3	; 0x03
     9c0:	3c 81       	ldd	r19, Y+4	; 0x04
     9c2:	89 85       	ldd	r24, Y+9	; 0x09
     9c4:	9a 85       	ldd	r25, Y+10	; 0x0a
     9c6:	28 17       	cp	r18, r24
     9c8:	39 07       	cpc	r19, r25
	 }
 }

void train(struct NeuralNet *NN1,unsigned int epochs,unsigned int iterations)
{
	 for (unsigned int epoch = 1; epoch <= epochs; epoch++)
     9ca:	b8 f2       	brcs	.-82     	; 0x97a <train+0x30>
     9cc:	89 81       	ldd	r24, Y+1	; 0x01
     9ce:	9a 81       	ldd	r25, Y+2	; 0x02
     9d0:	01 96       	adiw	r24, 0x01	; 1
     9d2:	9a 83       	std	Y+2, r25	; 0x02
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	29 81       	ldd	r18, Y+1	; 0x01
     9d8:	3a 81       	ldd	r19, Y+2	; 0x02
     9da:	8f 81       	ldd	r24, Y+7	; 0x07
     9dc:	98 85       	ldd	r25, Y+8	; 0x08
     9de:	82 17       	cp	r24, r18
     9e0:	93 07       	cpc	r25, r19
			 
			 //bakpropagation
			 back_propagation(NN1);			
		 }
	 }
	 learnd_in_pc = 0;
     9e2:	40 f6       	brcc	.-112    	; 0x974 <train+0x2a>
     9e4:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <learnd_in_pc+0x1>
     9e8:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <learnd_in_pc>
     9ec:	00 00       	nop
     9ee:	2a 96       	adiw	r28, 0x0a	; 10
     9f0:	0f b6       	in	r0, 0x3f	; 63
     9f2:	f8 94       	cli
     9f4:	de bf       	out	0x3e, r29	; 62
     9f6:	0f be       	out	0x3f, r0	; 63
     9f8:	cd bf       	out	0x3d, r28	; 61
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	08 95       	ret

00000a00 <__subsf3>:
     a00:	50 58       	subi	r21, 0x80	; 128

00000a02 <__addsf3>:
     a02:	bb 27       	eor	r27, r27
     a04:	aa 27       	eor	r26, r26
     a06:	0e d0       	rcall	.+28     	; 0xa24 <__addsf3x>
     a08:	9e c1       	rjmp	.+828    	; 0xd46 <__fp_round>
     a0a:	8f d1       	rcall	.+798    	; 0xd2a <__fp_pscA>
     a0c:	30 f0       	brcs	.+12     	; 0xa1a <__addsf3+0x18>
     a0e:	94 d1       	rcall	.+808    	; 0xd38 <__fp_pscB>
     a10:	20 f0       	brcs	.+8      	; 0xa1a <__addsf3+0x18>
     a12:	31 f4       	brne	.+12     	; 0xa20 <__addsf3+0x1e>
     a14:	9f 3f       	cpi	r25, 0xFF	; 255
     a16:	11 f4       	brne	.+4      	; 0xa1c <__addsf3+0x1a>
     a18:	1e f4       	brtc	.+6      	; 0xa20 <__addsf3+0x1e>
     a1a:	5f c1       	rjmp	.+702    	; 0xcda <__fp_nan>
     a1c:	0e f4       	brtc	.+2      	; 0xa20 <__addsf3+0x1e>
     a1e:	e0 95       	com	r30
     a20:	e7 fb       	bst	r30, 7
     a22:	55 c1       	rjmp	.+682    	; 0xcce <__fp_inf>

00000a24 <__addsf3x>:
     a24:	e9 2f       	mov	r30, r25
     a26:	a0 d1       	rcall	.+832    	; 0xd68 <__fp_split3>
     a28:	80 f3       	brcs	.-32     	; 0xa0a <__addsf3+0x8>
     a2a:	ba 17       	cp	r27, r26
     a2c:	62 07       	cpc	r22, r18
     a2e:	73 07       	cpc	r23, r19
     a30:	84 07       	cpc	r24, r20
     a32:	95 07       	cpc	r25, r21
     a34:	18 f0       	brcs	.+6      	; 0xa3c <__addsf3x+0x18>
     a36:	71 f4       	brne	.+28     	; 0xa54 <__addsf3x+0x30>
     a38:	9e f5       	brtc	.+102    	; 0xaa0 <__addsf3x+0x7c>
     a3a:	b8 c1       	rjmp	.+880    	; 0xdac <__fp_zero>
     a3c:	0e f4       	brtc	.+2      	; 0xa40 <__addsf3x+0x1c>
     a3e:	e0 95       	com	r30
     a40:	0b 2e       	mov	r0, r27
     a42:	ba 2f       	mov	r27, r26
     a44:	a0 2d       	mov	r26, r0
     a46:	0b 01       	movw	r0, r22
     a48:	b9 01       	movw	r22, r18
     a4a:	90 01       	movw	r18, r0
     a4c:	0c 01       	movw	r0, r24
     a4e:	ca 01       	movw	r24, r20
     a50:	a0 01       	movw	r20, r0
     a52:	11 24       	eor	r1, r1
     a54:	ff 27       	eor	r31, r31
     a56:	59 1b       	sub	r21, r25
     a58:	99 f0       	breq	.+38     	; 0xa80 <__addsf3x+0x5c>
     a5a:	59 3f       	cpi	r21, 0xF9	; 249
     a5c:	50 f4       	brcc	.+20     	; 0xa72 <__addsf3x+0x4e>
     a5e:	50 3e       	cpi	r21, 0xE0	; 224
     a60:	68 f1       	brcs	.+90     	; 0xabc <__addsf3x+0x98>
     a62:	1a 16       	cp	r1, r26
     a64:	f0 40       	sbci	r31, 0x00	; 0
     a66:	a2 2f       	mov	r26, r18
     a68:	23 2f       	mov	r18, r19
     a6a:	34 2f       	mov	r19, r20
     a6c:	44 27       	eor	r20, r20
     a6e:	58 5f       	subi	r21, 0xF8	; 248
     a70:	f3 cf       	rjmp	.-26     	; 0xa58 <__addsf3x+0x34>
     a72:	46 95       	lsr	r20
     a74:	37 95       	ror	r19
     a76:	27 95       	ror	r18
     a78:	a7 95       	ror	r26
     a7a:	f0 40       	sbci	r31, 0x00	; 0
     a7c:	53 95       	inc	r21
     a7e:	c9 f7       	brne	.-14     	; 0xa72 <__addsf3x+0x4e>
     a80:	7e f4       	brtc	.+30     	; 0xaa0 <__addsf3x+0x7c>
     a82:	1f 16       	cp	r1, r31
     a84:	ba 0b       	sbc	r27, r26
     a86:	62 0b       	sbc	r22, r18
     a88:	73 0b       	sbc	r23, r19
     a8a:	84 0b       	sbc	r24, r20
     a8c:	ba f0       	brmi	.+46     	; 0xabc <__addsf3x+0x98>
     a8e:	91 50       	subi	r25, 0x01	; 1
     a90:	a1 f0       	breq	.+40     	; 0xaba <__addsf3x+0x96>
     a92:	ff 0f       	add	r31, r31
     a94:	bb 1f       	adc	r27, r27
     a96:	66 1f       	adc	r22, r22
     a98:	77 1f       	adc	r23, r23
     a9a:	88 1f       	adc	r24, r24
     a9c:	c2 f7       	brpl	.-16     	; 0xa8e <__addsf3x+0x6a>
     a9e:	0e c0       	rjmp	.+28     	; 0xabc <__addsf3x+0x98>
     aa0:	ba 0f       	add	r27, r26
     aa2:	62 1f       	adc	r22, r18
     aa4:	73 1f       	adc	r23, r19
     aa6:	84 1f       	adc	r24, r20
     aa8:	48 f4       	brcc	.+18     	; 0xabc <__addsf3x+0x98>
     aaa:	87 95       	ror	r24
     aac:	77 95       	ror	r23
     aae:	67 95       	ror	r22
     ab0:	b7 95       	ror	r27
     ab2:	f7 95       	ror	r31
     ab4:	9e 3f       	cpi	r25, 0xFE	; 254
     ab6:	08 f0       	brcs	.+2      	; 0xaba <__addsf3x+0x96>
     ab8:	b3 cf       	rjmp	.-154    	; 0xa20 <__addsf3+0x1e>
     aba:	93 95       	inc	r25
     abc:	88 0f       	add	r24, r24
     abe:	08 f0       	brcs	.+2      	; 0xac2 <__addsf3x+0x9e>
     ac0:	99 27       	eor	r25, r25
     ac2:	ee 0f       	add	r30, r30
     ac4:	97 95       	ror	r25
     ac6:	87 95       	ror	r24
     ac8:	08 95       	ret

00000aca <__divsf3>:
     aca:	0c d0       	rcall	.+24     	; 0xae4 <__divsf3x>
     acc:	3c c1       	rjmp	.+632    	; 0xd46 <__fp_round>
     ace:	34 d1       	rcall	.+616    	; 0xd38 <__fp_pscB>
     ad0:	40 f0       	brcs	.+16     	; 0xae2 <__divsf3+0x18>
     ad2:	2b d1       	rcall	.+598    	; 0xd2a <__fp_pscA>
     ad4:	30 f0       	brcs	.+12     	; 0xae2 <__divsf3+0x18>
     ad6:	21 f4       	brne	.+8      	; 0xae0 <__divsf3+0x16>
     ad8:	5f 3f       	cpi	r21, 0xFF	; 255
     ada:	19 f0       	breq	.+6      	; 0xae2 <__divsf3+0x18>
     adc:	f8 c0       	rjmp	.+496    	; 0xcce <__fp_inf>
     ade:	51 11       	cpse	r21, r1
     ae0:	66 c1       	rjmp	.+716    	; 0xdae <__fp_szero>
     ae2:	fb c0       	rjmp	.+502    	; 0xcda <__fp_nan>

00000ae4 <__divsf3x>:
     ae4:	41 d1       	rcall	.+642    	; 0xd68 <__fp_split3>
     ae6:	98 f3       	brcs	.-26     	; 0xace <__divsf3+0x4>

00000ae8 <__divsf3_pse>:
     ae8:	99 23       	and	r25, r25
     aea:	c9 f3       	breq	.-14     	; 0xade <__divsf3+0x14>
     aec:	55 23       	and	r21, r21
     aee:	b1 f3       	breq	.-20     	; 0xadc <__divsf3+0x12>
     af0:	95 1b       	sub	r25, r21
     af2:	55 0b       	sbc	r21, r21
     af4:	bb 27       	eor	r27, r27
     af6:	aa 27       	eor	r26, r26
     af8:	62 17       	cp	r22, r18
     afa:	73 07       	cpc	r23, r19
     afc:	84 07       	cpc	r24, r20
     afe:	38 f0       	brcs	.+14     	; 0xb0e <__divsf3_pse+0x26>
     b00:	9f 5f       	subi	r25, 0xFF	; 255
     b02:	5f 4f       	sbci	r21, 0xFF	; 255
     b04:	22 0f       	add	r18, r18
     b06:	33 1f       	adc	r19, r19
     b08:	44 1f       	adc	r20, r20
     b0a:	aa 1f       	adc	r26, r26
     b0c:	a9 f3       	breq	.-22     	; 0xaf8 <__divsf3_pse+0x10>
     b0e:	33 d0       	rcall	.+102    	; 0xb76 <__divsf3_pse+0x8e>
     b10:	0e 2e       	mov	r0, r30
     b12:	3a f0       	brmi	.+14     	; 0xb22 <__divsf3_pse+0x3a>
     b14:	e0 e8       	ldi	r30, 0x80	; 128
     b16:	30 d0       	rcall	.+96     	; 0xb78 <__divsf3_pse+0x90>
     b18:	91 50       	subi	r25, 0x01	; 1
     b1a:	50 40       	sbci	r21, 0x00	; 0
     b1c:	e6 95       	lsr	r30
     b1e:	00 1c       	adc	r0, r0
     b20:	ca f7       	brpl	.-14     	; 0xb14 <__divsf3_pse+0x2c>
     b22:	29 d0       	rcall	.+82     	; 0xb76 <__divsf3_pse+0x8e>
     b24:	fe 2f       	mov	r31, r30
     b26:	27 d0       	rcall	.+78     	; 0xb76 <__divsf3_pse+0x8e>
     b28:	66 0f       	add	r22, r22
     b2a:	77 1f       	adc	r23, r23
     b2c:	88 1f       	adc	r24, r24
     b2e:	bb 1f       	adc	r27, r27
     b30:	26 17       	cp	r18, r22
     b32:	37 07       	cpc	r19, r23
     b34:	48 07       	cpc	r20, r24
     b36:	ab 07       	cpc	r26, r27
     b38:	b0 e8       	ldi	r27, 0x80	; 128
     b3a:	09 f0       	breq	.+2      	; 0xb3e <__divsf3_pse+0x56>
     b3c:	bb 0b       	sbc	r27, r27
     b3e:	80 2d       	mov	r24, r0
     b40:	bf 01       	movw	r22, r30
     b42:	ff 27       	eor	r31, r31
     b44:	93 58       	subi	r25, 0x83	; 131
     b46:	5f 4f       	sbci	r21, 0xFF	; 255
     b48:	2a f0       	brmi	.+10     	; 0xb54 <__divsf3_pse+0x6c>
     b4a:	9e 3f       	cpi	r25, 0xFE	; 254
     b4c:	51 05       	cpc	r21, r1
     b4e:	68 f0       	brcs	.+26     	; 0xb6a <__divsf3_pse+0x82>
     b50:	be c0       	rjmp	.+380    	; 0xcce <__fp_inf>
     b52:	2d c1       	rjmp	.+602    	; 0xdae <__fp_szero>
     b54:	5f 3f       	cpi	r21, 0xFF	; 255
     b56:	ec f3       	brlt	.-6      	; 0xb52 <__divsf3_pse+0x6a>
     b58:	98 3e       	cpi	r25, 0xE8	; 232
     b5a:	dc f3       	brlt	.-10     	; 0xb52 <__divsf3_pse+0x6a>
     b5c:	86 95       	lsr	r24
     b5e:	77 95       	ror	r23
     b60:	67 95       	ror	r22
     b62:	b7 95       	ror	r27
     b64:	f7 95       	ror	r31
     b66:	9f 5f       	subi	r25, 0xFF	; 255
     b68:	c9 f7       	brne	.-14     	; 0xb5c <__divsf3_pse+0x74>
     b6a:	88 0f       	add	r24, r24
     b6c:	91 1d       	adc	r25, r1
     b6e:	96 95       	lsr	r25
     b70:	87 95       	ror	r24
     b72:	97 f9       	bld	r25, 7
     b74:	08 95       	ret
     b76:	e1 e0       	ldi	r30, 0x01	; 1
     b78:	66 0f       	add	r22, r22
     b7a:	77 1f       	adc	r23, r23
     b7c:	88 1f       	adc	r24, r24
     b7e:	bb 1f       	adc	r27, r27
     b80:	62 17       	cp	r22, r18
     b82:	73 07       	cpc	r23, r19
     b84:	84 07       	cpc	r24, r20
     b86:	ba 07       	cpc	r27, r26
     b88:	20 f0       	brcs	.+8      	; 0xb92 <__divsf3_pse+0xaa>
     b8a:	62 1b       	sub	r22, r18
     b8c:	73 0b       	sbc	r23, r19
     b8e:	84 0b       	sbc	r24, r20
     b90:	ba 0b       	sbc	r27, r26
     b92:	ee 1f       	adc	r30, r30
     b94:	88 f7       	brcc	.-30     	; 0xb78 <__divsf3_pse+0x90>
     b96:	e0 95       	com	r30
     b98:	08 95       	ret
     b9a:	19 f4       	brne	.+6      	; 0xba2 <__divsf3_pse+0xba>
     b9c:	0e f0       	brts	.+2      	; 0xba0 <__divsf3_pse+0xb8>
     b9e:	97 c0       	rjmp	.+302    	; 0xcce <__fp_inf>
     ba0:	05 c1       	rjmp	.+522    	; 0xdac <__fp_zero>
     ba2:	9b c0       	rjmp	.+310    	; 0xcda <__fp_nan>

00000ba4 <exp>:
     ba4:	e9 d0       	rcall	.+466    	; 0xd78 <__fp_splitA>
     ba6:	c8 f3       	brcs	.-14     	; 0xb9a <__divsf3_pse+0xb2>
     ba8:	96 38       	cpi	r25, 0x86	; 134
     baa:	c0 f7       	brcc	.-16     	; 0xb9c <__divsf3_pse+0xb4>
     bac:	07 f8       	bld	r0, 7
     bae:	0f 92       	push	r0
     bb0:	e8 94       	clt
     bb2:	2b e3       	ldi	r18, 0x3B	; 59
     bb4:	3a ea       	ldi	r19, 0xAA	; 170
     bb6:	48 eb       	ldi	r20, 0xB8	; 184
     bb8:	5f e7       	ldi	r21, 0x7F	; 127
     bba:	7d d1       	rcall	.+762    	; 0xeb6 <__mulsf3_pse>
     bbc:	0f 92       	push	r0
     bbe:	0f 92       	push	r0
     bc0:	0f 92       	push	r0
     bc2:	4d b7       	in	r20, 0x3d	; 61
     bc4:	5e b7       	in	r21, 0x3e	; 62
     bc6:	0f 92       	push	r0
     bc8:	35 d1       	rcall	.+618    	; 0xe34 <modf>
     bca:	e4 ee       	ldi	r30, 0xE4	; 228
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	88 d0       	rcall	.+272    	; 0xce0 <__fp_powser>
     bd0:	4f 91       	pop	r20
     bd2:	5f 91       	pop	r21
     bd4:	ef 91       	pop	r30
     bd6:	ff 91       	pop	r31
     bd8:	e5 95       	asr	r30
     bda:	ee 1f       	adc	r30, r30
     bdc:	ff 1f       	adc	r31, r31
     bde:	49 f0       	breq	.+18     	; 0xbf2 <exp+0x4e>
     be0:	fe 57       	subi	r31, 0x7E	; 126
     be2:	e0 68       	ori	r30, 0x80	; 128
     be4:	44 27       	eor	r20, r20
     be6:	ee 0f       	add	r30, r30
     be8:	44 1f       	adc	r20, r20
     bea:	fa 95       	dec	r31
     bec:	e1 f7       	brne	.-8      	; 0xbe6 <exp+0x42>
     bee:	41 95       	neg	r20
     bf0:	55 0b       	sbc	r21, r21
     bf2:	ec d0       	rcall	.+472    	; 0xdcc <ldexp>
     bf4:	0f 90       	pop	r0
     bf6:	07 fe       	sbrs	r0, 7
     bf8:	e0 c0       	rjmp	.+448    	; 0xdba <inverse>
     bfa:	08 95       	ret

00000bfc <__fixunssfsi>:
     bfc:	bd d0       	rcall	.+378    	; 0xd78 <__fp_splitA>
     bfe:	88 f0       	brcs	.+34     	; 0xc22 <__fixunssfsi+0x26>
     c00:	9f 57       	subi	r25, 0x7F	; 127
     c02:	90 f0       	brcs	.+36     	; 0xc28 <__fixunssfsi+0x2c>
     c04:	b9 2f       	mov	r27, r25
     c06:	99 27       	eor	r25, r25
     c08:	b7 51       	subi	r27, 0x17	; 23
     c0a:	a0 f0       	brcs	.+40     	; 0xc34 <__fixunssfsi+0x38>
     c0c:	d1 f0       	breq	.+52     	; 0xc42 <__fixunssfsi+0x46>
     c0e:	66 0f       	add	r22, r22
     c10:	77 1f       	adc	r23, r23
     c12:	88 1f       	adc	r24, r24
     c14:	99 1f       	adc	r25, r25
     c16:	1a f0       	brmi	.+6      	; 0xc1e <__fixunssfsi+0x22>
     c18:	ba 95       	dec	r27
     c1a:	c9 f7       	brne	.-14     	; 0xc0e <__fixunssfsi+0x12>
     c1c:	12 c0       	rjmp	.+36     	; 0xc42 <__fixunssfsi+0x46>
     c1e:	b1 30       	cpi	r27, 0x01	; 1
     c20:	81 f0       	breq	.+32     	; 0xc42 <__fixunssfsi+0x46>
     c22:	c4 d0       	rcall	.+392    	; 0xdac <__fp_zero>
     c24:	b1 e0       	ldi	r27, 0x01	; 1
     c26:	08 95       	ret
     c28:	c1 c0       	rjmp	.+386    	; 0xdac <__fp_zero>
     c2a:	67 2f       	mov	r22, r23
     c2c:	78 2f       	mov	r23, r24
     c2e:	88 27       	eor	r24, r24
     c30:	b8 5f       	subi	r27, 0xF8	; 248
     c32:	39 f0       	breq	.+14     	; 0xc42 <__fixunssfsi+0x46>
     c34:	b9 3f       	cpi	r27, 0xF9	; 249
     c36:	cc f3       	brlt	.-14     	; 0xc2a <__fixunssfsi+0x2e>
     c38:	86 95       	lsr	r24
     c3a:	77 95       	ror	r23
     c3c:	67 95       	ror	r22
     c3e:	b3 95       	inc	r27
     c40:	d9 f7       	brne	.-10     	; 0xc38 <__fixunssfsi+0x3c>
     c42:	3e f4       	brtc	.+14     	; 0xc52 <__fixunssfsi+0x56>
     c44:	90 95       	com	r25
     c46:	80 95       	com	r24
     c48:	70 95       	com	r23
     c4a:	61 95       	neg	r22
     c4c:	7f 4f       	sbci	r23, 0xFF	; 255
     c4e:	8f 4f       	sbci	r24, 0xFF	; 255
     c50:	9f 4f       	sbci	r25, 0xFF	; 255
     c52:	08 95       	ret

00000c54 <__floatunsisf>:
     c54:	e8 94       	clt
     c56:	09 c0       	rjmp	.+18     	; 0xc6a <__floatsisf+0x12>

00000c58 <__floatsisf>:
     c58:	97 fb       	bst	r25, 7
     c5a:	3e f4       	brtc	.+14     	; 0xc6a <__floatsisf+0x12>
     c5c:	90 95       	com	r25
     c5e:	80 95       	com	r24
     c60:	70 95       	com	r23
     c62:	61 95       	neg	r22
     c64:	7f 4f       	sbci	r23, 0xFF	; 255
     c66:	8f 4f       	sbci	r24, 0xFF	; 255
     c68:	9f 4f       	sbci	r25, 0xFF	; 255
     c6a:	99 23       	and	r25, r25
     c6c:	a9 f0       	breq	.+42     	; 0xc98 <__floatsisf+0x40>
     c6e:	f9 2f       	mov	r31, r25
     c70:	96 e9       	ldi	r25, 0x96	; 150
     c72:	bb 27       	eor	r27, r27
     c74:	93 95       	inc	r25
     c76:	f6 95       	lsr	r31
     c78:	87 95       	ror	r24
     c7a:	77 95       	ror	r23
     c7c:	67 95       	ror	r22
     c7e:	b7 95       	ror	r27
     c80:	f1 11       	cpse	r31, r1
     c82:	f8 cf       	rjmp	.-16     	; 0xc74 <__floatsisf+0x1c>
     c84:	fa f4       	brpl	.+62     	; 0xcc4 <__floatsisf+0x6c>
     c86:	bb 0f       	add	r27, r27
     c88:	11 f4       	brne	.+4      	; 0xc8e <__floatsisf+0x36>
     c8a:	60 ff       	sbrs	r22, 0
     c8c:	1b c0       	rjmp	.+54     	; 0xcc4 <__floatsisf+0x6c>
     c8e:	6f 5f       	subi	r22, 0xFF	; 255
     c90:	7f 4f       	sbci	r23, 0xFF	; 255
     c92:	8f 4f       	sbci	r24, 0xFF	; 255
     c94:	9f 4f       	sbci	r25, 0xFF	; 255
     c96:	16 c0       	rjmp	.+44     	; 0xcc4 <__floatsisf+0x6c>
     c98:	88 23       	and	r24, r24
     c9a:	11 f0       	breq	.+4      	; 0xca0 <__floatsisf+0x48>
     c9c:	96 e9       	ldi	r25, 0x96	; 150
     c9e:	11 c0       	rjmp	.+34     	; 0xcc2 <__floatsisf+0x6a>
     ca0:	77 23       	and	r23, r23
     ca2:	21 f0       	breq	.+8      	; 0xcac <__floatsisf+0x54>
     ca4:	9e e8       	ldi	r25, 0x8E	; 142
     ca6:	87 2f       	mov	r24, r23
     ca8:	76 2f       	mov	r23, r22
     caa:	05 c0       	rjmp	.+10     	; 0xcb6 <__floatsisf+0x5e>
     cac:	66 23       	and	r22, r22
     cae:	71 f0       	breq	.+28     	; 0xccc <__floatsisf+0x74>
     cb0:	96 e8       	ldi	r25, 0x86	; 134
     cb2:	86 2f       	mov	r24, r22
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	2a f0       	brmi	.+10     	; 0xcc4 <__floatsisf+0x6c>
     cba:	9a 95       	dec	r25
     cbc:	66 0f       	add	r22, r22
     cbe:	77 1f       	adc	r23, r23
     cc0:	88 1f       	adc	r24, r24
     cc2:	da f7       	brpl	.-10     	; 0xcba <__floatsisf+0x62>
     cc4:	88 0f       	add	r24, r24
     cc6:	96 95       	lsr	r25
     cc8:	87 95       	ror	r24
     cca:	97 f9       	bld	r25, 7
     ccc:	08 95       	ret

00000cce <__fp_inf>:
     cce:	97 f9       	bld	r25, 7
     cd0:	9f 67       	ori	r25, 0x7F	; 127
     cd2:	80 e8       	ldi	r24, 0x80	; 128
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	08 95       	ret

00000cda <__fp_nan>:
     cda:	9f ef       	ldi	r25, 0xFF	; 255
     cdc:	80 ec       	ldi	r24, 0xC0	; 192
     cde:	08 95       	ret

00000ce0 <__fp_powser>:
     ce0:	df 93       	push	r29
     ce2:	cf 93       	push	r28
     ce4:	1f 93       	push	r17
     ce6:	0f 93       	push	r16
     ce8:	ff 92       	push	r15
     cea:	ef 92       	push	r14
     cec:	df 92       	push	r13
     cee:	7b 01       	movw	r14, r22
     cf0:	8c 01       	movw	r16, r24
     cf2:	68 94       	set
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__fp_powser+0x20>
     cf6:	da 2e       	mov	r13, r26
     cf8:	ef 01       	movw	r28, r30
     cfa:	db d0       	rcall	.+438    	; 0xeb2 <__mulsf3x>
     cfc:	fe 01       	movw	r30, r28
     cfe:	e8 94       	clt
     d00:	a5 91       	lpm	r26, Z+
     d02:	25 91       	lpm	r18, Z+
     d04:	35 91       	lpm	r19, Z+
     d06:	45 91       	lpm	r20, Z+
     d08:	55 91       	lpm	r21, Z+
     d0a:	ae f3       	brts	.-22     	; 0xcf6 <__fp_powser+0x16>
     d0c:	ef 01       	movw	r28, r30
     d0e:	8a de       	rcall	.-748    	; 0xa24 <__addsf3x>
     d10:	fe 01       	movw	r30, r28
     d12:	97 01       	movw	r18, r14
     d14:	a8 01       	movw	r20, r16
     d16:	da 94       	dec	r13
     d18:	79 f7       	brne	.-34     	; 0xcf8 <__fp_powser+0x18>
     d1a:	df 90       	pop	r13
     d1c:	ef 90       	pop	r14
     d1e:	ff 90       	pop	r15
     d20:	0f 91       	pop	r16
     d22:	1f 91       	pop	r17
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	08 95       	ret

00000d2a <__fp_pscA>:
     d2a:	00 24       	eor	r0, r0
     d2c:	0a 94       	dec	r0
     d2e:	16 16       	cp	r1, r22
     d30:	17 06       	cpc	r1, r23
     d32:	18 06       	cpc	r1, r24
     d34:	09 06       	cpc	r0, r25
     d36:	08 95       	ret

00000d38 <__fp_pscB>:
     d38:	00 24       	eor	r0, r0
     d3a:	0a 94       	dec	r0
     d3c:	12 16       	cp	r1, r18
     d3e:	13 06       	cpc	r1, r19
     d40:	14 06       	cpc	r1, r20
     d42:	05 06       	cpc	r0, r21
     d44:	08 95       	ret

00000d46 <__fp_round>:
     d46:	09 2e       	mov	r0, r25
     d48:	03 94       	inc	r0
     d4a:	00 0c       	add	r0, r0
     d4c:	11 f4       	brne	.+4      	; 0xd52 <__fp_round+0xc>
     d4e:	88 23       	and	r24, r24
     d50:	52 f0       	brmi	.+20     	; 0xd66 <__fp_round+0x20>
     d52:	bb 0f       	add	r27, r27
     d54:	40 f4       	brcc	.+16     	; 0xd66 <__fp_round+0x20>
     d56:	bf 2b       	or	r27, r31
     d58:	11 f4       	brne	.+4      	; 0xd5e <__fp_round+0x18>
     d5a:	60 ff       	sbrs	r22, 0
     d5c:	04 c0       	rjmp	.+8      	; 0xd66 <__fp_round+0x20>
     d5e:	6f 5f       	subi	r22, 0xFF	; 255
     d60:	7f 4f       	sbci	r23, 0xFF	; 255
     d62:	8f 4f       	sbci	r24, 0xFF	; 255
     d64:	9f 4f       	sbci	r25, 0xFF	; 255
     d66:	08 95       	ret

00000d68 <__fp_split3>:
     d68:	57 fd       	sbrc	r21, 7
     d6a:	90 58       	subi	r25, 0x80	; 128
     d6c:	44 0f       	add	r20, r20
     d6e:	55 1f       	adc	r21, r21
     d70:	59 f0       	breq	.+22     	; 0xd88 <__fp_splitA+0x10>
     d72:	5f 3f       	cpi	r21, 0xFF	; 255
     d74:	71 f0       	breq	.+28     	; 0xd92 <__fp_splitA+0x1a>
     d76:	47 95       	ror	r20

00000d78 <__fp_splitA>:
     d78:	88 0f       	add	r24, r24
     d7a:	97 fb       	bst	r25, 7
     d7c:	99 1f       	adc	r25, r25
     d7e:	61 f0       	breq	.+24     	; 0xd98 <__fp_splitA+0x20>
     d80:	9f 3f       	cpi	r25, 0xFF	; 255
     d82:	79 f0       	breq	.+30     	; 0xda2 <__fp_splitA+0x2a>
     d84:	87 95       	ror	r24
     d86:	08 95       	ret
     d88:	12 16       	cp	r1, r18
     d8a:	13 06       	cpc	r1, r19
     d8c:	14 06       	cpc	r1, r20
     d8e:	55 1f       	adc	r21, r21
     d90:	f2 cf       	rjmp	.-28     	; 0xd76 <__fp_split3+0xe>
     d92:	46 95       	lsr	r20
     d94:	f1 df       	rcall	.-30     	; 0xd78 <__fp_splitA>
     d96:	08 c0       	rjmp	.+16     	; 0xda8 <__fp_splitA+0x30>
     d98:	16 16       	cp	r1, r22
     d9a:	17 06       	cpc	r1, r23
     d9c:	18 06       	cpc	r1, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	f1 cf       	rjmp	.-30     	; 0xd84 <__fp_splitA+0xc>
     da2:	86 95       	lsr	r24
     da4:	71 05       	cpc	r23, r1
     da6:	61 05       	cpc	r22, r1
     da8:	08 94       	sec
     daa:	08 95       	ret

00000dac <__fp_zero>:
     dac:	e8 94       	clt

00000dae <__fp_szero>:
     dae:	bb 27       	eor	r27, r27
     db0:	66 27       	eor	r22, r22
     db2:	77 27       	eor	r23, r23
     db4:	cb 01       	movw	r24, r22
     db6:	97 f9       	bld	r25, 7
     db8:	08 95       	ret

00000dba <inverse>:
     dba:	9b 01       	movw	r18, r22
     dbc:	ac 01       	movw	r20, r24
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	80 e8       	ldi	r24, 0x80	; 128
     dc4:	9f e3       	ldi	r25, 0x3F	; 63
     dc6:	81 ce       	rjmp	.-766    	; 0xaca <__divsf3>
     dc8:	82 cf       	rjmp	.-252    	; 0xcce <__fp_inf>
     dca:	16 c1       	rjmp	.+556    	; 0xff8 <__fp_mpack>

00000dcc <ldexp>:
     dcc:	d5 df       	rcall	.-86     	; 0xd78 <__fp_splitA>
     dce:	e8 f3       	brcs	.-6      	; 0xdca <inverse+0x10>
     dd0:	99 23       	and	r25, r25
     dd2:	d9 f3       	breq	.-10     	; 0xdca <inverse+0x10>
     dd4:	94 0f       	add	r25, r20
     dd6:	51 1d       	adc	r21, r1
     dd8:	bb f3       	brvs	.-18     	; 0xdc8 <inverse+0xe>
     dda:	91 50       	subi	r25, 0x01	; 1
     ddc:	50 40       	sbci	r21, 0x00	; 0
     dde:	94 f0       	brlt	.+36     	; 0xe04 <ldexp+0x38>
     de0:	59 f0       	breq	.+22     	; 0xdf8 <ldexp+0x2c>
     de2:	88 23       	and	r24, r24
     de4:	32 f0       	brmi	.+12     	; 0xdf2 <ldexp+0x26>
     de6:	66 0f       	add	r22, r22
     de8:	77 1f       	adc	r23, r23
     dea:	88 1f       	adc	r24, r24
     dec:	91 50       	subi	r25, 0x01	; 1
     dee:	50 40       	sbci	r21, 0x00	; 0
     df0:	c1 f7       	brne	.-16     	; 0xde2 <ldexp+0x16>
     df2:	9e 3f       	cpi	r25, 0xFE	; 254
     df4:	51 05       	cpc	r21, r1
     df6:	44 f7       	brge	.-48     	; 0xdc8 <inverse+0xe>
     df8:	88 0f       	add	r24, r24
     dfa:	91 1d       	adc	r25, r1
     dfc:	96 95       	lsr	r25
     dfe:	87 95       	ror	r24
     e00:	97 f9       	bld	r25, 7
     e02:	08 95       	ret
     e04:	5f 3f       	cpi	r21, 0xFF	; 255
     e06:	ac f0       	brlt	.+42     	; 0xe32 <ldexp+0x66>
     e08:	98 3e       	cpi	r25, 0xE8	; 232
     e0a:	9c f0       	brlt	.+38     	; 0xe32 <ldexp+0x66>
     e0c:	bb 27       	eor	r27, r27
     e0e:	86 95       	lsr	r24
     e10:	77 95       	ror	r23
     e12:	67 95       	ror	r22
     e14:	b7 95       	ror	r27
     e16:	08 f4       	brcc	.+2      	; 0xe1a <ldexp+0x4e>
     e18:	b1 60       	ori	r27, 0x01	; 1
     e1a:	93 95       	inc	r25
     e1c:	c1 f7       	brne	.-16     	; 0xe0e <ldexp+0x42>
     e1e:	bb 0f       	add	r27, r27
     e20:	58 f7       	brcc	.-42     	; 0xdf8 <ldexp+0x2c>
     e22:	11 f4       	brne	.+4      	; 0xe28 <ldexp+0x5c>
     e24:	60 ff       	sbrs	r22, 0
     e26:	e8 cf       	rjmp	.-48     	; 0xdf8 <ldexp+0x2c>
     e28:	6f 5f       	subi	r22, 0xFF	; 255
     e2a:	7f 4f       	sbci	r23, 0xFF	; 255
     e2c:	8f 4f       	sbci	r24, 0xFF	; 255
     e2e:	9f 4f       	sbci	r25, 0xFF	; 255
     e30:	e3 cf       	rjmp	.-58     	; 0xdf8 <ldexp+0x2c>
     e32:	bd cf       	rjmp	.-134    	; 0xdae <__fp_szero>

00000e34 <modf>:
     e34:	fa 01       	movw	r30, r20
     e36:	dc 01       	movw	r26, r24
     e38:	aa 0f       	add	r26, r26
     e3a:	bb 1f       	adc	r27, r27
     e3c:	9b 01       	movw	r18, r22
     e3e:	ac 01       	movw	r20, r24
     e40:	bf 57       	subi	r27, 0x7F	; 127
     e42:	28 f4       	brcc	.+10     	; 0xe4e <modf+0x1a>
     e44:	22 27       	eor	r18, r18
     e46:	33 27       	eor	r19, r19
     e48:	44 27       	eor	r20, r20
     e4a:	50 78       	andi	r21, 0x80	; 128
     e4c:	1f c0       	rjmp	.+62     	; 0xe8c <modf+0x58>
     e4e:	b7 51       	subi	r27, 0x17	; 23
     e50:	88 f4       	brcc	.+34     	; 0xe74 <modf+0x40>
     e52:	ab 2f       	mov	r26, r27
     e54:	00 24       	eor	r0, r0
     e56:	46 95       	lsr	r20
     e58:	37 95       	ror	r19
     e5a:	27 95       	ror	r18
     e5c:	01 1c       	adc	r0, r1
     e5e:	a3 95       	inc	r26
     e60:	d2 f3       	brmi	.-12     	; 0xe56 <modf+0x22>
     e62:	00 20       	and	r0, r0
     e64:	69 f0       	breq	.+26     	; 0xe80 <modf+0x4c>
     e66:	22 0f       	add	r18, r18
     e68:	33 1f       	adc	r19, r19
     e6a:	44 1f       	adc	r20, r20
     e6c:	b3 95       	inc	r27
     e6e:	da f3       	brmi	.-10     	; 0xe66 <modf+0x32>
     e70:	0d d0       	rcall	.+26     	; 0xe8c <modf+0x58>
     e72:	c6 cd       	rjmp	.-1140   	; 0xa00 <__subsf3>
     e74:	61 30       	cpi	r22, 0x01	; 1
     e76:	71 05       	cpc	r23, r1
     e78:	a0 e8       	ldi	r26, 0x80	; 128
     e7a:	8a 07       	cpc	r24, r26
     e7c:	b9 46       	sbci	r27, 0x69	; 105
     e7e:	30 f4       	brcc	.+12     	; 0xe8c <modf+0x58>
     e80:	9b 01       	movw	r18, r22
     e82:	ac 01       	movw	r20, r24
     e84:	66 27       	eor	r22, r22
     e86:	77 27       	eor	r23, r23
     e88:	88 27       	eor	r24, r24
     e8a:	90 78       	andi	r25, 0x80	; 128
     e8c:	30 96       	adiw	r30, 0x00	; 0
     e8e:	21 f0       	breq	.+8      	; 0xe98 <modf+0x64>
     e90:	20 83       	st	Z, r18
     e92:	31 83       	std	Z+1, r19	; 0x01
     e94:	42 83       	std	Z+2, r20	; 0x02
     e96:	53 83       	std	Z+3, r21	; 0x03
     e98:	08 95       	ret

00000e9a <__mulsf3>:
     e9a:	0b d0       	rcall	.+22     	; 0xeb2 <__mulsf3x>
     e9c:	54 cf       	rjmp	.-344    	; 0xd46 <__fp_round>
     e9e:	45 df       	rcall	.-374    	; 0xd2a <__fp_pscA>
     ea0:	28 f0       	brcs	.+10     	; 0xeac <__mulsf3+0x12>
     ea2:	4a df       	rcall	.-364    	; 0xd38 <__fp_pscB>
     ea4:	18 f0       	brcs	.+6      	; 0xeac <__mulsf3+0x12>
     ea6:	95 23       	and	r25, r21
     ea8:	09 f0       	breq	.+2      	; 0xeac <__mulsf3+0x12>
     eaa:	11 cf       	rjmp	.-478    	; 0xcce <__fp_inf>
     eac:	16 cf       	rjmp	.-468    	; 0xcda <__fp_nan>
     eae:	11 24       	eor	r1, r1
     eb0:	7e cf       	rjmp	.-260    	; 0xdae <__fp_szero>

00000eb2 <__mulsf3x>:
     eb2:	5a df       	rcall	.-332    	; 0xd68 <__fp_split3>
     eb4:	a0 f3       	brcs	.-24     	; 0xe9e <__mulsf3+0x4>

00000eb6 <__mulsf3_pse>:
     eb6:	95 9f       	mul	r25, r21
     eb8:	d1 f3       	breq	.-12     	; 0xeae <__mulsf3+0x14>
     eba:	95 0f       	add	r25, r21
     ebc:	50 e0       	ldi	r21, 0x00	; 0
     ebe:	55 1f       	adc	r21, r21
     ec0:	62 9f       	mul	r22, r18
     ec2:	f0 01       	movw	r30, r0
     ec4:	72 9f       	mul	r23, r18
     ec6:	bb 27       	eor	r27, r27
     ec8:	f0 0d       	add	r31, r0
     eca:	b1 1d       	adc	r27, r1
     ecc:	63 9f       	mul	r22, r19
     ece:	aa 27       	eor	r26, r26
     ed0:	f0 0d       	add	r31, r0
     ed2:	b1 1d       	adc	r27, r1
     ed4:	aa 1f       	adc	r26, r26
     ed6:	64 9f       	mul	r22, r20
     ed8:	66 27       	eor	r22, r22
     eda:	b0 0d       	add	r27, r0
     edc:	a1 1d       	adc	r26, r1
     ede:	66 1f       	adc	r22, r22
     ee0:	82 9f       	mul	r24, r18
     ee2:	22 27       	eor	r18, r18
     ee4:	b0 0d       	add	r27, r0
     ee6:	a1 1d       	adc	r26, r1
     ee8:	62 1f       	adc	r22, r18
     eea:	73 9f       	mul	r23, r19
     eec:	b0 0d       	add	r27, r0
     eee:	a1 1d       	adc	r26, r1
     ef0:	62 1f       	adc	r22, r18
     ef2:	83 9f       	mul	r24, r19
     ef4:	a0 0d       	add	r26, r0
     ef6:	61 1d       	adc	r22, r1
     ef8:	22 1f       	adc	r18, r18
     efa:	74 9f       	mul	r23, r20
     efc:	33 27       	eor	r19, r19
     efe:	a0 0d       	add	r26, r0
     f00:	61 1d       	adc	r22, r1
     f02:	23 1f       	adc	r18, r19
     f04:	84 9f       	mul	r24, r20
     f06:	60 0d       	add	r22, r0
     f08:	21 1d       	adc	r18, r1
     f0a:	82 2f       	mov	r24, r18
     f0c:	76 2f       	mov	r23, r22
     f0e:	6a 2f       	mov	r22, r26
     f10:	11 24       	eor	r1, r1
     f12:	9f 57       	subi	r25, 0x7F	; 127
     f14:	50 40       	sbci	r21, 0x00	; 0
     f16:	8a f0       	brmi	.+34     	; 0xf3a <__mulsf3_pse+0x84>
     f18:	e1 f0       	breq	.+56     	; 0xf52 <__mulsf3_pse+0x9c>
     f1a:	88 23       	and	r24, r24
     f1c:	4a f0       	brmi	.+18     	; 0xf30 <__mulsf3_pse+0x7a>
     f1e:	ee 0f       	add	r30, r30
     f20:	ff 1f       	adc	r31, r31
     f22:	bb 1f       	adc	r27, r27
     f24:	66 1f       	adc	r22, r22
     f26:	77 1f       	adc	r23, r23
     f28:	88 1f       	adc	r24, r24
     f2a:	91 50       	subi	r25, 0x01	; 1
     f2c:	50 40       	sbci	r21, 0x00	; 0
     f2e:	a9 f7       	brne	.-22     	; 0xf1a <__mulsf3_pse+0x64>
     f30:	9e 3f       	cpi	r25, 0xFE	; 254
     f32:	51 05       	cpc	r21, r1
     f34:	70 f0       	brcs	.+28     	; 0xf52 <__mulsf3_pse+0x9c>
     f36:	cb ce       	rjmp	.-618    	; 0xcce <__fp_inf>
     f38:	3a cf       	rjmp	.-396    	; 0xdae <__fp_szero>
     f3a:	5f 3f       	cpi	r21, 0xFF	; 255
     f3c:	ec f3       	brlt	.-6      	; 0xf38 <__mulsf3_pse+0x82>
     f3e:	98 3e       	cpi	r25, 0xE8	; 232
     f40:	dc f3       	brlt	.-10     	; 0xf38 <__mulsf3_pse+0x82>
     f42:	86 95       	lsr	r24
     f44:	77 95       	ror	r23
     f46:	67 95       	ror	r22
     f48:	b7 95       	ror	r27
     f4a:	f7 95       	ror	r31
     f4c:	e7 95       	ror	r30
     f4e:	9f 5f       	subi	r25, 0xFF	; 255
     f50:	c1 f7       	brne	.-16     	; 0xf42 <__mulsf3_pse+0x8c>
     f52:	fe 2b       	or	r31, r30
     f54:	88 0f       	add	r24, r24
     f56:	91 1d       	adc	r25, r1
     f58:	96 95       	lsr	r25
     f5a:	87 95       	ror	r24
     f5c:	97 f9       	bld	r25, 7
     f5e:	08 95       	ret

00000f60 <pow>:
     f60:	fa 01       	movw	r30, r20
     f62:	ee 0f       	add	r30, r30
     f64:	ff 1f       	adc	r31, r31
     f66:	30 96       	adiw	r30, 0x00	; 0
     f68:	21 05       	cpc	r18, r1
     f6a:	31 05       	cpc	r19, r1
     f6c:	99 f1       	breq	.+102    	; 0xfd4 <pow+0x74>
     f6e:	61 15       	cp	r22, r1
     f70:	71 05       	cpc	r23, r1
     f72:	61 f4       	brne	.+24     	; 0xf8c <pow+0x2c>
     f74:	80 38       	cpi	r24, 0x80	; 128
     f76:	bf e3       	ldi	r27, 0x3F	; 63
     f78:	9b 07       	cpc	r25, r27
     f7a:	49 f1       	breq	.+82     	; 0xfce <pow+0x6e>
     f7c:	68 94       	set
     f7e:	90 38       	cpi	r25, 0x80	; 128
     f80:	81 05       	cpc	r24, r1
     f82:	61 f0       	breq	.+24     	; 0xf9c <pow+0x3c>
     f84:	80 38       	cpi	r24, 0x80	; 128
     f86:	bf ef       	ldi	r27, 0xFF	; 255
     f88:	9b 07       	cpc	r25, r27
     f8a:	41 f0       	breq	.+16     	; 0xf9c <pow+0x3c>
     f8c:	99 23       	and	r25, r25
     f8e:	42 f5       	brpl	.+80     	; 0xfe0 <pow+0x80>
     f90:	ff 3f       	cpi	r31, 0xFF	; 255
     f92:	e1 05       	cpc	r30, r1
     f94:	31 05       	cpc	r19, r1
     f96:	21 05       	cpc	r18, r1
     f98:	11 f1       	breq	.+68     	; 0xfde <pow+0x7e>
     f9a:	e8 94       	clt
     f9c:	08 94       	sec
     f9e:	e7 95       	ror	r30
     fa0:	d9 01       	movw	r26, r18
     fa2:	aa 23       	and	r26, r26
     fa4:	29 f4       	brne	.+10     	; 0xfb0 <pow+0x50>
     fa6:	ab 2f       	mov	r26, r27
     fa8:	be 2f       	mov	r27, r30
     faa:	f8 5f       	subi	r31, 0xF8	; 248
     fac:	d0 f3       	brcs	.-12     	; 0xfa2 <pow+0x42>
     fae:	10 c0       	rjmp	.+32     	; 0xfd0 <pow+0x70>
     fb0:	ff 5f       	subi	r31, 0xFF	; 255
     fb2:	70 f4       	brcc	.+28     	; 0xfd0 <pow+0x70>
     fb4:	a6 95       	lsr	r26
     fb6:	e0 f7       	brcc	.-8      	; 0xfb0 <pow+0x50>
     fb8:	f7 39       	cpi	r31, 0x97	; 151
     fba:	50 f0       	brcs	.+20     	; 0xfd0 <pow+0x70>
     fbc:	19 f0       	breq	.+6      	; 0xfc4 <pow+0x64>
     fbe:	ff 3a       	cpi	r31, 0xAF	; 175
     fc0:	38 f4       	brcc	.+14     	; 0xfd0 <pow+0x70>
     fc2:	9f 77       	andi	r25, 0x7F	; 127
     fc4:	9f 93       	push	r25
     fc6:	0c d0       	rcall	.+24     	; 0xfe0 <pow+0x80>
     fc8:	0f 90       	pop	r0
     fca:	07 fc       	sbrc	r0, 7
     fcc:	90 58       	subi	r25, 0x80	; 128
     fce:	08 95       	ret
     fd0:	3e f0       	brts	.+14     	; 0xfe0 <pow+0x80>
     fd2:	83 ce       	rjmp	.-762    	; 0xcda <__fp_nan>
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	80 e8       	ldi	r24, 0x80	; 128
     fda:	9f e3       	ldi	r25, 0x3F	; 63
     fdc:	08 95       	ret
     fde:	4f e7       	ldi	r20, 0x7F	; 127
     fe0:	9f 77       	andi	r25, 0x7F	; 127
     fe2:	5f 93       	push	r21
     fe4:	4f 93       	push	r20
     fe6:	3f 93       	push	r19
     fe8:	2f 93       	push	r18
     fea:	19 d0       	rcall	.+50     	; 0x101e <log>
     fec:	2f 91       	pop	r18
     fee:	3f 91       	pop	r19
     ff0:	4f 91       	pop	r20
     ff2:	5f 91       	pop	r21
     ff4:	52 df       	rcall	.-348    	; 0xe9a <__mulsf3>
     ff6:	d6 cd       	rjmp	.-1108   	; 0xba4 <exp>

00000ff8 <__fp_mpack>:
     ff8:	9f 3f       	cpi	r25, 0xFF	; 255
     ffa:	31 f0       	breq	.+12     	; 0x1008 <__fp_mpack_finite+0xc>

00000ffc <__fp_mpack_finite>:
     ffc:	91 50       	subi	r25, 0x01	; 1
     ffe:	20 f4       	brcc	.+8      	; 0x1008 <__fp_mpack_finite+0xc>
    1000:	87 95       	ror	r24
    1002:	77 95       	ror	r23
    1004:	67 95       	ror	r22
    1006:	b7 95       	ror	r27
    1008:	88 0f       	add	r24, r24
    100a:	91 1d       	adc	r25, r1
    100c:	96 95       	lsr	r25
    100e:	87 95       	ror	r24
    1010:	97 f9       	bld	r25, 7
    1012:	08 95       	ret
    1014:	0e f0       	brts	.+2      	; 0x1018 <__fp_mpack_finite+0x1c>
    1016:	f0 cf       	rjmp	.-32     	; 0xff8 <__fp_mpack>
    1018:	60 ce       	rjmp	.-832    	; 0xcda <__fp_nan>
    101a:	68 94       	set
    101c:	58 ce       	rjmp	.-848    	; 0xcce <__fp_inf>

0000101e <log>:
    101e:	ac de       	rcall	.-680    	; 0xd78 <__fp_splitA>
    1020:	c8 f3       	brcs	.-14     	; 0x1014 <__fp_mpack_finite+0x18>
    1022:	99 23       	and	r25, r25
    1024:	d1 f3       	breq	.-12     	; 0x101a <__fp_mpack_finite+0x1e>
    1026:	c6 f3       	brts	.-16     	; 0x1018 <__fp_mpack_finite+0x1c>
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	1f 93       	push	r17
    102e:	0f 93       	push	r16
    1030:	ff 92       	push	r15
    1032:	c9 2f       	mov	r28, r25
    1034:	dd 27       	eor	r29, r29
    1036:	88 23       	and	r24, r24
    1038:	2a f0       	brmi	.+10     	; 0x1044 <log+0x26>
    103a:	21 97       	sbiw	r28, 0x01	; 1
    103c:	66 0f       	add	r22, r22
    103e:	77 1f       	adc	r23, r23
    1040:	88 1f       	adc	r24, r24
    1042:	da f7       	brpl	.-10     	; 0x103a <log+0x1c>
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	40 e8       	ldi	r20, 0x80	; 128
    104a:	5f eb       	ldi	r21, 0xBF	; 191
    104c:	9f e3       	ldi	r25, 0x3F	; 63
    104e:	88 39       	cpi	r24, 0x98	; 152
    1050:	20 f0       	brcs	.+8      	; 0x105a <log+0x3c>
    1052:	80 3e       	cpi	r24, 0xE0	; 224
    1054:	30 f0       	brcs	.+12     	; 0x1062 <log+0x44>
    1056:	21 96       	adiw	r28, 0x01	; 1
    1058:	8f 77       	andi	r24, 0x7F	; 127
    105a:	d3 dc       	rcall	.-1626   	; 0xa02 <__addsf3>
    105c:	ec e0       	ldi	r30, 0x0C	; 12
    105e:	f1 e0       	ldi	r31, 0x01	; 1
    1060:	03 c0       	rjmp	.+6      	; 0x1068 <log+0x4a>
    1062:	cf dc       	rcall	.-1634   	; 0xa02 <__addsf3>
    1064:	e9 e3       	ldi	r30, 0x39	; 57
    1066:	f1 e0       	ldi	r31, 0x01	; 1
    1068:	3b de       	rcall	.-906    	; 0xce0 <__fp_powser>
    106a:	8b 01       	movw	r16, r22
    106c:	be 01       	movw	r22, r28
    106e:	ec 01       	movw	r28, r24
    1070:	fb 2e       	mov	r15, r27
    1072:	6f 57       	subi	r22, 0x7F	; 127
    1074:	71 09       	sbc	r23, r1
    1076:	75 95       	asr	r23
    1078:	77 1f       	adc	r23, r23
    107a:	88 0b       	sbc	r24, r24
    107c:	99 0b       	sbc	r25, r25
    107e:	ec dd       	rcall	.-1064   	; 0xc58 <__floatsisf>
    1080:	28 e1       	ldi	r18, 0x18	; 24
    1082:	32 e7       	ldi	r19, 0x72	; 114
    1084:	41 e3       	ldi	r20, 0x31	; 49
    1086:	5f e3       	ldi	r21, 0x3F	; 63
    1088:	14 df       	rcall	.-472    	; 0xeb2 <__mulsf3x>
    108a:	af 2d       	mov	r26, r15
    108c:	98 01       	movw	r18, r16
    108e:	ae 01       	movw	r20, r28
    1090:	ff 90       	pop	r15
    1092:	0f 91       	pop	r16
    1094:	1f 91       	pop	r17
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	c4 dc       	rcall	.-1656   	; 0xa24 <__addsf3x>
    109c:	54 ce       	rjmp	.-856    	; 0xd46 <__fp_round>

0000109e <_exit>:
    109e:	f8 94       	cli

000010a0 <__stop_program>:
    10a0:	ff cf       	rjmp	.-2      	; 0x10a0 <__stop_program>
