
Neural_Network.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000011f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001228  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001359  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d81  00000000  00000000  00002649  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000872  00000000  00000000  000033ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000274  00000000  00000000  00003c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006b1  00000000  00000000  00003eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000537  00000000  00000000  00004561  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00004a98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	85 c0       	rjmp	.+266    	; 0x10c <__ctors_end>
       2:	00 00       	nop
       4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
       6:	00 00       	nop
       8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
       a:	00 00       	nop
       c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
       e:	00 00       	nop
      10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
      12:	00 00       	nop
      14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
      16:	00 00       	nop
      18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
      1e:	00 00       	nop
      20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
      3e:	00 00       	nop
      40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
      42:	00 00       	nop
      44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
      46:	00 00       	nop
      48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
      4e:	00 00       	nop
      50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
      52:	00 00       	nop
      54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
      62:	00 00       	nop
      64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
      66:	00 00       	nop
      68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
      72:	00 00       	nop
      74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
      76:	00 00       	nop
      78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
      8e:	00 00       	nop
      90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
      92:	00 00       	nop
      94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
      96:	00 00       	nop
      98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
      be:	00 00       	nop
      c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
      da:	00 00       	nop
      dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
      de:	00 00       	nop
      e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240

0000010c <__ctors_end>:
     10c:	11 24       	eor	r1, r1
     10e:	1f be       	out	0x3f, r1	; 63
     110:	cf ef       	ldi	r28, 0xFF	; 255
     112:	d1 e2       	ldi	r29, 0x21	; 33
     114:	de bf       	out	0x3e, r29	; 62
     116:	cd bf       	out	0x3d, r28	; 61
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	0c bf       	out	0x3c, r16	; 60
     11c:	8b d3       	rcall	.+1814   	; 0x834 <main>
     11e:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <_exit>

00000122 <__bad_interrupt>:
     122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <init_Neural_Net>:
	u8 output_length;
	double LR;
};

void init_Neural_Net(struct Neural_Net *my_NN,u8 input_length,u8 hidden_neurons_depth[max_size],u8 depth,u8 output_length,double learning_rate)
{
     124:	cf 92       	push	r12
     126:	df 92       	push	r13
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	0f 93       	push	r16
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	62 97       	sbiw	r28, 0x12	; 18
     138:	0f b6       	in	r0, 0x3f	; 63
     13a:	f8 94       	cli
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	0f be       	out	0x3f, r0	; 63
     140:	cd bf       	out	0x3d, r28	; 61
     142:	99 87       	std	Y+9, r25	; 0x09
     144:	88 87       	std	Y+8, r24	; 0x08
     146:	6a 87       	std	Y+10, r22	; 0x0a
     148:	5c 87       	std	Y+12, r21	; 0x0c
     14a:	4b 87       	std	Y+11, r20	; 0x0b
     14c:	2d 87       	std	Y+13, r18	; 0x0d
     14e:	0e 87       	std	Y+14, r16	; 0x0e
     150:	cf 86       	std	Y+15, r12	; 0x0f
     152:	d8 8a       	std	Y+16, r13	; 0x10
     154:	e9 8a       	std	Y+17, r14	; 0x11
     156:	fa 8a       	std	Y+18, r15	; 0x12
	//init the main values of the Neural net structure
	my_NN->input_length=input_length;
     158:	88 85       	ldd	r24, Y+8	; 0x08
     15a:	99 85       	ldd	r25, Y+9	; 0x09
     15c:	2a 85       	ldd	r18, Y+10	; 0x0a
     15e:	dc 01       	movw	r26, r24
     160:	2c 93       	st	X, r18
	my_NN->depth=depth;
     162:	88 85       	ldd	r24, Y+8	; 0x08
     164:	99 85       	ldd	r25, Y+9	; 0x09
     166:	8f 56       	subi	r24, 0x6F	; 111
     168:	93 4f       	sbci	r25, 0xF3	; 243
     16a:	2d 85       	ldd	r18, Y+13	; 0x0d
     16c:	fc 01       	movw	r30, r24
     16e:	20 83       	st	Z, r18
	my_NN->output_length = output_length;
     170:	88 85       	ldd	r24, Y+8	; 0x08
     172:	99 85       	ldd	r25, Y+9	; 0x09
     174:	8e 56       	subi	r24, 0x6E	; 110
     176:	93 4f       	sbci	r25, 0xF3	; 243
     178:	2e 85       	ldd	r18, Y+14	; 0x0e
     17a:	dc 01       	movw	r26, r24
     17c:	2c 93       	st	X, r18
	my_NN->LR = learning_rate;
     17e:	88 85       	ldd	r24, Y+8	; 0x08
     180:	99 85       	ldd	r25, Y+9	; 0x09
     182:	9c 01       	movw	r18, r24
     184:	2d 56       	subi	r18, 0x6D	; 109
     186:	33 4f       	sbci	r19, 0xF3	; 243
     188:	8f 85       	ldd	r24, Y+15	; 0x0f
     18a:	98 89       	ldd	r25, Y+16	; 0x10
     18c:	a9 89       	ldd	r26, Y+17	; 0x11
     18e:	ba 89       	ldd	r27, Y+18	; 0x12
     190:	f9 01       	movw	r30, r18
     192:	80 83       	st	Z, r24
     194:	91 83       	std	Z+1, r25	; 0x01
     196:	a2 83       	std	Z+2, r26	; 0x02
     198:	b3 83       	std	Z+3, r27	; 0x03

	//init the first hidden layer
	my_NN->weights[0].rows = input_length;
     19a:	88 85       	ldd	r24, Y+8	; 0x08
     19c:	99 85       	ldd	r25, Y+9	; 0x09
     19e:	8f 56       	subi	r24, 0x6F	; 111
     1a0:	9e 4f       	sbci	r25, 0xFE	; 254
     1a2:	2a 85       	ldd	r18, Y+10	; 0x0a
     1a4:	dc 01       	movw	r26, r24
     1a6:	2c 93       	st	X, r18
	my_NN->weights[0].colums = hidden_neurons_depth[0];
     1a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     1aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     1ac:	fc 01       	movw	r30, r24
     1ae:	20 81       	ld	r18, Z
     1b0:	88 85       	ldd	r24, Y+8	; 0x08
     1b2:	99 85       	ldd	r25, Y+9	; 0x09
     1b4:	8e 56       	subi	r24, 0x6E	; 110
     1b6:	9e 4f       	sbci	r25, 0xFE	; 254
     1b8:	dc 01       	movw	r26, r24
     1ba:	2c 93       	st	X, r18
	for (u8 row=0;row < my_NN->weights[0].rows;row++)
     1bc:	19 82       	std	Y+1, r1	; 0x01
     1be:	36 c0       	rjmp	.+108    	; 0x22c <init_Neural_Net+0x108>
	{
		for (u8 column =0; column < my_NN->weights[0].colums;column++)
     1c0:	1a 82       	std	Y+2, r1	; 0x02
     1c2:	28 c0       	rjmp	.+80     	; 0x214 <init_Neural_Net+0xf0>
		{
			my_NN->weights[0].array[row][column] = 0.1;
     1c4:	89 81       	ldd	r24, Y+1	; 0x01
     1c6:	88 2f       	mov	r24, r24
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	2a 81       	ldd	r18, Y+2	; 0x02
     1cc:	42 2f       	mov	r20, r18
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	28 85       	ldd	r18, Y+8	; 0x08
     1d2:	39 85       	ldd	r19, Y+9	; 0x09
     1d4:	88 0f       	add	r24, r24
     1d6:	99 1f       	adc	r25, r25
     1d8:	bc 01       	movw	r22, r24
     1da:	66 0f       	add	r22, r22
     1dc:	77 1f       	adc	r23, r23
     1de:	66 0f       	add	r22, r22
     1e0:	77 1f       	adc	r23, r23
     1e2:	86 0f       	add	r24, r22
     1e4:	97 1f       	adc	r25, r23
     1e6:	84 0f       	add	r24, r20
     1e8:	95 1f       	adc	r25, r21
     1ea:	88 0f       	add	r24, r24
     1ec:	99 1f       	adc	r25, r25
     1ee:	88 0f       	add	r24, r24
     1f0:	99 1f       	adc	r25, r25
     1f2:	82 0f       	add	r24, r18
     1f4:	93 1f       	adc	r25, r19
     1f6:	9c 01       	movw	r18, r24
     1f8:	2f 5f       	subi	r18, 0xFF	; 255
     1fa:	3f 4f       	sbci	r19, 0xFF	; 255
     1fc:	8d ec       	ldi	r24, 0xCD	; 205
     1fe:	9c ec       	ldi	r25, 0xCC	; 204
     200:	ac ec       	ldi	r26, 0xCC	; 204
     202:	bd e3       	ldi	r27, 0x3D	; 61
     204:	f9 01       	movw	r30, r18
     206:	80 83       	st	Z, r24
     208:	91 83       	std	Z+1, r25	; 0x01
     20a:	a2 83       	std	Z+2, r26	; 0x02
     20c:	b3 83       	std	Z+3, r27	; 0x03
	//init the first hidden layer
	my_NN->weights[0].rows = input_length;
	my_NN->weights[0].colums = hidden_neurons_depth[0];
	for (u8 row=0;row < my_NN->weights[0].rows;row++)
	{
		for (u8 column =0; column < my_NN->weights[0].colums;column++)
     20e:	8a 81       	ldd	r24, Y+2	; 0x02
     210:	8f 5f       	subi	r24, 0xFF	; 255
     212:	8a 83       	std	Y+2, r24	; 0x02
     214:	88 85       	ldd	r24, Y+8	; 0x08
     216:	99 85       	ldd	r25, Y+9	; 0x09
     218:	8e 56       	subi	r24, 0x6E	; 110
     21a:	9e 4f       	sbci	r25, 0xFE	; 254
     21c:	dc 01       	movw	r26, r24
     21e:	9c 91       	ld	r25, X
     220:	8a 81       	ldd	r24, Y+2	; 0x02
     222:	89 17       	cp	r24, r25
     224:	78 f2       	brcs	.-98     	; 0x1c4 <init_Neural_Net+0xa0>
	my_NN->LR = learning_rate;

	//init the first hidden layer
	my_NN->weights[0].rows = input_length;
	my_NN->weights[0].colums = hidden_neurons_depth[0];
	for (u8 row=0;row < my_NN->weights[0].rows;row++)
     226:	89 81       	ldd	r24, Y+1	; 0x01
     228:	8f 5f       	subi	r24, 0xFF	; 255
     22a:	89 83       	std	Y+1, r24	; 0x01
     22c:	88 85       	ldd	r24, Y+8	; 0x08
     22e:	99 85       	ldd	r25, Y+9	; 0x09
     230:	8f 56       	subi	r24, 0x6F	; 111
     232:	9e 4f       	sbci	r25, 0xFE	; 254
     234:	fc 01       	movw	r30, r24
     236:	90 81       	ld	r25, Z
     238:	89 81       	ldd	r24, Y+1	; 0x01
     23a:	89 17       	cp	r24, r25
     23c:	08 f2       	brcs	.-126    	; 0x1c0 <init_Neural_Net+0x9c>
			my_NN->weights[0].array[row][column] = 0.1;
		}
	}

	//init all layer
	for (u8 depth_value=1;depth_value < my_NN->depth; depth_value++)
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	8b 83       	std	Y+3, r24	; 0x03
     242:	ae c0       	rjmp	.+348    	; 0x3a0 <init_Neural_Net+0x27c>
	{
		my_NN->weights[depth_value].rows = hidden_neurons_depth[depth_value-1];
     244:	8b 81       	ldd	r24, Y+3	; 0x03
     246:	68 2f       	mov	r22, r24
     248:	70 e0       	ldi	r23, 0x00	; 0
     24a:	8b 81       	ldd	r24, Y+3	; 0x03
     24c:	88 2f       	mov	r24, r24
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	01 97       	sbiw	r24, 0x01	; 1
     252:	2b 85       	ldd	r18, Y+11	; 0x0b
     254:	3c 85       	ldd	r19, Y+12	; 0x0c
     256:	82 0f       	add	r24, r18
     258:	93 1f       	adc	r25, r19
     25a:	dc 01       	movw	r26, r24
     25c:	ec 91       	ld	r30, X
     25e:	28 85       	ldd	r18, Y+8	; 0x08
     260:	39 85       	ldd	r19, Y+9	; 0x09
     262:	42 e9       	ldi	r20, 0x92	; 146
     264:	51 e0       	ldi	r21, 0x01	; 1
     266:	64 9f       	mul	r22, r20
     268:	c0 01       	movw	r24, r0
     26a:	65 9f       	mul	r22, r21
     26c:	90 0d       	add	r25, r0
     26e:	74 9f       	mul	r23, r20
     270:	90 0d       	add	r25, r0
     272:	11 24       	eor	r1, r1
     274:	82 0f       	add	r24, r18
     276:	93 1f       	adc	r25, r19
     278:	8f 56       	subi	r24, 0x6F	; 111
     27a:	9e 4f       	sbci	r25, 0xFE	; 254
     27c:	dc 01       	movw	r26, r24
     27e:	ec 93       	st	X, r30
		my_NN->weights[depth_value].colums = hidden_neurons_depth[depth_value];
     280:	8b 81       	ldd	r24, Y+3	; 0x03
     282:	88 2f       	mov	r24, r24
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	2b 81       	ldd	r18, Y+3	; 0x03
     288:	22 2f       	mov	r18, r18
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	4b 85       	ldd	r20, Y+11	; 0x0b
     28e:	5c 85       	ldd	r21, Y+12	; 0x0c
     290:	24 0f       	add	r18, r20
     292:	35 1f       	adc	r19, r21
     294:	d9 01       	movw	r26, r18
     296:	ec 91       	ld	r30, X
     298:	28 85       	ldd	r18, Y+8	; 0x08
     29a:	39 85       	ldd	r19, Y+9	; 0x09
     29c:	bc 01       	movw	r22, r24
     29e:	6f 5f       	subi	r22, 0xFF	; 255
     2a0:	7f 4f       	sbci	r23, 0xFF	; 255
     2a2:	42 e9       	ldi	r20, 0x92	; 146
     2a4:	51 e0       	ldi	r21, 0x01	; 1
     2a6:	64 9f       	mul	r22, r20
     2a8:	c0 01       	movw	r24, r0
     2aa:	65 9f       	mul	r22, r21
     2ac:	90 0d       	add	r25, r0
     2ae:	74 9f       	mul	r23, r20
     2b0:	90 0d       	add	r25, r0
     2b2:	11 24       	eor	r1, r1
     2b4:	82 0f       	add	r24, r18
     2b6:	93 1f       	adc	r25, r19
     2b8:	dc 01       	movw	r26, r24
     2ba:	ec 93       	st	X, r30
		for (u8 row = 0; row < my_NN->weights[depth_value].rows;row++)
     2bc:	1c 82       	std	Y+4, r1	; 0x04
     2be:	55 c0       	rjmp	.+170    	; 0x36a <init_Neural_Net+0x246>
		{
			for (u8 column=0;column < my_NN->weights[depth_value].colums;column++)
     2c0:	1d 82       	std	Y+5, r1	; 0x05
     2c2:	37 c0       	rjmp	.+110    	; 0x332 <init_Neural_Net+0x20e>
			{
				my_NN->weights[depth_value].array[row][column] = 0.1;
     2c4:	8b 81       	ldd	r24, Y+3	; 0x03
     2c6:	e8 2f       	mov	r30, r24
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	8c 81       	ldd	r24, Y+4	; 0x04
     2cc:	88 2f       	mov	r24, r24
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	2d 81       	ldd	r18, Y+5	; 0x05
     2d2:	42 2f       	mov	r20, r18
     2d4:	50 e0       	ldi	r21, 0x00	; 0
     2d6:	28 85       	ldd	r18, Y+8	; 0x08
     2d8:	39 85       	ldd	r19, Y+9	; 0x09
     2da:	88 0f       	add	r24, r24
     2dc:	99 1f       	adc	r25, r25
     2de:	bc 01       	movw	r22, r24
     2e0:	66 0f       	add	r22, r22
     2e2:	77 1f       	adc	r23, r23
     2e4:	66 0f       	add	r22, r22
     2e6:	77 1f       	adc	r23, r23
     2e8:	86 0f       	add	r24, r22
     2ea:	97 1f       	adc	r25, r23
     2ec:	84 0f       	add	r24, r20
     2ee:	95 1f       	adc	r25, r21
     2f0:	ac 01       	movw	r20, r24
     2f2:	44 0f       	add	r20, r20
     2f4:	55 1f       	adc	r21, r21
     2f6:	44 0f       	add	r20, r20
     2f8:	55 1f       	adc	r21, r21
     2fa:	62 e9       	ldi	r22, 0x92	; 146
     2fc:	71 e0       	ldi	r23, 0x01	; 1
     2fe:	e6 9f       	mul	r30, r22
     300:	c0 01       	movw	r24, r0
     302:	e7 9f       	mul	r30, r23
     304:	90 0d       	add	r25, r0
     306:	f6 9f       	mul	r31, r22
     308:	90 0d       	add	r25, r0
     30a:	11 24       	eor	r1, r1
     30c:	84 0f       	add	r24, r20
     30e:	95 1f       	adc	r25, r21
     310:	82 0f       	add	r24, r18
     312:	93 1f       	adc	r25, r19
     314:	9c 01       	movw	r18, r24
     316:	2f 5f       	subi	r18, 0xFF	; 255
     318:	3f 4f       	sbci	r19, 0xFF	; 255
     31a:	8d ec       	ldi	r24, 0xCD	; 205
     31c:	9c ec       	ldi	r25, 0xCC	; 204
     31e:	ac ec       	ldi	r26, 0xCC	; 204
     320:	bd e3       	ldi	r27, 0x3D	; 61
     322:	f9 01       	movw	r30, r18
     324:	80 83       	st	Z, r24
     326:	91 83       	std	Z+1, r25	; 0x01
     328:	a2 83       	std	Z+2, r26	; 0x02
     32a:	b3 83       	std	Z+3, r27	; 0x03
	{
		my_NN->weights[depth_value].rows = hidden_neurons_depth[depth_value-1];
		my_NN->weights[depth_value].colums = hidden_neurons_depth[depth_value];
		for (u8 row = 0; row < my_NN->weights[depth_value].rows;row++)
		{
			for (u8 column=0;column < my_NN->weights[depth_value].colums;column++)
     32c:	8d 81       	ldd	r24, Y+5	; 0x05
     32e:	8f 5f       	subi	r24, 0xFF	; 255
     330:	8d 83       	std	Y+5, r24	; 0x05
     332:	8b 81       	ldd	r24, Y+3	; 0x03
     334:	88 2f       	mov	r24, r24
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	28 85       	ldd	r18, Y+8	; 0x08
     33a:	39 85       	ldd	r19, Y+9	; 0x09
     33c:	bc 01       	movw	r22, r24
     33e:	6f 5f       	subi	r22, 0xFF	; 255
     340:	7f 4f       	sbci	r23, 0xFF	; 255
     342:	42 e9       	ldi	r20, 0x92	; 146
     344:	51 e0       	ldi	r21, 0x01	; 1
     346:	64 9f       	mul	r22, r20
     348:	c0 01       	movw	r24, r0
     34a:	65 9f       	mul	r22, r21
     34c:	90 0d       	add	r25, r0
     34e:	74 9f       	mul	r23, r20
     350:	90 0d       	add	r25, r0
     352:	11 24       	eor	r1, r1
     354:	82 0f       	add	r24, r18
     356:	93 1f       	adc	r25, r19
     358:	dc 01       	movw	r26, r24
     35a:	9c 91       	ld	r25, X
     35c:	8d 81       	ldd	r24, Y+5	; 0x05
     35e:	89 17       	cp	r24, r25
     360:	08 f4       	brcc	.+2      	; 0x364 <init_Neural_Net+0x240>
     362:	b0 cf       	rjmp	.-160    	; 0x2c4 <init_Neural_Net+0x1a0>
	//init all layer
	for (u8 depth_value=1;depth_value < my_NN->depth; depth_value++)
	{
		my_NN->weights[depth_value].rows = hidden_neurons_depth[depth_value-1];
		my_NN->weights[depth_value].colums = hidden_neurons_depth[depth_value];
		for (u8 row = 0; row < my_NN->weights[depth_value].rows;row++)
     364:	8c 81       	ldd	r24, Y+4	; 0x04
     366:	8f 5f       	subi	r24, 0xFF	; 255
     368:	8c 83       	std	Y+4, r24	; 0x04
     36a:	8b 81       	ldd	r24, Y+3	; 0x03
     36c:	68 2f       	mov	r22, r24
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	28 85       	ldd	r18, Y+8	; 0x08
     372:	39 85       	ldd	r19, Y+9	; 0x09
     374:	42 e9       	ldi	r20, 0x92	; 146
     376:	51 e0       	ldi	r21, 0x01	; 1
     378:	64 9f       	mul	r22, r20
     37a:	c0 01       	movw	r24, r0
     37c:	65 9f       	mul	r22, r21
     37e:	90 0d       	add	r25, r0
     380:	74 9f       	mul	r23, r20
     382:	90 0d       	add	r25, r0
     384:	11 24       	eor	r1, r1
     386:	82 0f       	add	r24, r18
     388:	93 1f       	adc	r25, r19
     38a:	8f 56       	subi	r24, 0x6F	; 111
     38c:	9e 4f       	sbci	r25, 0xFE	; 254
     38e:	fc 01       	movw	r30, r24
     390:	90 81       	ld	r25, Z
     392:	8c 81       	ldd	r24, Y+4	; 0x04
     394:	89 17       	cp	r24, r25
     396:	08 f4       	brcc	.+2      	; 0x39a <init_Neural_Net+0x276>
     398:	93 cf       	rjmp	.-218    	; 0x2c0 <init_Neural_Net+0x19c>
			my_NN->weights[0].array[row][column] = 0.1;
		}
	}

	//init all layer
	for (u8 depth_value=1;depth_value < my_NN->depth; depth_value++)
     39a:	8b 81       	ldd	r24, Y+3	; 0x03
     39c:	8f 5f       	subi	r24, 0xFF	; 255
     39e:	8b 83       	std	Y+3, r24	; 0x03
     3a0:	88 85       	ldd	r24, Y+8	; 0x08
     3a2:	99 85       	ldd	r25, Y+9	; 0x09
     3a4:	8f 56       	subi	r24, 0x6F	; 111
     3a6:	93 4f       	sbci	r25, 0xF3	; 243
     3a8:	dc 01       	movw	r26, r24
     3aa:	9c 91       	ld	r25, X
     3ac:	8b 81       	ldd	r24, Y+3	; 0x03
     3ae:	89 17       	cp	r24, r25
     3b0:	08 f4       	brcc	.+2      	; 0x3b4 <init_Neural_Net+0x290>
     3b2:	48 cf       	rjmp	.-368    	; 0x244 <init_Neural_Net+0x120>
			}
		}
	}

	//init output layer
	my_NN->weights[depth].rows = hidden_neurons_depth[depth-1];
     3b4:	8d 85       	ldd	r24, Y+13	; 0x0d
     3b6:	68 2f       	mov	r22, r24
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	8d 85       	ldd	r24, Y+13	; 0x0d
     3bc:	88 2f       	mov	r24, r24
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	01 97       	sbiw	r24, 0x01	; 1
     3c2:	2b 85       	ldd	r18, Y+11	; 0x0b
     3c4:	3c 85       	ldd	r19, Y+12	; 0x0c
     3c6:	82 0f       	add	r24, r18
     3c8:	93 1f       	adc	r25, r19
     3ca:	dc 01       	movw	r26, r24
     3cc:	ec 91       	ld	r30, X
     3ce:	28 85       	ldd	r18, Y+8	; 0x08
     3d0:	39 85       	ldd	r19, Y+9	; 0x09
     3d2:	42 e9       	ldi	r20, 0x92	; 146
     3d4:	51 e0       	ldi	r21, 0x01	; 1
     3d6:	64 9f       	mul	r22, r20
     3d8:	c0 01       	movw	r24, r0
     3da:	65 9f       	mul	r22, r21
     3dc:	90 0d       	add	r25, r0
     3de:	74 9f       	mul	r23, r20
     3e0:	90 0d       	add	r25, r0
     3e2:	11 24       	eor	r1, r1
     3e4:	82 0f       	add	r24, r18
     3e6:	93 1f       	adc	r25, r19
     3e8:	8f 56       	subi	r24, 0x6F	; 111
     3ea:	9e 4f       	sbci	r25, 0xFE	; 254
     3ec:	dc 01       	movw	r26, r24
     3ee:	ec 93       	st	X, r30
	my_NN->weights[depth].colums = output_length;
     3f0:	8d 85       	ldd	r24, Y+13	; 0x0d
     3f2:	88 2f       	mov	r24, r24
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	28 85       	ldd	r18, Y+8	; 0x08
     3f8:	39 85       	ldd	r19, Y+9	; 0x09
     3fa:	bc 01       	movw	r22, r24
     3fc:	6f 5f       	subi	r22, 0xFF	; 255
     3fe:	7f 4f       	sbci	r23, 0xFF	; 255
     400:	42 e9       	ldi	r20, 0x92	; 146
     402:	51 e0       	ldi	r21, 0x01	; 1
     404:	64 9f       	mul	r22, r20
     406:	c0 01       	movw	r24, r0
     408:	65 9f       	mul	r22, r21
     40a:	90 0d       	add	r25, r0
     40c:	74 9f       	mul	r23, r20
     40e:	90 0d       	add	r25, r0
     410:	11 24       	eor	r1, r1
     412:	82 0f       	add	r24, r18
     414:	93 1f       	adc	r25, r19
     416:	2e 85       	ldd	r18, Y+14	; 0x0e
     418:	fc 01       	movw	r30, r24
     41a:	20 83       	st	Z, r18
	for (u8 row=0;row < my_NN->weights[depth].rows;row++)
     41c:	1e 82       	std	Y+6, r1	; 0x06
     41e:	55 c0       	rjmp	.+170    	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
	{
		for (u8 column =0; column < my_NN->weights[depth].colums;column++)
     420:	1f 82       	std	Y+7, r1	; 0x07
     422:	37 c0       	rjmp	.+110    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
		{
			my_NN->weights[depth].array[row][column] = 0.1;
     424:	8d 85       	ldd	r24, Y+13	; 0x0d
     426:	e8 2f       	mov	r30, r24
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	8e 81       	ldd	r24, Y+6	; 0x06
     42c:	88 2f       	mov	r24, r24
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	2f 81       	ldd	r18, Y+7	; 0x07
     432:	42 2f       	mov	r20, r18
     434:	50 e0       	ldi	r21, 0x00	; 0
     436:	28 85       	ldd	r18, Y+8	; 0x08
     438:	39 85       	ldd	r19, Y+9	; 0x09
     43a:	88 0f       	add	r24, r24
     43c:	99 1f       	adc	r25, r25
     43e:	bc 01       	movw	r22, r24
     440:	66 0f       	add	r22, r22
     442:	77 1f       	adc	r23, r23
     444:	66 0f       	add	r22, r22
     446:	77 1f       	adc	r23, r23
     448:	86 0f       	add	r24, r22
     44a:	97 1f       	adc	r25, r23
     44c:	84 0f       	add	r24, r20
     44e:	95 1f       	adc	r25, r21
     450:	ac 01       	movw	r20, r24
     452:	44 0f       	add	r20, r20
     454:	55 1f       	adc	r21, r21
     456:	44 0f       	add	r20, r20
     458:	55 1f       	adc	r21, r21
     45a:	62 e9       	ldi	r22, 0x92	; 146
     45c:	71 e0       	ldi	r23, 0x01	; 1
     45e:	e6 9f       	mul	r30, r22
     460:	c0 01       	movw	r24, r0
     462:	e7 9f       	mul	r30, r23
     464:	90 0d       	add	r25, r0
     466:	f6 9f       	mul	r31, r22
     468:	90 0d       	add	r25, r0
     46a:	11 24       	eor	r1, r1
     46c:	84 0f       	add	r24, r20
     46e:	95 1f       	adc	r25, r21
     470:	82 0f       	add	r24, r18
     472:	93 1f       	adc	r25, r19
     474:	9c 01       	movw	r18, r24
     476:	2f 5f       	subi	r18, 0xFF	; 255
     478:	3f 4f       	sbci	r19, 0xFF	; 255
     47a:	8d ec       	ldi	r24, 0xCD	; 205
     47c:	9c ec       	ldi	r25, 0xCC	; 204
     47e:	ac ec       	ldi	r26, 0xCC	; 204
     480:	bd e3       	ldi	r27, 0x3D	; 61
     482:	f9 01       	movw	r30, r18
     484:	80 83       	st	Z, r24
     486:	91 83       	std	Z+1, r25	; 0x01
     488:	a2 83       	std	Z+2, r26	; 0x02
     48a:	b3 83       	std	Z+3, r27	; 0x03
	//init output layer
	my_NN->weights[depth].rows = hidden_neurons_depth[depth-1];
	my_NN->weights[depth].colums = output_length;
	for (u8 row=0;row < my_NN->weights[depth].rows;row++)
	{
		for (u8 column =0; column < my_NN->weights[depth].colums;column++)
     48c:	8f 81       	ldd	r24, Y+7	; 0x07
     48e:	8f 5f       	subi	r24, 0xFF	; 255
     490:	8f 83       	std	Y+7, r24	; 0x07
     492:	8d 85       	ldd	r24, Y+13	; 0x0d
     494:	88 2f       	mov	r24, r24
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	28 85       	ldd	r18, Y+8	; 0x08
     49a:	39 85       	ldd	r19, Y+9	; 0x09
     49c:	bc 01       	movw	r22, r24
     49e:	6f 5f       	subi	r22, 0xFF	; 255
     4a0:	7f 4f       	sbci	r23, 0xFF	; 255
     4a2:	42 e9       	ldi	r20, 0x92	; 146
     4a4:	51 e0       	ldi	r21, 0x01	; 1
     4a6:	64 9f       	mul	r22, r20
     4a8:	c0 01       	movw	r24, r0
     4aa:	65 9f       	mul	r22, r21
     4ac:	90 0d       	add	r25, r0
     4ae:	74 9f       	mul	r23, r20
     4b0:	90 0d       	add	r25, r0
     4b2:	11 24       	eor	r1, r1
     4b4:	82 0f       	add	r24, r18
     4b6:	93 1f       	adc	r25, r19
     4b8:	dc 01       	movw	r26, r24
     4ba:	9c 91       	ld	r25, X
     4bc:	8f 81       	ldd	r24, Y+7	; 0x07
     4be:	89 17       	cp	r24, r25
     4c0:	08 f4       	brcc	.+2      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     4c2:	b0 cf       	rjmp	.-160    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	}

	//init output layer
	my_NN->weights[depth].rows = hidden_neurons_depth[depth-1];
	my_NN->weights[depth].colums = output_length;
	for (u8 row=0;row < my_NN->weights[depth].rows;row++)
     4c4:	8e 81       	ldd	r24, Y+6	; 0x06
     4c6:	8f 5f       	subi	r24, 0xFF	; 255
     4c8:	8e 83       	std	Y+6, r24	; 0x06
     4ca:	8d 85       	ldd	r24, Y+13	; 0x0d
     4cc:	68 2f       	mov	r22, r24
     4ce:	70 e0       	ldi	r23, 0x00	; 0
     4d0:	28 85       	ldd	r18, Y+8	; 0x08
     4d2:	39 85       	ldd	r19, Y+9	; 0x09
     4d4:	42 e9       	ldi	r20, 0x92	; 146
     4d6:	51 e0       	ldi	r21, 0x01	; 1
     4d8:	64 9f       	mul	r22, r20
     4da:	c0 01       	movw	r24, r0
     4dc:	65 9f       	mul	r22, r21
     4de:	90 0d       	add	r25, r0
     4e0:	74 9f       	mul	r23, r20
     4e2:	90 0d       	add	r25, r0
     4e4:	11 24       	eor	r1, r1
     4e6:	82 0f       	add	r24, r18
     4e8:	93 1f       	adc	r25, r19
     4ea:	8f 56       	subi	r24, 0x6F	; 111
     4ec:	9e 4f       	sbci	r25, 0xFE	; 254
     4ee:	fc 01       	movw	r30, r24
     4f0:	90 81       	ld	r25, Z
     4f2:	8e 81       	ldd	r24, Y+6	; 0x06
     4f4:	89 17       	cp	r24, r25
     4f6:	08 f4       	brcc	.+2      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     4f8:	93 cf       	rjmp	.-218    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		for (u8 column =0; column < my_NN->weights[depth].colums;column++)
		{
			my_NN->weights[depth].array[row][column] = 0.1;
		}
	}
}
     4fa:	00 00       	nop
     4fc:	62 96       	adiw	r28, 0x12	; 18
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	f8 94       	cli
     502:	de bf       	out	0x3e, r29	; 62
     504:	0f be       	out	0x3f, r0	; 63
     506:	cd bf       	out	0x3d, r28	; 61
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	0f 91       	pop	r16
     50e:	ff 90       	pop	r15
     510:	ef 90       	pop	r14
     512:	df 90       	pop	r13
     514:	cf 90       	pop	r12
     516:	08 95       	ret

00000518 <sigmoid>:

void sigmoid(struct matrix *alpha,struct matrix *z)
{
     518:	ef 92       	push	r14
     51a:	ff 92       	push	r15
     51c:	0f 93       	push	r16
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	00 d0       	rcall	.+0      	; 0x526 <sigmoid+0xe>
     526:	00 d0       	rcall	.+0      	; 0x528 <sigmoid+0x10>
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
     52c:	9c 83       	std	Y+4, r25	; 0x04
     52e:	8b 83       	std	Y+3, r24	; 0x03
     530:	7e 83       	std	Y+6, r23	; 0x06
     532:	6d 83       	std	Y+5, r22	; 0x05
	z->rows = alpha->rows;
     534:	8b 81       	ldd	r24, Y+3	; 0x03
     536:	9c 81       	ldd	r25, Y+4	; 0x04
     538:	80 57       	subi	r24, 0x70	; 112
     53a:	9e 4f       	sbci	r25, 0xFE	; 254
     53c:	fc 01       	movw	r30, r24
     53e:	20 81       	ld	r18, Z
     540:	8d 81       	ldd	r24, Y+5	; 0x05
     542:	9e 81       	ldd	r25, Y+6	; 0x06
     544:	80 57       	subi	r24, 0x70	; 112
     546:	9e 4f       	sbci	r25, 0xFE	; 254
     548:	fc 01       	movw	r30, r24
     54a:	20 83       	st	Z, r18
	z->colums = alpha->colums;
     54c:	8b 81       	ldd	r24, Y+3	; 0x03
     54e:	9c 81       	ldd	r25, Y+4	; 0x04
     550:	8f 56       	subi	r24, 0x6F	; 111
     552:	9e 4f       	sbci	r25, 0xFE	; 254
     554:	fc 01       	movw	r30, r24
     556:	20 81       	ld	r18, Z
     558:	8d 81       	ldd	r24, Y+5	; 0x05
     55a:	9e 81       	ldd	r25, Y+6	; 0x06
     55c:	8f 56       	subi	r24, 0x6F	; 111
     55e:	9e 4f       	sbci	r25, 0xFE	; 254
     560:	fc 01       	movw	r30, r24
     562:	20 83       	st	Z, r18
	for (u8 row=0;row < alpha->rows;row++)
     564:	19 82       	std	Y+1, r1	; 0x01
     566:	69 c0       	rjmp	.+210    	; 0x63a <sigmoid+0x122>
	{
		for (u8 column =0; column < alpha->colums;column++)
     568:	1a 82       	std	Y+2, r1	; 0x02
     56a:	5a c0       	rjmp	.+180    	; 0x620 <sigmoid+0x108>
		{
			z->array[row][column] = (1/(1+exp(-1*alpha->array[row][column])));
     56c:	89 81       	ldd	r24, Y+1	; 0x01
     56e:	e8 2e       	mov	r14, r24
     570:	f1 2c       	mov	r15, r1
     572:	8a 81       	ldd	r24, Y+2	; 0x02
     574:	08 2f       	mov	r16, r24
     576:	10 e0       	ldi	r17, 0x00	; 0
     578:	89 81       	ldd	r24, Y+1	; 0x01
     57a:	88 2f       	mov	r24, r24
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	2a 81       	ldd	r18, Y+2	; 0x02
     580:	42 2f       	mov	r20, r18
     582:	50 e0       	ldi	r21, 0x00	; 0
     584:	2b 81       	ldd	r18, Y+3	; 0x03
     586:	3c 81       	ldd	r19, Y+4	; 0x04
     588:	88 0f       	add	r24, r24
     58a:	99 1f       	adc	r25, r25
     58c:	bc 01       	movw	r22, r24
     58e:	66 0f       	add	r22, r22
     590:	77 1f       	adc	r23, r23
     592:	66 0f       	add	r22, r22
     594:	77 1f       	adc	r23, r23
     596:	86 0f       	add	r24, r22
     598:	97 1f       	adc	r25, r23
     59a:	84 0f       	add	r24, r20
     59c:	95 1f       	adc	r25, r21
     59e:	88 0f       	add	r24, r24
     5a0:	99 1f       	adc	r25, r25
     5a2:	88 0f       	add	r24, r24
     5a4:	99 1f       	adc	r25, r25
     5a6:	82 0f       	add	r24, r18
     5a8:	93 1f       	adc	r25, r19
     5aa:	fc 01       	movw	r30, r24
     5ac:	80 81       	ld	r24, Z
     5ae:	91 81       	ldd	r25, Z+1	; 0x01
     5b0:	a2 81       	ldd	r26, Z+2	; 0x02
     5b2:	b3 81       	ldd	r27, Z+3	; 0x03
     5b4:	b0 58       	subi	r27, 0x80	; 128
     5b6:	bc 01       	movw	r22, r24
     5b8:	cd 01       	movw	r24, r26
     5ba:	06 d4       	rcall	.+2060   	; 0xdc8 <exp>
     5bc:	dc 01       	movw	r26, r24
     5be:	cb 01       	movw	r24, r22
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	40 e8       	ldi	r20, 0x80	; 128
     5c6:	5f e3       	ldi	r21, 0x3F	; 63
     5c8:	bc 01       	movw	r22, r24
     5ca:	cd 01       	movw	r24, r26
     5cc:	2c d3       	rcall	.+1624   	; 0xc26 <__addsf3>
     5ce:	dc 01       	movw	r26, r24
     5d0:	cb 01       	movw	r24, r22
     5d2:	9c 01       	movw	r18, r24
     5d4:	ad 01       	movw	r20, r26
     5d6:	60 e0       	ldi	r22, 0x00	; 0
     5d8:	70 e0       	ldi	r23, 0x00	; 0
     5da:	80 e8       	ldi	r24, 0x80	; 128
     5dc:	9f e3       	ldi	r25, 0x3F	; 63
     5de:	87 d3       	rcall	.+1806   	; 0xcee <__divsf3>
     5e0:	dc 01       	movw	r26, r24
     5e2:	cb 01       	movw	r24, r22
     5e4:	9c 01       	movw	r18, r24
     5e6:	ad 01       	movw	r20, r26
     5e8:	6d 81       	ldd	r22, Y+5	; 0x05
     5ea:	7e 81       	ldd	r23, Y+6	; 0x06
     5ec:	c7 01       	movw	r24, r14
     5ee:	88 0f       	add	r24, r24
     5f0:	99 1f       	adc	r25, r25
     5f2:	fc 01       	movw	r30, r24
     5f4:	ee 0f       	add	r30, r30
     5f6:	ff 1f       	adc	r31, r31
     5f8:	ee 0f       	add	r30, r30
     5fa:	ff 1f       	adc	r31, r31
     5fc:	8e 0f       	add	r24, r30
     5fe:	9f 1f       	adc	r25, r31
     600:	80 0f       	add	r24, r16
     602:	91 1f       	adc	r25, r17
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	88 0f       	add	r24, r24
     60a:	99 1f       	adc	r25, r25
     60c:	86 0f       	add	r24, r22
     60e:	97 1f       	adc	r25, r23
     610:	fc 01       	movw	r30, r24
     612:	20 83       	st	Z, r18
     614:	31 83       	std	Z+1, r19	; 0x01
     616:	42 83       	std	Z+2, r20	; 0x02
     618:	53 83       	std	Z+3, r21	; 0x03
{
	z->rows = alpha->rows;
	z->colums = alpha->colums;
	for (u8 row=0;row < alpha->rows;row++)
	{
		for (u8 column =0; column < alpha->colums;column++)
     61a:	8a 81       	ldd	r24, Y+2	; 0x02
     61c:	8f 5f       	subi	r24, 0xFF	; 255
     61e:	8a 83       	std	Y+2, r24	; 0x02
     620:	8b 81       	ldd	r24, Y+3	; 0x03
     622:	9c 81       	ldd	r25, Y+4	; 0x04
     624:	8f 56       	subi	r24, 0x6F	; 111
     626:	9e 4f       	sbci	r25, 0xFE	; 254
     628:	fc 01       	movw	r30, r24
     62a:	90 81       	ld	r25, Z
     62c:	8a 81       	ldd	r24, Y+2	; 0x02
     62e:	89 17       	cp	r24, r25
     630:	08 f4       	brcc	.+2      	; 0x634 <sigmoid+0x11c>
     632:	9c cf       	rjmp	.-200    	; 0x56c <sigmoid+0x54>

void sigmoid(struct matrix *alpha,struct matrix *z)
{
	z->rows = alpha->rows;
	z->colums = alpha->colums;
	for (u8 row=0;row < alpha->rows;row++)
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	8f 5f       	subi	r24, 0xFF	; 255
     638:	89 83       	std	Y+1, r24	; 0x01
     63a:	8b 81       	ldd	r24, Y+3	; 0x03
     63c:	9c 81       	ldd	r25, Y+4	; 0x04
     63e:	80 57       	subi	r24, 0x70	; 112
     640:	9e 4f       	sbci	r25, 0xFE	; 254
     642:	fc 01       	movw	r30, r24
     644:	90 81       	ld	r25, Z
     646:	89 81       	ldd	r24, Y+1	; 0x01
     648:	89 17       	cp	r24, r25
     64a:	08 f4       	brcc	.+2      	; 0x64e <sigmoid+0x136>
     64c:	8d cf       	rjmp	.-230    	; 0x568 <sigmoid+0x50>
		for (u8 column =0; column < alpha->colums;column++)
		{
			z->array[row][column] = (1/(1+exp(-1*alpha->array[row][column])));
		}
	}
}
     64e:	00 00       	nop
     650:	26 96       	adiw	r28, 0x06	; 6
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	f8 94       	cli
     656:	de bf       	out	0x3e, r29	; 62
     658:	0f be       	out	0x3f, r0	; 63
     65a:	cd bf       	out	0x3d, r28	; 61
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	1f 91       	pop	r17
     662:	0f 91       	pop	r16
     664:	ff 90       	pop	r15
     666:	ef 90       	pop	r14
     668:	08 95       	ret

0000066a <fead_forward>:

struct matrix fead_forward(struct matrix *X,struct Neural_Net *my_NN)
{
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
     66e:	cd b7       	in	r28, 0x3d	; 61
     670:	de b7       	in	r29, 0x3e	; 62
     672:	cf 54       	subi	r28, 0x4F	; 79
     674:	d6 40       	sbci	r29, 0x06	; 6
     676:	0f b6       	in	r0, 0x3f	; 63
     678:	f8 94       	cli
     67a:	de bf       	out	0x3e, r29	; 62
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	cd bf       	out	0x3d, r28	; 61
     680:	9e 01       	movw	r18, r28
     682:	28 54       	subi	r18, 0x48	; 72
     684:	3b 4f       	sbci	r19, 0xFB	; 251
     686:	f9 01       	movw	r30, r18
     688:	91 83       	std	Z+1, r25	; 0x01
     68a:	80 83       	st	Z, r24
     68c:	ce 01       	movw	r24, r28
     68e:	86 54       	subi	r24, 0x46	; 70
     690:	9b 4f       	sbci	r25, 0xFB	; 251
     692:	fc 01       	movw	r30, r24
     694:	71 83       	std	Z+1, r23	; 0x01
     696:	60 83       	st	Z, r22
     698:	ce 01       	movw	r24, r28
     69a:	84 54       	subi	r24, 0x44	; 68
     69c:	9b 4f       	sbci	r25, 0xFB	; 251
     69e:	fc 01       	movw	r30, r24
     6a0:	51 83       	std	Z+1, r21	; 0x01
     6a2:	40 83       	st	Z, r20
	struct matrix alpha;
	struct matrix z;

	alpha = multiply(X,&my_NN->weights[0]);
     6a4:	ce 01       	movw	r24, r28
     6a6:	84 54       	subi	r24, 0x44	; 68
     6a8:	9b 4f       	sbci	r25, 0xFB	; 251
     6aa:	fc 01       	movw	r30, r24
     6ac:	80 81       	ld	r24, Z
     6ae:	91 81       	ldd	r25, Z+1	; 0x01
     6b0:	ac 01       	movw	r20, r24
     6b2:	4f 5f       	subi	r20, 0xFF	; 255
     6b4:	5f 4f       	sbci	r21, 0xFF	; 255
     6b6:	9e 01       	movw	r18, r28
     6b8:	22 54       	subi	r18, 0x42	; 66
     6ba:	3b 4f       	sbci	r19, 0xFB	; 251
     6bc:	ce 01       	movw	r24, r28
     6be:	86 54       	subi	r24, 0x46	; 70
     6c0:	9b 4f       	sbci	r25, 0xFB	; 251
     6c2:	fc 01       	movw	r30, r24
     6c4:	80 81       	ld	r24, Z
     6c6:	91 81       	ldd	r25, Z+1	; 0x01
     6c8:	bc 01       	movw	r22, r24
     6ca:	c9 01       	movw	r24, r18
     6cc:	4f d1       	rcall	.+670    	; 0x96c <multiply>
     6ce:	9e 01       	movw	r18, r28
     6d0:	22 54       	subi	r18, 0x42	; 66
     6d2:	3b 4f       	sbci	r19, 0xFB	; 251
     6d4:	82 e9       	ldi	r24, 0x92	; 146
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	f9 01       	movw	r30, r18
     6da:	de 01       	movw	r26, r28
     6dc:	12 96       	adiw	r26, 0x02	; 2
     6de:	01 90       	ld	r0, Z+
     6e0:	0d 92       	st	X+, r0
     6e2:	01 97       	sbiw	r24, 0x01	; 1
     6e4:	e1 f7       	brne	.-8      	; 0x6de <fead_forward+0x74>
	sigmoid(&alpha,&z);
     6e6:	9e 01       	movw	r18, r28
     6e8:	2c 56       	subi	r18, 0x6C	; 108
     6ea:	3e 4f       	sbci	r19, 0xFE	; 254
     6ec:	ce 01       	movw	r24, r28
     6ee:	02 96       	adiw	r24, 0x02	; 2
     6f0:	b9 01       	movw	r22, r18
     6f2:	12 df       	rcall	.-476    	; 0x518 <sigmoid>
	
 	for (unsigned char layer =1;layer < my_NN->depth;layer++)
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	89 83       	std	Y+1, r24	; 0x01
     6f8:	34 c0       	rjmp	.+104    	; 0x762 <fead_forward+0xf8>
 	{
	 	alpha = multiply(&z,&my_NN->weights[layer]);
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
     6fc:	68 2f       	mov	r22, r24
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	9e 01       	movw	r18, r28
     702:	24 54       	subi	r18, 0x44	; 68
     704:	3b 4f       	sbci	r19, 0xFB	; 251
     706:	42 e9       	ldi	r20, 0x92	; 146
     708:	51 e0       	ldi	r21, 0x01	; 1
     70a:	64 9f       	mul	r22, r20
     70c:	c0 01       	movw	r24, r0
     70e:	65 9f       	mul	r22, r21
     710:	90 0d       	add	r25, r0
     712:	74 9f       	mul	r23, r20
     714:	90 0d       	add	r25, r0
     716:	11 24       	eor	r1, r1
     718:	01 96       	adiw	r24, 0x01	; 1
     71a:	f9 01       	movw	r30, r18
     71c:	20 81       	ld	r18, Z
     71e:	31 81       	ldd	r19, Z+1	; 0x01
     720:	a9 01       	movw	r20, r18
     722:	48 0f       	add	r20, r24
     724:	59 1f       	adc	r21, r25
     726:	ce 01       	movw	r24, r28
     728:	82 54       	subi	r24, 0x42	; 66
     72a:	9b 4f       	sbci	r25, 0xFB	; 251
     72c:	9e 01       	movw	r18, r28
     72e:	2c 56       	subi	r18, 0x6C	; 108
     730:	3e 4f       	sbci	r19, 0xFE	; 254
     732:	b9 01       	movw	r22, r18
     734:	1b d1       	rcall	.+566    	; 0x96c <multiply>
     736:	9e 01       	movw	r18, r28
     738:	22 54       	subi	r18, 0x42	; 66
     73a:	3b 4f       	sbci	r19, 0xFB	; 251
     73c:	82 e9       	ldi	r24, 0x92	; 146
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	f9 01       	movw	r30, r18
     742:	de 01       	movw	r26, r28
     744:	12 96       	adiw	r26, 0x02	; 2
     746:	01 90       	ld	r0, Z+
     748:	0d 92       	st	X+, r0
     74a:	01 97       	sbiw	r24, 0x01	; 1
     74c:	e1 f7       	brne	.-8      	; 0x746 <fead_forward+0xdc>
		sigmoid(&alpha,&z);
     74e:	9e 01       	movw	r18, r28
     750:	2c 56       	subi	r18, 0x6C	; 108
     752:	3e 4f       	sbci	r19, 0xFE	; 254
     754:	ce 01       	movw	r24, r28
     756:	02 96       	adiw	r24, 0x02	; 2
     758:	b9 01       	movw	r22, r18
     75a:	de de       	rcall	.-580    	; 0x518 <sigmoid>
	struct matrix z;

	alpha = multiply(X,&my_NN->weights[0]);
	sigmoid(&alpha,&z);
	
 	for (unsigned char layer =1;layer < my_NN->depth;layer++)
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	8f 5f       	subi	r24, 0xFF	; 255
     760:	89 83       	std	Y+1, r24	; 0x01
     762:	ce 01       	movw	r24, r28
     764:	84 54       	subi	r24, 0x44	; 68
     766:	9b 4f       	sbci	r25, 0xFB	; 251
     768:	fc 01       	movw	r30, r24
     76a:	80 81       	ld	r24, Z
     76c:	91 81       	ldd	r25, Z+1	; 0x01
     76e:	8f 56       	subi	r24, 0x6F	; 111
     770:	93 4f       	sbci	r25, 0xF3	; 243
     772:	fc 01       	movw	r30, r24
     774:	90 81       	ld	r25, Z
     776:	89 81       	ldd	r24, Y+1	; 0x01
     778:	89 17       	cp	r24, r25
     77a:	08 f4       	brcc	.+2      	; 0x77e <fead_forward+0x114>
     77c:	be cf       	rjmp	.-132    	; 0x6fa <fead_forward+0x90>
 	{
	 	alpha = multiply(&z,&my_NN->weights[layer]);
		sigmoid(&alpha,&z);
 	}
	struct matrix yHat;
	alpha = multiply(&z,&my_NN->weights[my_NN->depth]);
     77e:	ce 01       	movw	r24, r28
     780:	84 54       	subi	r24, 0x44	; 68
     782:	9b 4f       	sbci	r25, 0xFB	; 251
     784:	fc 01       	movw	r30, r24
     786:	80 81       	ld	r24, Z
     788:	91 81       	ldd	r25, Z+1	; 0x01
     78a:	8f 56       	subi	r24, 0x6F	; 111
     78c:	93 4f       	sbci	r25, 0xF3	; 243
     78e:	fc 01       	movw	r30, r24
     790:	80 81       	ld	r24, Z
     792:	68 2f       	mov	r22, r24
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	9e 01       	movw	r18, r28
     798:	24 54       	subi	r18, 0x44	; 68
     79a:	3b 4f       	sbci	r19, 0xFB	; 251
     79c:	42 e9       	ldi	r20, 0x92	; 146
     79e:	51 e0       	ldi	r21, 0x01	; 1
     7a0:	64 9f       	mul	r22, r20
     7a2:	c0 01       	movw	r24, r0
     7a4:	65 9f       	mul	r22, r21
     7a6:	90 0d       	add	r25, r0
     7a8:	74 9f       	mul	r23, r20
     7aa:	90 0d       	add	r25, r0
     7ac:	11 24       	eor	r1, r1
     7ae:	01 96       	adiw	r24, 0x01	; 1
     7b0:	f9 01       	movw	r30, r18
     7b2:	20 81       	ld	r18, Z
     7b4:	31 81       	ldd	r19, Z+1	; 0x01
     7b6:	a9 01       	movw	r20, r18
     7b8:	48 0f       	add	r20, r24
     7ba:	59 1f       	adc	r21, r25
     7bc:	ce 01       	movw	r24, r28
     7be:	82 54       	subi	r24, 0x42	; 66
     7c0:	9b 4f       	sbci	r25, 0xFB	; 251
     7c2:	9e 01       	movw	r18, r28
     7c4:	2c 56       	subi	r18, 0x6C	; 108
     7c6:	3e 4f       	sbci	r19, 0xFE	; 254
     7c8:	b9 01       	movw	r22, r18
     7ca:	d0 d0       	rcall	.+416    	; 0x96c <multiply>
     7cc:	9e 01       	movw	r18, r28
     7ce:	22 54       	subi	r18, 0x42	; 66
     7d0:	3b 4f       	sbci	r19, 0xFB	; 251
     7d2:	82 e9       	ldi	r24, 0x92	; 146
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	f9 01       	movw	r30, r18
     7d8:	de 01       	movw	r26, r28
     7da:	12 96       	adiw	r26, 0x02	; 2
     7dc:	01 90       	ld	r0, Z+
     7de:	0d 92       	st	X+, r0
     7e0:	01 97       	sbiw	r24, 0x01	; 1
     7e2:	e1 f7       	brne	.-8      	; 0x7dc <fead_forward+0x172>
	sigmoid(&alpha,&yHat);
     7e4:	9e 01       	movw	r18, r28
     7e6:	2a 5d       	subi	r18, 0xDA	; 218
     7e8:	3c 4f       	sbci	r19, 0xFC	; 252
     7ea:	ce 01       	movw	r24, r28
     7ec:	02 96       	adiw	r24, 0x02	; 2
     7ee:	b9 01       	movw	r22, r18
     7f0:	93 de       	rcall	.-730    	; 0x518 <sigmoid>
	return yHat;
     7f2:	ce 01       	movw	r24, r28
     7f4:	88 54       	subi	r24, 0x48	; 72
     7f6:	9b 4f       	sbci	r25, 0xFB	; 251
     7f8:	fc 01       	movw	r30, r24
     7fa:	20 81       	ld	r18, Z
     7fc:	31 81       	ldd	r19, Z+1	; 0x01
     7fe:	ae 01       	movw	r20, r28
     800:	4a 5d       	subi	r20, 0xDA	; 218
     802:	5c 4f       	sbci	r21, 0xFC	; 252
     804:	82 e9       	ldi	r24, 0x92	; 146
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	fa 01       	movw	r30, r20
     80a:	d9 01       	movw	r26, r18
     80c:	01 90       	ld	r0, Z+
     80e:	0d 92       	st	X+, r0
     810:	01 97       	sbiw	r24, 0x01	; 1
     812:	e1 f7       	brne	.-8      	; 0x80c <fead_forward+0x1a2>
}
     814:	ce 01       	movw	r24, r28
     816:	88 54       	subi	r24, 0x48	; 72
     818:	9b 4f       	sbci	r25, 0xFB	; 251
     81a:	fc 01       	movw	r30, r24
     81c:	80 81       	ld	r24, Z
     81e:	91 81       	ldd	r25, Z+1	; 0x01
     820:	c1 5b       	subi	r28, 0xB1	; 177
     822:	d9 4f       	sbci	r29, 0xF9	; 249
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	f8 94       	cli
     828:	de bf       	out	0x3e, r29	; 62
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	cd bf       	out	0x3d, r28	; 61
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	08 95       	ret

00000834 <main>:

int main(void)
{
     834:	cf 92       	push	r12
     836:	df 92       	push	r13
     838:	ef 92       	push	r14
     83a:	ff 92       	push	r15
     83c:	0f 93       	push	r16
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62
     846:	cf 5b       	subi	r28, 0xBF	; 191
     848:	df 40       	sbci	r29, 0x0F	; 15
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
	DDRH = 0xFF;
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	2f ef       	ldi	r18, 0xFF	; 255
     85a:	fc 01       	movw	r30, r24
     85c:	20 83       	st	Z, r18
	PORTH = 0;
     85e:	82 e0       	ldi	r24, 0x02	; 2
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	fc 01       	movw	r30, r24
     864:	10 82       	st	Z, r1

	struct Neural_Net NN;
	u8 hidden_neurons[] = {2,3,2};
     866:	ce 01       	movw	r24, r28
     868:	87 56       	subi	r24, 0x67	; 103
     86a:	93 4f       	sbci	r25, 0xF3	; 243
     86c:	22 e0       	ldi	r18, 0x02	; 2
     86e:	fc 01       	movw	r30, r24
     870:	20 83       	st	Z, r18
     872:	ce 01       	movw	r24, r28
     874:	87 56       	subi	r24, 0x67	; 103
     876:	93 4f       	sbci	r25, 0xF3	; 243
     878:	23 e0       	ldi	r18, 0x03	; 3
     87a:	fc 01       	movw	r30, r24
     87c:	21 83       	std	Z+1, r18	; 0x01
     87e:	ce 01       	movw	r24, r28
     880:	87 56       	subi	r24, 0x67	; 103
     882:	93 4f       	sbci	r25, 0xF3	; 243
     884:	22 e0       	ldi	r18, 0x02	; 2
     886:	fc 01       	movw	r30, r24
     888:	22 83       	std	Z+2, r18	; 0x02
	init_Neural_Net(&NN,8,hidden_neurons,3,8,0.01);
     88a:	ae 01       	movw	r20, r28
     88c:	47 56       	subi	r20, 0x67	; 103
     88e:	53 4f       	sbci	r21, 0xF3	; 243
     890:	ce 01       	movw	r24, r28
     892:	02 96       	adiw	r24, 0x02	; 2
     894:	0f 2e       	mov	r0, r31
     896:	fa e0       	ldi	r31, 0x0A	; 10
     898:	cf 2e       	mov	r12, r31
     89a:	f7 ed       	ldi	r31, 0xD7	; 215
     89c:	df 2e       	mov	r13, r31
     89e:	f3 e2       	ldi	r31, 0x23	; 35
     8a0:	ef 2e       	mov	r14, r31
     8a2:	fc e3       	ldi	r31, 0x3C	; 60
     8a4:	ff 2e       	mov	r15, r31
     8a6:	f0 2d       	mov	r31, r0
     8a8:	08 e0       	ldi	r16, 0x08	; 8
     8aa:	23 e0       	ldi	r18, 0x03	; 3
     8ac:	68 e0       	ldi	r22, 0x08	; 8
     8ae:	3a dc       	rcall	.-1932   	; 0x124 <init_Neural_Net>

	struct matrix X;
	X.rows=5;
     8b0:	ce 01       	movw	r24, r28
     8b2:	84 56       	subi	r24, 0x64	; 100
     8b4:	93 4f       	sbci	r25, 0xF3	; 243
     8b6:	80 57       	subi	r24, 0x70	; 112
     8b8:	9e 4f       	sbci	r25, 0xFE	; 254
     8ba:	25 e0       	ldi	r18, 0x05	; 5
     8bc:	fc 01       	movw	r30, r24
     8be:	20 83       	st	Z, r18
	X.colums=8;
     8c0:	ce 01       	movw	r24, r28
     8c2:	84 56       	subi	r24, 0x64	; 100
     8c4:	93 4f       	sbci	r25, 0xF3	; 243
     8c6:	8f 56       	subi	r24, 0x6F	; 111
     8c8:	9e 4f       	sbci	r25, 0xFE	; 254
     8ca:	28 e0       	ldi	r18, 0x08	; 8
     8cc:	fc 01       	movw	r30, r24
     8ce:	20 83       	st	Z, r18
	for (u8 row=0;row<X.rows;row++)
     8d0:	19 82       	std	Y+1, r1	; 0x01
     8d2:	26 c0       	rjmp	.+76     	; 0x920 <main+0xec>
	{
		X.array[row][row] = 1;
     8d4:	89 81       	ldd	r24, Y+1	; 0x01
     8d6:	88 2f       	mov	r24, r24
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	29 81       	ldd	r18, Y+1	; 0x01
     8dc:	42 2f       	mov	r20, r18
     8de:	50 e0       	ldi	r21, 0x00	; 0
     8e0:	9e 01       	movw	r18, r28
     8e2:	24 56       	subi	r18, 0x64	; 100
     8e4:	33 4f       	sbci	r19, 0xF3	; 243
     8e6:	88 0f       	add	r24, r24
     8e8:	99 1f       	adc	r25, r25
     8ea:	bc 01       	movw	r22, r24
     8ec:	66 0f       	add	r22, r22
     8ee:	77 1f       	adc	r23, r23
     8f0:	66 0f       	add	r22, r22
     8f2:	77 1f       	adc	r23, r23
     8f4:	86 0f       	add	r24, r22
     8f6:	97 1f       	adc	r25, r23
     8f8:	84 0f       	add	r24, r20
     8fa:	95 1f       	adc	r25, r21
     8fc:	88 0f       	add	r24, r24
     8fe:	99 1f       	adc	r25, r25
     900:	88 0f       	add	r24, r24
     902:	99 1f       	adc	r25, r25
     904:	28 0f       	add	r18, r24
     906:	39 1f       	adc	r19, r25
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e8       	ldi	r26, 0x80	; 128
     90e:	bf e3       	ldi	r27, 0x3F	; 63
     910:	f9 01       	movw	r30, r18
     912:	80 83       	st	Z, r24
     914:	91 83       	std	Z+1, r25	; 0x01
     916:	a2 83       	std	Z+2, r26	; 0x02
     918:	b3 83       	std	Z+3, r27	; 0x03
	init_Neural_Net(&NN,8,hidden_neurons,3,8,0.01);

	struct matrix X;
	X.rows=5;
	X.colums=8;
	for (u8 row=0;row<X.rows;row++)
     91a:	89 81       	ldd	r24, Y+1	; 0x01
     91c:	8f 5f       	subi	r24, 0xFF	; 255
     91e:	89 83       	std	Y+1, r24	; 0x01
     920:	ce 01       	movw	r24, r28
     922:	84 56       	subi	r24, 0x64	; 100
     924:	93 4f       	sbci	r25, 0xF3	; 243
     926:	80 57       	subi	r24, 0x70	; 112
     928:	9e 4f       	sbci	r25, 0xFE	; 254
     92a:	fc 01       	movw	r30, r24
     92c:	90 81       	ld	r25, Z
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	89 17       	cp	r24, r25
     932:	80 f2       	brcs	.-96     	; 0x8d4 <main+0xa0>
	{
		X.array[row][row] = 1;
	}

	fead_forward(&X,&NN);
     934:	ce 01       	movw	r24, r28
     936:	82 5d       	subi	r24, 0xD2	; 210
     938:	91 4f       	sbci	r25, 0xF1	; 241
     93a:	ae 01       	movw	r20, r28
     93c:	4e 5f       	subi	r20, 0xFE	; 254
     93e:	5f 4f       	sbci	r21, 0xFF	; 255
     940:	9e 01       	movw	r18, r28
     942:	24 56       	subi	r18, 0x64	; 100
     944:	33 4f       	sbci	r19, 0xF3	; 243
     946:	b9 01       	movw	r22, r18
     948:	90 de       	rcall	.-736    	; 0x66a <fead_forward>
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	90 e0       	ldi	r25, 0x00	; 0
}
     94e:	c1 54       	subi	r28, 0x41	; 65
     950:	d0 4f       	sbci	r29, 0xF0	; 240
     952:	0f b6       	in	r0, 0x3f	; 63
     954:	f8 94       	cli
     956:	de bf       	out	0x3e, r29	; 62
     958:	0f be       	out	0x3f, r0	; 63
     95a:	cd bf       	out	0x3d, r28	; 61
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	0f 91       	pop	r16
     962:	ff 90       	pop	r15
     964:	ef 90       	pop	r14
     966:	df 90       	pop	r13
     968:	cf 90       	pop	r12
     96a:	08 95       	ret

0000096c <multiply>:
 };

 enum boolean {false,true};

 struct matrix multiply(struct matrix *my_matrix1,struct matrix *my_matrix2)
 {
     96c:	af 92       	push	r10
     96e:	bf 92       	push	r11
     970:	cf 92       	push	r12
     972:	df 92       	push	r13
     974:	ef 92       	push	r14
     976:	ff 92       	push	r15
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62
     984:	cc 59       	subi	r28, 0x9C	; 156
     986:	d1 40       	sbci	r29, 0x01	; 1
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	f8 94       	cli
     98c:	de bf       	out	0x3e, r29	; 62
     98e:	0f be       	out	0x3f, r0	; 63
     990:	cd bf       	out	0x3d, r28	; 61
     992:	9e 01       	movw	r18, r28
     994:	29 56       	subi	r18, 0x69	; 105
     996:	3e 4f       	sbci	r19, 0xFE	; 254
     998:	f9 01       	movw	r30, r18
     99a:	91 83       	std	Z+1, r25	; 0x01
     99c:	80 83       	st	Z, r24
     99e:	ce 01       	movw	r24, r28
     9a0:	87 56       	subi	r24, 0x67	; 103
     9a2:	9e 4f       	sbci	r25, 0xFE	; 254
     9a4:	fc 01       	movw	r30, r24
     9a6:	71 83       	std	Z+1, r23	; 0x01
     9a8:	60 83       	st	Z, r22
     9aa:	ce 01       	movw	r24, r28
     9ac:	85 56       	subi	r24, 0x65	; 101
     9ae:	9e 4f       	sbci	r25, 0xFE	; 254
     9b0:	fc 01       	movw	r30, r24
     9b2:	51 83       	std	Z+1, r21	; 0x01
     9b4:	40 83       	st	Z, r20
	struct matrix return_matrix;

	 if (my_matrix1->colums == my_matrix2->rows)
     9b6:	ce 01       	movw	r24, r28
     9b8:	87 56       	subi	r24, 0x67	; 103
     9ba:	9e 4f       	sbci	r25, 0xFE	; 254
     9bc:	fc 01       	movw	r30, r24
     9be:	80 81       	ld	r24, Z
     9c0:	91 81       	ldd	r25, Z+1	; 0x01
     9c2:	8f 56       	subi	r24, 0x6F	; 111
     9c4:	9e 4f       	sbci	r25, 0xFE	; 254
     9c6:	fc 01       	movw	r30, r24
     9c8:	20 81       	ld	r18, Z
     9ca:	ce 01       	movw	r24, r28
     9cc:	85 56       	subi	r24, 0x65	; 101
     9ce:	9e 4f       	sbci	r25, 0xFE	; 254
     9d0:	fc 01       	movw	r30, r24
     9d2:	80 81       	ld	r24, Z
     9d4:	91 81       	ldd	r25, Z+1	; 0x01
     9d6:	80 57       	subi	r24, 0x70	; 112
     9d8:	9e 4f       	sbci	r25, 0xFE	; 254
     9da:	fc 01       	movw	r30, r24
     9dc:	80 81       	ld	r24, Z
     9de:	28 17       	cp	r18, r24
     9e0:	09 f0       	breq	.+2      	; 0x9e4 <multiply+0x78>
     9e2:	f9 c0       	rjmp	.+498    	; 0xbd6 <multiply+0x26a>
	{
		return_matrix.colums = my_matrix2->colums;
     9e4:	ce 01       	movw	r24, r28
     9e6:	85 56       	subi	r24, 0x65	; 101
     9e8:	9e 4f       	sbci	r25, 0xFE	; 254
     9ea:	fc 01       	movw	r30, r24
     9ec:	80 81       	ld	r24, Z
     9ee:	91 81       	ldd	r25, Z+1	; 0x01
     9f0:	8f 56       	subi	r24, 0x6F	; 111
     9f2:	9e 4f       	sbci	r25, 0xFE	; 254
     9f4:	fc 01       	movw	r30, r24
     9f6:	20 81       	ld	r18, Z
     9f8:	ce 01       	movw	r24, r28
     9fa:	8a 56       	subi	r24, 0x6A	; 106
     9fc:	9e 4f       	sbci	r25, 0xFE	; 254
     9fe:	fc 01       	movw	r30, r24
     a00:	20 83       	st	Z, r18
		return_matrix.rows = my_matrix1->rows;
     a02:	ce 01       	movw	r24, r28
     a04:	87 56       	subi	r24, 0x67	; 103
     a06:	9e 4f       	sbci	r25, 0xFE	; 254
     a08:	fc 01       	movw	r30, r24
     a0a:	80 81       	ld	r24, Z
     a0c:	91 81       	ldd	r25, Z+1	; 0x01
     a0e:	80 57       	subi	r24, 0x70	; 112
     a10:	9e 4f       	sbci	r25, 0xFE	; 254
     a12:	fc 01       	movw	r30, r24
     a14:	20 81       	ld	r18, Z
     a16:	ce 01       	movw	r24, r28
     a18:	8b 56       	subi	r24, 0x6B	; 107
     a1a:	9e 4f       	sbci	r25, 0xFE	; 254
     a1c:	fc 01       	movw	r30, r24
     a1e:	20 83       	st	Z, r18

		for (unsigned char row1=0;row1<my_matrix1->rows;row1++)
     a20:	19 82       	std	Y+1, r1	; 0x01
     a22:	bb c0       	rjmp	.+374    	; 0xb9a <multiply+0x22e>
		{
			for (unsigned char column2 =0; column2<my_matrix2->colums;column2++)
     a24:	1a 82       	std	Y+2, r1	; 0x02
     a26:	a8 c0       	rjmp	.+336    	; 0xb78 <multiply+0x20c>
			{
				 unsigned char buffer_value =0;
     a28:	1b 82       	std	Y+3, r1	; 0x03
				 for (unsigned char row2=0;row2<my_matrix2->rows;row2++)
     a2a:	1c 82       	std	Y+4, r1	; 0x04
     a2c:	69 c0       	rjmp	.+210    	; 0xb00 <multiply+0x194>
				 {
					 buffer_value+= my_matrix1->array[row1][row2]*my_matrix2->array[row2][column2];
     a2e:	8b 81       	ldd	r24, Y+3	; 0x03
     a30:	88 2f       	mov	r24, r24
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	09 2e       	mov	r0, r25
     a36:	00 0c       	add	r0, r0
     a38:	aa 0b       	sbc	r26, r26
     a3a:	bb 0b       	sbc	r27, r27
     a3c:	bc 01       	movw	r22, r24
     a3e:	cd 01       	movw	r24, r26
     a40:	1d d2       	rcall	.+1082   	; 0xe7c <__floatsisf>
     a42:	5b 01       	movw	r10, r22
     a44:	6c 01       	movw	r12, r24
     a46:	89 81       	ldd	r24, Y+1	; 0x01
     a48:	68 2f       	mov	r22, r24
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	8c 81       	ldd	r24, Y+4	; 0x04
     a4e:	48 2f       	mov	r20, r24
     a50:	50 e0       	ldi	r21, 0x00	; 0
     a52:	ce 01       	movw	r24, r28
     a54:	87 56       	subi	r24, 0x67	; 103
     a56:	9e 4f       	sbci	r25, 0xFE	; 254
     a58:	fc 01       	movw	r30, r24
     a5a:	20 81       	ld	r18, Z
     a5c:	31 81       	ldd	r19, Z+1	; 0x01
     a5e:	cb 01       	movw	r24, r22
     a60:	88 0f       	add	r24, r24
     a62:	99 1f       	adc	r25, r25
     a64:	bc 01       	movw	r22, r24
     a66:	66 0f       	add	r22, r22
     a68:	77 1f       	adc	r23, r23
     a6a:	66 0f       	add	r22, r22
     a6c:	77 1f       	adc	r23, r23
     a6e:	86 0f       	add	r24, r22
     a70:	97 1f       	adc	r25, r23
     a72:	84 0f       	add	r24, r20
     a74:	95 1f       	adc	r25, r21
     a76:	88 0f       	add	r24, r24
     a78:	99 1f       	adc	r25, r25
     a7a:	88 0f       	add	r24, r24
     a7c:	99 1f       	adc	r25, r25
     a7e:	82 0f       	add	r24, r18
     a80:	93 1f       	adc	r25, r19
     a82:	fc 01       	movw	r30, r24
     a84:	e0 80       	ld	r14, Z
     a86:	f1 80       	ldd	r15, Z+1	; 0x01
     a88:	02 81       	ldd	r16, Z+2	; 0x02
     a8a:	13 81       	ldd	r17, Z+3	; 0x03
     a8c:	8c 81       	ldd	r24, Y+4	; 0x04
     a8e:	68 2f       	mov	r22, r24
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	8a 81       	ldd	r24, Y+2	; 0x02
     a94:	48 2f       	mov	r20, r24
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	ce 01       	movw	r24, r28
     a9a:	85 56       	subi	r24, 0x65	; 101
     a9c:	9e 4f       	sbci	r25, 0xFE	; 254
     a9e:	fc 01       	movw	r30, r24
     aa0:	20 81       	ld	r18, Z
     aa2:	31 81       	ldd	r19, Z+1	; 0x01
     aa4:	cb 01       	movw	r24, r22
     aa6:	88 0f       	add	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	bc 01       	movw	r22, r24
     aac:	66 0f       	add	r22, r22
     aae:	77 1f       	adc	r23, r23
     ab0:	66 0f       	add	r22, r22
     ab2:	77 1f       	adc	r23, r23
     ab4:	86 0f       	add	r24, r22
     ab6:	97 1f       	adc	r25, r23
     ab8:	84 0f       	add	r24, r20
     aba:	95 1f       	adc	r25, r21
     abc:	88 0f       	add	r24, r24
     abe:	99 1f       	adc	r25, r25
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	82 0f       	add	r24, r18
     ac6:	93 1f       	adc	r25, r19
     ac8:	fc 01       	movw	r30, r24
     aca:	80 81       	ld	r24, Z
     acc:	91 81       	ldd	r25, Z+1	; 0x01
     ace:	a2 81       	ldd	r26, Z+2	; 0x02
     ad0:	b3 81       	ldd	r27, Z+3	; 0x03
     ad2:	9c 01       	movw	r18, r24
     ad4:	ad 01       	movw	r20, r26
     ad6:	c8 01       	movw	r24, r16
     ad8:	b7 01       	movw	r22, r14
     ada:	f1 d2       	rcall	.+1506   	; 0x10be <__mulsf3>
     adc:	dc 01       	movw	r26, r24
     ade:	cb 01       	movw	r24, r22
     ae0:	9c 01       	movw	r18, r24
     ae2:	ad 01       	movw	r20, r26
     ae4:	c6 01       	movw	r24, r12
     ae6:	b5 01       	movw	r22, r10
     ae8:	9e d0       	rcall	.+316    	; 0xc26 <__addsf3>
     aea:	dc 01       	movw	r26, r24
     aec:	cb 01       	movw	r24, r22
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	96 d1       	rcall	.+812    	; 0xe20 <__fixunssfsi>
     af4:	dc 01       	movw	r26, r24
     af6:	cb 01       	movw	r24, r22
     af8:	8b 83       	std	Y+3, r24	; 0x03
		for (unsigned char row1=0;row1<my_matrix1->rows;row1++)
		{
			for (unsigned char column2 =0; column2<my_matrix2->colums;column2++)
			{
				 unsigned char buffer_value =0;
				 for (unsigned char row2=0;row2<my_matrix2->rows;row2++)
     afa:	8c 81       	ldd	r24, Y+4	; 0x04
     afc:	8f 5f       	subi	r24, 0xFF	; 255
     afe:	8c 83       	std	Y+4, r24	; 0x04
     b00:	ce 01       	movw	r24, r28
     b02:	85 56       	subi	r24, 0x65	; 101
     b04:	9e 4f       	sbci	r25, 0xFE	; 254
     b06:	fc 01       	movw	r30, r24
     b08:	80 81       	ld	r24, Z
     b0a:	91 81       	ldd	r25, Z+1	; 0x01
     b0c:	80 57       	subi	r24, 0x70	; 112
     b0e:	9e 4f       	sbci	r25, 0xFE	; 254
     b10:	fc 01       	movw	r30, r24
     b12:	90 81       	ld	r25, Z
     b14:	8c 81       	ldd	r24, Y+4	; 0x04
     b16:	89 17       	cp	r24, r25
     b18:	08 f4       	brcc	.+2      	; 0xb1c <multiply+0x1b0>
     b1a:	89 cf       	rjmp	.-238    	; 0xa2e <multiply+0xc2>
				 {
					 buffer_value+= my_matrix1->array[row1][row2]*my_matrix2->array[row2][column2];
				 }
				 return_matrix.array[row1][column2] = buffer_value;
     b1c:	89 81       	ldd	r24, Y+1	; 0x01
     b1e:	e8 2e       	mov	r14, r24
     b20:	f1 2c       	mov	r15, r1
     b22:	8a 81       	ldd	r24, Y+2	; 0x02
     b24:	08 2f       	mov	r16, r24
     b26:	10 e0       	ldi	r17, 0x00	; 0
     b28:	8b 81       	ldd	r24, Y+3	; 0x03
     b2a:	88 2f       	mov	r24, r24
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	a0 e0       	ldi	r26, 0x00	; 0
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	bc 01       	movw	r22, r24
     b34:	cd 01       	movw	r24, r26
     b36:	a0 d1       	rcall	.+832    	; 0xe78 <__floatunsisf>
     b38:	9b 01       	movw	r18, r22
     b3a:	ac 01       	movw	r20, r24
     b3c:	c7 01       	movw	r24, r14
     b3e:	88 0f       	add	r24, r24
     b40:	99 1f       	adc	r25, r25
     b42:	bc 01       	movw	r22, r24
     b44:	66 0f       	add	r22, r22
     b46:	77 1f       	adc	r23, r23
     b48:	66 0f       	add	r22, r22
     b4a:	77 1f       	adc	r23, r23
     b4c:	86 0f       	add	r24, r22
     b4e:	97 1f       	adc	r25, r23
     b50:	80 0f       	add	r24, r16
     b52:	91 1f       	adc	r25, r17
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	be 01       	movw	r22, r28
     b5e:	6f 5f       	subi	r22, 0xFF	; 255
     b60:	7f 4f       	sbci	r23, 0xFF	; 255
     b62:	86 0f       	add	r24, r22
     b64:	97 1f       	adc	r25, r23
     b66:	04 96       	adiw	r24, 0x04	; 4
     b68:	fc 01       	movw	r30, r24
     b6a:	20 83       	st	Z, r18
     b6c:	31 83       	std	Z+1, r19	; 0x01
     b6e:	42 83       	std	Z+2, r20	; 0x02
     b70:	53 83       	std	Z+3, r21	; 0x03
		return_matrix.colums = my_matrix2->colums;
		return_matrix.rows = my_matrix1->rows;

		for (unsigned char row1=0;row1<my_matrix1->rows;row1++)
		{
			for (unsigned char column2 =0; column2<my_matrix2->colums;column2++)
     b72:	8a 81       	ldd	r24, Y+2	; 0x02
     b74:	8f 5f       	subi	r24, 0xFF	; 255
     b76:	8a 83       	std	Y+2, r24	; 0x02
     b78:	ce 01       	movw	r24, r28
     b7a:	85 56       	subi	r24, 0x65	; 101
     b7c:	9e 4f       	sbci	r25, 0xFE	; 254
     b7e:	fc 01       	movw	r30, r24
     b80:	80 81       	ld	r24, Z
     b82:	91 81       	ldd	r25, Z+1	; 0x01
     b84:	8f 56       	subi	r24, 0x6F	; 111
     b86:	9e 4f       	sbci	r25, 0xFE	; 254
     b88:	fc 01       	movw	r30, r24
     b8a:	90 81       	ld	r25, Z
     b8c:	8a 81       	ldd	r24, Y+2	; 0x02
     b8e:	89 17       	cp	r24, r25
     b90:	08 f4       	brcc	.+2      	; 0xb94 <multiply+0x228>
     b92:	4a cf       	rjmp	.-364    	; 0xa28 <multiply+0xbc>
	 if (my_matrix1->colums == my_matrix2->rows)
	{
		return_matrix.colums = my_matrix2->colums;
		return_matrix.rows = my_matrix1->rows;

		for (unsigned char row1=0;row1<my_matrix1->rows;row1++)
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	8f 5f       	subi	r24, 0xFF	; 255
     b98:	89 83       	std	Y+1, r24	; 0x01
     b9a:	ce 01       	movw	r24, r28
     b9c:	87 56       	subi	r24, 0x67	; 103
     b9e:	9e 4f       	sbci	r25, 0xFE	; 254
     ba0:	fc 01       	movw	r30, r24
     ba2:	80 81       	ld	r24, Z
     ba4:	91 81       	ldd	r25, Z+1	; 0x01
     ba6:	80 57       	subi	r24, 0x70	; 112
     ba8:	9e 4f       	sbci	r25, 0xFE	; 254
     baa:	fc 01       	movw	r30, r24
     bac:	90 81       	ld	r25, Z
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	89 17       	cp	r24, r25
     bb2:	08 f4       	brcc	.+2      	; 0xbb6 <multiply+0x24a>
     bb4:	37 cf       	rjmp	.-402    	; 0xa24 <multiply+0xb8>
				 }
				 return_matrix.array[row1][column2] = buffer_value;
				 
			}
		}
		return return_matrix;
     bb6:	ce 01       	movw	r24, r28
     bb8:	89 56       	subi	r24, 0x69	; 105
     bba:	9e 4f       	sbci	r25, 0xFE	; 254
     bbc:	fc 01       	movw	r30, r24
     bbe:	20 81       	ld	r18, Z
     bc0:	31 81       	ldd	r19, Z+1	; 0x01
     bc2:	82 e9       	ldi	r24, 0x92	; 146
     bc4:	91 e0       	ldi	r25, 0x01	; 1
     bc6:	fe 01       	movw	r30, r28
     bc8:	35 96       	adiw	r30, 0x05	; 5
     bca:	d9 01       	movw	r26, r18
     bcc:	01 90       	ld	r0, Z+
     bce:	0d 92       	st	X+, r0
     bd0:	01 97       	sbiw	r24, 0x01	; 1
     bd2:	e1 f7       	brne	.-8      	; 0xbcc <multiply+0x260>
     bd4:	0f c0       	rjmp	.+30     	; 0xbf4 <multiply+0x288>
	}
	return return_matrix;
     bd6:	ce 01       	movw	r24, r28
     bd8:	89 56       	subi	r24, 0x69	; 105
     bda:	9e 4f       	sbci	r25, 0xFE	; 254
     bdc:	fc 01       	movw	r30, r24
     bde:	20 81       	ld	r18, Z
     be0:	31 81       	ldd	r19, Z+1	; 0x01
     be2:	82 e9       	ldi	r24, 0x92	; 146
     be4:	91 e0       	ldi	r25, 0x01	; 1
     be6:	fe 01       	movw	r30, r28
     be8:	35 96       	adiw	r30, 0x05	; 5
     bea:	d9 01       	movw	r26, r18
     bec:	01 90       	ld	r0, Z+
     bee:	0d 92       	st	X+, r0
     bf0:	01 97       	sbiw	r24, 0x01	; 1
     bf2:	e1 f7       	brne	.-8      	; 0xbec <multiply+0x280>
 }
     bf4:	ce 01       	movw	r24, r28
     bf6:	89 56       	subi	r24, 0x69	; 105
     bf8:	9e 4f       	sbci	r25, 0xFE	; 254
     bfa:	fc 01       	movw	r30, r24
     bfc:	80 81       	ld	r24, Z
     bfe:	91 81       	ldd	r25, Z+1	; 0x01
     c00:	c4 56       	subi	r28, 0x64	; 100
     c02:	de 4f       	sbci	r29, 0xFE	; 254
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	f8 94       	cli
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	cd bf       	out	0x3d, r28	; 61
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	1f 91       	pop	r17
     c14:	0f 91       	pop	r16
     c16:	ff 90       	pop	r15
     c18:	ef 90       	pop	r14
     c1a:	df 90       	pop	r13
     c1c:	cf 90       	pop	r12
     c1e:	bf 90       	pop	r11
     c20:	af 90       	pop	r10
     c22:	08 95       	ret

00000c24 <__subsf3>:
     c24:	50 58       	subi	r21, 0x80	; 128

00000c26 <__addsf3>:
     c26:	bb 27       	eor	r27, r27
     c28:	aa 27       	eor	r26, r26
     c2a:	0e d0       	rcall	.+28     	; 0xc48 <__addsf3x>
     c2c:	9e c1       	rjmp	.+828    	; 0xf6a <__fp_round>
     c2e:	8f d1       	rcall	.+798    	; 0xf4e <__fp_pscA>
     c30:	30 f0       	brcs	.+12     	; 0xc3e <__addsf3+0x18>
     c32:	94 d1       	rcall	.+808    	; 0xf5c <__fp_pscB>
     c34:	20 f0       	brcs	.+8      	; 0xc3e <__addsf3+0x18>
     c36:	31 f4       	brne	.+12     	; 0xc44 <__addsf3+0x1e>
     c38:	9f 3f       	cpi	r25, 0xFF	; 255
     c3a:	11 f4       	brne	.+4      	; 0xc40 <__addsf3+0x1a>
     c3c:	1e f4       	brtc	.+6      	; 0xc44 <__addsf3+0x1e>
     c3e:	5f c1       	rjmp	.+702    	; 0xefe <__fp_nan>
     c40:	0e f4       	brtc	.+2      	; 0xc44 <__addsf3+0x1e>
     c42:	e0 95       	com	r30
     c44:	e7 fb       	bst	r30, 7
     c46:	55 c1       	rjmp	.+682    	; 0xef2 <__fp_inf>

00000c48 <__addsf3x>:
     c48:	e9 2f       	mov	r30, r25
     c4a:	a0 d1       	rcall	.+832    	; 0xf8c <__fp_split3>
     c4c:	80 f3       	brcs	.-32     	; 0xc2e <__addsf3+0x8>
     c4e:	ba 17       	cp	r27, r26
     c50:	62 07       	cpc	r22, r18
     c52:	73 07       	cpc	r23, r19
     c54:	84 07       	cpc	r24, r20
     c56:	95 07       	cpc	r25, r21
     c58:	18 f0       	brcs	.+6      	; 0xc60 <__addsf3x+0x18>
     c5a:	71 f4       	brne	.+28     	; 0xc78 <__addsf3x+0x30>
     c5c:	9e f5       	brtc	.+102    	; 0xcc4 <__addsf3x+0x7c>
     c5e:	b8 c1       	rjmp	.+880    	; 0xfd0 <__fp_zero>
     c60:	0e f4       	brtc	.+2      	; 0xc64 <__addsf3x+0x1c>
     c62:	e0 95       	com	r30
     c64:	0b 2e       	mov	r0, r27
     c66:	ba 2f       	mov	r27, r26
     c68:	a0 2d       	mov	r26, r0
     c6a:	0b 01       	movw	r0, r22
     c6c:	b9 01       	movw	r22, r18
     c6e:	90 01       	movw	r18, r0
     c70:	0c 01       	movw	r0, r24
     c72:	ca 01       	movw	r24, r20
     c74:	a0 01       	movw	r20, r0
     c76:	11 24       	eor	r1, r1
     c78:	ff 27       	eor	r31, r31
     c7a:	59 1b       	sub	r21, r25
     c7c:	99 f0       	breq	.+38     	; 0xca4 <__addsf3x+0x5c>
     c7e:	59 3f       	cpi	r21, 0xF9	; 249
     c80:	50 f4       	brcc	.+20     	; 0xc96 <__addsf3x+0x4e>
     c82:	50 3e       	cpi	r21, 0xE0	; 224
     c84:	68 f1       	brcs	.+90     	; 0xce0 <__addsf3x+0x98>
     c86:	1a 16       	cp	r1, r26
     c88:	f0 40       	sbci	r31, 0x00	; 0
     c8a:	a2 2f       	mov	r26, r18
     c8c:	23 2f       	mov	r18, r19
     c8e:	34 2f       	mov	r19, r20
     c90:	44 27       	eor	r20, r20
     c92:	58 5f       	subi	r21, 0xF8	; 248
     c94:	f3 cf       	rjmp	.-26     	; 0xc7c <__addsf3x+0x34>
     c96:	46 95       	lsr	r20
     c98:	37 95       	ror	r19
     c9a:	27 95       	ror	r18
     c9c:	a7 95       	ror	r26
     c9e:	f0 40       	sbci	r31, 0x00	; 0
     ca0:	53 95       	inc	r21
     ca2:	c9 f7       	brne	.-14     	; 0xc96 <__addsf3x+0x4e>
     ca4:	7e f4       	brtc	.+30     	; 0xcc4 <__addsf3x+0x7c>
     ca6:	1f 16       	cp	r1, r31
     ca8:	ba 0b       	sbc	r27, r26
     caa:	62 0b       	sbc	r22, r18
     cac:	73 0b       	sbc	r23, r19
     cae:	84 0b       	sbc	r24, r20
     cb0:	ba f0       	brmi	.+46     	; 0xce0 <__addsf3x+0x98>
     cb2:	91 50       	subi	r25, 0x01	; 1
     cb4:	a1 f0       	breq	.+40     	; 0xcde <__addsf3x+0x96>
     cb6:	ff 0f       	add	r31, r31
     cb8:	bb 1f       	adc	r27, r27
     cba:	66 1f       	adc	r22, r22
     cbc:	77 1f       	adc	r23, r23
     cbe:	88 1f       	adc	r24, r24
     cc0:	c2 f7       	brpl	.-16     	; 0xcb2 <__addsf3x+0x6a>
     cc2:	0e c0       	rjmp	.+28     	; 0xce0 <__addsf3x+0x98>
     cc4:	ba 0f       	add	r27, r26
     cc6:	62 1f       	adc	r22, r18
     cc8:	73 1f       	adc	r23, r19
     cca:	84 1f       	adc	r24, r20
     ccc:	48 f4       	brcc	.+18     	; 0xce0 <__addsf3x+0x98>
     cce:	87 95       	ror	r24
     cd0:	77 95       	ror	r23
     cd2:	67 95       	ror	r22
     cd4:	b7 95       	ror	r27
     cd6:	f7 95       	ror	r31
     cd8:	9e 3f       	cpi	r25, 0xFE	; 254
     cda:	08 f0       	brcs	.+2      	; 0xcde <__addsf3x+0x96>
     cdc:	b3 cf       	rjmp	.-154    	; 0xc44 <__addsf3+0x1e>
     cde:	93 95       	inc	r25
     ce0:	88 0f       	add	r24, r24
     ce2:	08 f0       	brcs	.+2      	; 0xce6 <__addsf3x+0x9e>
     ce4:	99 27       	eor	r25, r25
     ce6:	ee 0f       	add	r30, r30
     ce8:	97 95       	ror	r25
     cea:	87 95       	ror	r24
     cec:	08 95       	ret

00000cee <__divsf3>:
     cee:	0c d0       	rcall	.+24     	; 0xd08 <__divsf3x>
     cf0:	3c c1       	rjmp	.+632    	; 0xf6a <__fp_round>
     cf2:	34 d1       	rcall	.+616    	; 0xf5c <__fp_pscB>
     cf4:	40 f0       	brcs	.+16     	; 0xd06 <__divsf3+0x18>
     cf6:	2b d1       	rcall	.+598    	; 0xf4e <__fp_pscA>
     cf8:	30 f0       	brcs	.+12     	; 0xd06 <__divsf3+0x18>
     cfa:	21 f4       	brne	.+8      	; 0xd04 <__divsf3+0x16>
     cfc:	5f 3f       	cpi	r21, 0xFF	; 255
     cfe:	19 f0       	breq	.+6      	; 0xd06 <__divsf3+0x18>
     d00:	f8 c0       	rjmp	.+496    	; 0xef2 <__fp_inf>
     d02:	51 11       	cpse	r21, r1
     d04:	66 c1       	rjmp	.+716    	; 0xfd2 <__fp_szero>
     d06:	fb c0       	rjmp	.+502    	; 0xefe <__fp_nan>

00000d08 <__divsf3x>:
     d08:	41 d1       	rcall	.+642    	; 0xf8c <__fp_split3>
     d0a:	98 f3       	brcs	.-26     	; 0xcf2 <__divsf3+0x4>

00000d0c <__divsf3_pse>:
     d0c:	99 23       	and	r25, r25
     d0e:	c9 f3       	breq	.-14     	; 0xd02 <__divsf3+0x14>
     d10:	55 23       	and	r21, r21
     d12:	b1 f3       	breq	.-20     	; 0xd00 <__divsf3+0x12>
     d14:	95 1b       	sub	r25, r21
     d16:	55 0b       	sbc	r21, r21
     d18:	bb 27       	eor	r27, r27
     d1a:	aa 27       	eor	r26, r26
     d1c:	62 17       	cp	r22, r18
     d1e:	73 07       	cpc	r23, r19
     d20:	84 07       	cpc	r24, r20
     d22:	38 f0       	brcs	.+14     	; 0xd32 <__divsf3_pse+0x26>
     d24:	9f 5f       	subi	r25, 0xFF	; 255
     d26:	5f 4f       	sbci	r21, 0xFF	; 255
     d28:	22 0f       	add	r18, r18
     d2a:	33 1f       	adc	r19, r19
     d2c:	44 1f       	adc	r20, r20
     d2e:	aa 1f       	adc	r26, r26
     d30:	a9 f3       	breq	.-22     	; 0xd1c <__divsf3_pse+0x10>
     d32:	33 d0       	rcall	.+102    	; 0xd9a <__divsf3_pse+0x8e>
     d34:	0e 2e       	mov	r0, r30
     d36:	3a f0       	brmi	.+14     	; 0xd46 <__divsf3_pse+0x3a>
     d38:	e0 e8       	ldi	r30, 0x80	; 128
     d3a:	30 d0       	rcall	.+96     	; 0xd9c <__divsf3_pse+0x90>
     d3c:	91 50       	subi	r25, 0x01	; 1
     d3e:	50 40       	sbci	r21, 0x00	; 0
     d40:	e6 95       	lsr	r30
     d42:	00 1c       	adc	r0, r0
     d44:	ca f7       	brpl	.-14     	; 0xd38 <__divsf3_pse+0x2c>
     d46:	29 d0       	rcall	.+82     	; 0xd9a <__divsf3_pse+0x8e>
     d48:	fe 2f       	mov	r31, r30
     d4a:	27 d0       	rcall	.+78     	; 0xd9a <__divsf3_pse+0x8e>
     d4c:	66 0f       	add	r22, r22
     d4e:	77 1f       	adc	r23, r23
     d50:	88 1f       	adc	r24, r24
     d52:	bb 1f       	adc	r27, r27
     d54:	26 17       	cp	r18, r22
     d56:	37 07       	cpc	r19, r23
     d58:	48 07       	cpc	r20, r24
     d5a:	ab 07       	cpc	r26, r27
     d5c:	b0 e8       	ldi	r27, 0x80	; 128
     d5e:	09 f0       	breq	.+2      	; 0xd62 <__divsf3_pse+0x56>
     d60:	bb 0b       	sbc	r27, r27
     d62:	80 2d       	mov	r24, r0
     d64:	bf 01       	movw	r22, r30
     d66:	ff 27       	eor	r31, r31
     d68:	93 58       	subi	r25, 0x83	; 131
     d6a:	5f 4f       	sbci	r21, 0xFF	; 255
     d6c:	2a f0       	brmi	.+10     	; 0xd78 <__divsf3_pse+0x6c>
     d6e:	9e 3f       	cpi	r25, 0xFE	; 254
     d70:	51 05       	cpc	r21, r1
     d72:	68 f0       	brcs	.+26     	; 0xd8e <__divsf3_pse+0x82>
     d74:	be c0       	rjmp	.+380    	; 0xef2 <__fp_inf>
     d76:	2d c1       	rjmp	.+602    	; 0xfd2 <__fp_szero>
     d78:	5f 3f       	cpi	r21, 0xFF	; 255
     d7a:	ec f3       	brlt	.-6      	; 0xd76 <__divsf3_pse+0x6a>
     d7c:	98 3e       	cpi	r25, 0xE8	; 232
     d7e:	dc f3       	brlt	.-10     	; 0xd76 <__divsf3_pse+0x6a>
     d80:	86 95       	lsr	r24
     d82:	77 95       	ror	r23
     d84:	67 95       	ror	r22
     d86:	b7 95       	ror	r27
     d88:	f7 95       	ror	r31
     d8a:	9f 5f       	subi	r25, 0xFF	; 255
     d8c:	c9 f7       	brne	.-14     	; 0xd80 <__divsf3_pse+0x74>
     d8e:	88 0f       	add	r24, r24
     d90:	91 1d       	adc	r25, r1
     d92:	96 95       	lsr	r25
     d94:	87 95       	ror	r24
     d96:	97 f9       	bld	r25, 7
     d98:	08 95       	ret
     d9a:	e1 e0       	ldi	r30, 0x01	; 1
     d9c:	66 0f       	add	r22, r22
     d9e:	77 1f       	adc	r23, r23
     da0:	88 1f       	adc	r24, r24
     da2:	bb 1f       	adc	r27, r27
     da4:	62 17       	cp	r22, r18
     da6:	73 07       	cpc	r23, r19
     da8:	84 07       	cpc	r24, r20
     daa:	ba 07       	cpc	r27, r26
     dac:	20 f0       	brcs	.+8      	; 0xdb6 <__divsf3_pse+0xaa>
     dae:	62 1b       	sub	r22, r18
     db0:	73 0b       	sbc	r23, r19
     db2:	84 0b       	sbc	r24, r20
     db4:	ba 0b       	sbc	r27, r26
     db6:	ee 1f       	adc	r30, r30
     db8:	88 f7       	brcc	.-30     	; 0xd9c <__divsf3_pse+0x90>
     dba:	e0 95       	com	r30
     dbc:	08 95       	ret
     dbe:	19 f4       	brne	.+6      	; 0xdc6 <__divsf3_pse+0xba>
     dc0:	0e f0       	brts	.+2      	; 0xdc4 <__divsf3_pse+0xb8>
     dc2:	97 c0       	rjmp	.+302    	; 0xef2 <__fp_inf>
     dc4:	05 c1       	rjmp	.+522    	; 0xfd0 <__fp_zero>
     dc6:	9b c0       	rjmp	.+310    	; 0xefe <__fp_nan>

00000dc8 <exp>:
     dc8:	e9 d0       	rcall	.+466    	; 0xf9c <__fp_splitA>
     dca:	c8 f3       	brcs	.-14     	; 0xdbe <__divsf3_pse+0xb2>
     dcc:	96 38       	cpi	r25, 0x86	; 134
     dce:	c0 f7       	brcc	.-16     	; 0xdc0 <__divsf3_pse+0xb4>
     dd0:	07 f8       	bld	r0, 7
     dd2:	0f 92       	push	r0
     dd4:	e8 94       	clt
     dd6:	2b e3       	ldi	r18, 0x3B	; 59
     dd8:	3a ea       	ldi	r19, 0xAA	; 170
     dda:	48 eb       	ldi	r20, 0xB8	; 184
     ddc:	5f e7       	ldi	r21, 0x7F	; 127
     dde:	7d d1       	rcall	.+762    	; 0x10da <__mulsf3_pse>
     de0:	0f 92       	push	r0
     de2:	0f 92       	push	r0
     de4:	0f 92       	push	r0
     de6:	4d b7       	in	r20, 0x3d	; 61
     de8:	5e b7       	in	r21, 0x3e	; 62
     dea:	0f 92       	push	r0
     dec:	35 d1       	rcall	.+618    	; 0x1058 <modf>
     dee:	e4 ee       	ldi	r30, 0xE4	; 228
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	88 d0       	rcall	.+272    	; 0xf04 <__fp_powser>
     df4:	4f 91       	pop	r20
     df6:	5f 91       	pop	r21
     df8:	ef 91       	pop	r30
     dfa:	ff 91       	pop	r31
     dfc:	e5 95       	asr	r30
     dfe:	ee 1f       	adc	r30, r30
     e00:	ff 1f       	adc	r31, r31
     e02:	49 f0       	breq	.+18     	; 0xe16 <exp+0x4e>
     e04:	fe 57       	subi	r31, 0x7E	; 126
     e06:	e0 68       	ori	r30, 0x80	; 128
     e08:	44 27       	eor	r20, r20
     e0a:	ee 0f       	add	r30, r30
     e0c:	44 1f       	adc	r20, r20
     e0e:	fa 95       	dec	r31
     e10:	e1 f7       	brne	.-8      	; 0xe0a <exp+0x42>
     e12:	41 95       	neg	r20
     e14:	55 0b       	sbc	r21, r21
     e16:	ec d0       	rcall	.+472    	; 0xff0 <ldexp>
     e18:	0f 90       	pop	r0
     e1a:	07 fe       	sbrs	r0, 7
     e1c:	e0 c0       	rjmp	.+448    	; 0xfde <inverse>
     e1e:	08 95       	ret

00000e20 <__fixunssfsi>:
     e20:	bd d0       	rcall	.+378    	; 0xf9c <__fp_splitA>
     e22:	88 f0       	brcs	.+34     	; 0xe46 <__fixunssfsi+0x26>
     e24:	9f 57       	subi	r25, 0x7F	; 127
     e26:	90 f0       	brcs	.+36     	; 0xe4c <__fixunssfsi+0x2c>
     e28:	b9 2f       	mov	r27, r25
     e2a:	99 27       	eor	r25, r25
     e2c:	b7 51       	subi	r27, 0x17	; 23
     e2e:	a0 f0       	brcs	.+40     	; 0xe58 <__fixunssfsi+0x38>
     e30:	d1 f0       	breq	.+52     	; 0xe66 <__fixunssfsi+0x46>
     e32:	66 0f       	add	r22, r22
     e34:	77 1f       	adc	r23, r23
     e36:	88 1f       	adc	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	1a f0       	brmi	.+6      	; 0xe42 <__fixunssfsi+0x22>
     e3c:	ba 95       	dec	r27
     e3e:	c9 f7       	brne	.-14     	; 0xe32 <__fixunssfsi+0x12>
     e40:	12 c0       	rjmp	.+36     	; 0xe66 <__fixunssfsi+0x46>
     e42:	b1 30       	cpi	r27, 0x01	; 1
     e44:	81 f0       	breq	.+32     	; 0xe66 <__fixunssfsi+0x46>
     e46:	c4 d0       	rcall	.+392    	; 0xfd0 <__fp_zero>
     e48:	b1 e0       	ldi	r27, 0x01	; 1
     e4a:	08 95       	ret
     e4c:	c1 c0       	rjmp	.+386    	; 0xfd0 <__fp_zero>
     e4e:	67 2f       	mov	r22, r23
     e50:	78 2f       	mov	r23, r24
     e52:	88 27       	eor	r24, r24
     e54:	b8 5f       	subi	r27, 0xF8	; 248
     e56:	39 f0       	breq	.+14     	; 0xe66 <__fixunssfsi+0x46>
     e58:	b9 3f       	cpi	r27, 0xF9	; 249
     e5a:	cc f3       	brlt	.-14     	; 0xe4e <__fixunssfsi+0x2e>
     e5c:	86 95       	lsr	r24
     e5e:	77 95       	ror	r23
     e60:	67 95       	ror	r22
     e62:	b3 95       	inc	r27
     e64:	d9 f7       	brne	.-10     	; 0xe5c <__fixunssfsi+0x3c>
     e66:	3e f4       	brtc	.+14     	; 0xe76 <__fixunssfsi+0x56>
     e68:	90 95       	com	r25
     e6a:	80 95       	com	r24
     e6c:	70 95       	com	r23
     e6e:	61 95       	neg	r22
     e70:	7f 4f       	sbci	r23, 0xFF	; 255
     e72:	8f 4f       	sbci	r24, 0xFF	; 255
     e74:	9f 4f       	sbci	r25, 0xFF	; 255
     e76:	08 95       	ret

00000e78 <__floatunsisf>:
     e78:	e8 94       	clt
     e7a:	09 c0       	rjmp	.+18     	; 0xe8e <__floatsisf+0x12>

00000e7c <__floatsisf>:
     e7c:	97 fb       	bst	r25, 7
     e7e:	3e f4       	brtc	.+14     	; 0xe8e <__floatsisf+0x12>
     e80:	90 95       	com	r25
     e82:	80 95       	com	r24
     e84:	70 95       	com	r23
     e86:	61 95       	neg	r22
     e88:	7f 4f       	sbci	r23, 0xFF	; 255
     e8a:	8f 4f       	sbci	r24, 0xFF	; 255
     e8c:	9f 4f       	sbci	r25, 0xFF	; 255
     e8e:	99 23       	and	r25, r25
     e90:	a9 f0       	breq	.+42     	; 0xebc <__floatsisf+0x40>
     e92:	f9 2f       	mov	r31, r25
     e94:	96 e9       	ldi	r25, 0x96	; 150
     e96:	bb 27       	eor	r27, r27
     e98:	93 95       	inc	r25
     e9a:	f6 95       	lsr	r31
     e9c:	87 95       	ror	r24
     e9e:	77 95       	ror	r23
     ea0:	67 95       	ror	r22
     ea2:	b7 95       	ror	r27
     ea4:	f1 11       	cpse	r31, r1
     ea6:	f8 cf       	rjmp	.-16     	; 0xe98 <__floatsisf+0x1c>
     ea8:	fa f4       	brpl	.+62     	; 0xee8 <__floatsisf+0x6c>
     eaa:	bb 0f       	add	r27, r27
     eac:	11 f4       	brne	.+4      	; 0xeb2 <__floatsisf+0x36>
     eae:	60 ff       	sbrs	r22, 0
     eb0:	1b c0       	rjmp	.+54     	; 0xee8 <__floatsisf+0x6c>
     eb2:	6f 5f       	subi	r22, 0xFF	; 255
     eb4:	7f 4f       	sbci	r23, 0xFF	; 255
     eb6:	8f 4f       	sbci	r24, 0xFF	; 255
     eb8:	9f 4f       	sbci	r25, 0xFF	; 255
     eba:	16 c0       	rjmp	.+44     	; 0xee8 <__floatsisf+0x6c>
     ebc:	88 23       	and	r24, r24
     ebe:	11 f0       	breq	.+4      	; 0xec4 <__floatsisf+0x48>
     ec0:	96 e9       	ldi	r25, 0x96	; 150
     ec2:	11 c0       	rjmp	.+34     	; 0xee6 <__floatsisf+0x6a>
     ec4:	77 23       	and	r23, r23
     ec6:	21 f0       	breq	.+8      	; 0xed0 <__floatsisf+0x54>
     ec8:	9e e8       	ldi	r25, 0x8E	; 142
     eca:	87 2f       	mov	r24, r23
     ecc:	76 2f       	mov	r23, r22
     ece:	05 c0       	rjmp	.+10     	; 0xeda <__floatsisf+0x5e>
     ed0:	66 23       	and	r22, r22
     ed2:	71 f0       	breq	.+28     	; 0xef0 <__floatsisf+0x74>
     ed4:	96 e8       	ldi	r25, 0x86	; 134
     ed6:	86 2f       	mov	r24, r22
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	2a f0       	brmi	.+10     	; 0xee8 <__floatsisf+0x6c>
     ede:	9a 95       	dec	r25
     ee0:	66 0f       	add	r22, r22
     ee2:	77 1f       	adc	r23, r23
     ee4:	88 1f       	adc	r24, r24
     ee6:	da f7       	brpl	.-10     	; 0xede <__floatsisf+0x62>
     ee8:	88 0f       	add	r24, r24
     eea:	96 95       	lsr	r25
     eec:	87 95       	ror	r24
     eee:	97 f9       	bld	r25, 7
     ef0:	08 95       	ret

00000ef2 <__fp_inf>:
     ef2:	97 f9       	bld	r25, 7
     ef4:	9f 67       	ori	r25, 0x7F	; 127
     ef6:	80 e8       	ldi	r24, 0x80	; 128
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	08 95       	ret

00000efe <__fp_nan>:
     efe:	9f ef       	ldi	r25, 0xFF	; 255
     f00:	80 ec       	ldi	r24, 0xC0	; 192
     f02:	08 95       	ret

00000f04 <__fp_powser>:
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	1f 93       	push	r17
     f0a:	0f 93       	push	r16
     f0c:	ff 92       	push	r15
     f0e:	ef 92       	push	r14
     f10:	df 92       	push	r13
     f12:	7b 01       	movw	r14, r22
     f14:	8c 01       	movw	r16, r24
     f16:	68 94       	set
     f18:	05 c0       	rjmp	.+10     	; 0xf24 <__fp_powser+0x20>
     f1a:	da 2e       	mov	r13, r26
     f1c:	ef 01       	movw	r28, r30
     f1e:	db d0       	rcall	.+438    	; 0x10d6 <__mulsf3x>
     f20:	fe 01       	movw	r30, r28
     f22:	e8 94       	clt
     f24:	a5 91       	lpm	r26, Z+
     f26:	25 91       	lpm	r18, Z+
     f28:	35 91       	lpm	r19, Z+
     f2a:	45 91       	lpm	r20, Z+
     f2c:	55 91       	lpm	r21, Z+
     f2e:	ae f3       	brts	.-22     	; 0xf1a <__fp_powser+0x16>
     f30:	ef 01       	movw	r28, r30
     f32:	8a de       	rcall	.-748    	; 0xc48 <__addsf3x>
     f34:	fe 01       	movw	r30, r28
     f36:	97 01       	movw	r18, r14
     f38:	a8 01       	movw	r20, r16
     f3a:	da 94       	dec	r13
     f3c:	79 f7       	brne	.-34     	; 0xf1c <__fp_powser+0x18>
     f3e:	df 90       	pop	r13
     f40:	ef 90       	pop	r14
     f42:	ff 90       	pop	r15
     f44:	0f 91       	pop	r16
     f46:	1f 91       	pop	r17
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <__fp_pscA>:
     f4e:	00 24       	eor	r0, r0
     f50:	0a 94       	dec	r0
     f52:	16 16       	cp	r1, r22
     f54:	17 06       	cpc	r1, r23
     f56:	18 06       	cpc	r1, r24
     f58:	09 06       	cpc	r0, r25
     f5a:	08 95       	ret

00000f5c <__fp_pscB>:
     f5c:	00 24       	eor	r0, r0
     f5e:	0a 94       	dec	r0
     f60:	12 16       	cp	r1, r18
     f62:	13 06       	cpc	r1, r19
     f64:	14 06       	cpc	r1, r20
     f66:	05 06       	cpc	r0, r21
     f68:	08 95       	ret

00000f6a <__fp_round>:
     f6a:	09 2e       	mov	r0, r25
     f6c:	03 94       	inc	r0
     f6e:	00 0c       	add	r0, r0
     f70:	11 f4       	brne	.+4      	; 0xf76 <__fp_round+0xc>
     f72:	88 23       	and	r24, r24
     f74:	52 f0       	brmi	.+20     	; 0xf8a <__fp_round+0x20>
     f76:	bb 0f       	add	r27, r27
     f78:	40 f4       	brcc	.+16     	; 0xf8a <__fp_round+0x20>
     f7a:	bf 2b       	or	r27, r31
     f7c:	11 f4       	brne	.+4      	; 0xf82 <__fp_round+0x18>
     f7e:	60 ff       	sbrs	r22, 0
     f80:	04 c0       	rjmp	.+8      	; 0xf8a <__fp_round+0x20>
     f82:	6f 5f       	subi	r22, 0xFF	; 255
     f84:	7f 4f       	sbci	r23, 0xFF	; 255
     f86:	8f 4f       	sbci	r24, 0xFF	; 255
     f88:	9f 4f       	sbci	r25, 0xFF	; 255
     f8a:	08 95       	ret

00000f8c <__fp_split3>:
     f8c:	57 fd       	sbrc	r21, 7
     f8e:	90 58       	subi	r25, 0x80	; 128
     f90:	44 0f       	add	r20, r20
     f92:	55 1f       	adc	r21, r21
     f94:	59 f0       	breq	.+22     	; 0xfac <__fp_splitA+0x10>
     f96:	5f 3f       	cpi	r21, 0xFF	; 255
     f98:	71 f0       	breq	.+28     	; 0xfb6 <__fp_splitA+0x1a>
     f9a:	47 95       	ror	r20

00000f9c <__fp_splitA>:
     f9c:	88 0f       	add	r24, r24
     f9e:	97 fb       	bst	r25, 7
     fa0:	99 1f       	adc	r25, r25
     fa2:	61 f0       	breq	.+24     	; 0xfbc <__fp_splitA+0x20>
     fa4:	9f 3f       	cpi	r25, 0xFF	; 255
     fa6:	79 f0       	breq	.+30     	; 0xfc6 <__fp_splitA+0x2a>
     fa8:	87 95       	ror	r24
     faa:	08 95       	ret
     fac:	12 16       	cp	r1, r18
     fae:	13 06       	cpc	r1, r19
     fb0:	14 06       	cpc	r1, r20
     fb2:	55 1f       	adc	r21, r21
     fb4:	f2 cf       	rjmp	.-28     	; 0xf9a <__fp_split3+0xe>
     fb6:	46 95       	lsr	r20
     fb8:	f1 df       	rcall	.-30     	; 0xf9c <__fp_splitA>
     fba:	08 c0       	rjmp	.+16     	; 0xfcc <__fp_splitA+0x30>
     fbc:	16 16       	cp	r1, r22
     fbe:	17 06       	cpc	r1, r23
     fc0:	18 06       	cpc	r1, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	f1 cf       	rjmp	.-30     	; 0xfa8 <__fp_splitA+0xc>
     fc6:	86 95       	lsr	r24
     fc8:	71 05       	cpc	r23, r1
     fca:	61 05       	cpc	r22, r1
     fcc:	08 94       	sec
     fce:	08 95       	ret

00000fd0 <__fp_zero>:
     fd0:	e8 94       	clt

00000fd2 <__fp_szero>:
     fd2:	bb 27       	eor	r27, r27
     fd4:	66 27       	eor	r22, r22
     fd6:	77 27       	eor	r23, r23
     fd8:	cb 01       	movw	r24, r22
     fda:	97 f9       	bld	r25, 7
     fdc:	08 95       	ret

00000fde <inverse>:
     fde:	9b 01       	movw	r18, r22
     fe0:	ac 01       	movw	r20, r24
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	80 e8       	ldi	r24, 0x80	; 128
     fe8:	9f e3       	ldi	r25, 0x3F	; 63
     fea:	81 ce       	rjmp	.-766    	; 0xcee <__divsf3>
     fec:	82 cf       	rjmp	.-252    	; 0xef2 <__fp_inf>
     fee:	ca c0       	rjmp	.+404    	; 0x1184 <__fp_mpack>

00000ff0 <ldexp>:
     ff0:	d5 df       	rcall	.-86     	; 0xf9c <__fp_splitA>
     ff2:	e8 f3       	brcs	.-6      	; 0xfee <inverse+0x10>
     ff4:	99 23       	and	r25, r25
     ff6:	d9 f3       	breq	.-10     	; 0xfee <inverse+0x10>
     ff8:	94 0f       	add	r25, r20
     ffa:	51 1d       	adc	r21, r1
     ffc:	bb f3       	brvs	.-18     	; 0xfec <inverse+0xe>
     ffe:	91 50       	subi	r25, 0x01	; 1
    1000:	50 40       	sbci	r21, 0x00	; 0
    1002:	94 f0       	brlt	.+36     	; 0x1028 <ldexp+0x38>
    1004:	59 f0       	breq	.+22     	; 0x101c <ldexp+0x2c>
    1006:	88 23       	and	r24, r24
    1008:	32 f0       	brmi	.+12     	; 0x1016 <ldexp+0x26>
    100a:	66 0f       	add	r22, r22
    100c:	77 1f       	adc	r23, r23
    100e:	88 1f       	adc	r24, r24
    1010:	91 50       	subi	r25, 0x01	; 1
    1012:	50 40       	sbci	r21, 0x00	; 0
    1014:	c1 f7       	brne	.-16     	; 0x1006 <ldexp+0x16>
    1016:	9e 3f       	cpi	r25, 0xFE	; 254
    1018:	51 05       	cpc	r21, r1
    101a:	44 f7       	brge	.-48     	; 0xfec <inverse+0xe>
    101c:	88 0f       	add	r24, r24
    101e:	91 1d       	adc	r25, r1
    1020:	96 95       	lsr	r25
    1022:	87 95       	ror	r24
    1024:	97 f9       	bld	r25, 7
    1026:	08 95       	ret
    1028:	5f 3f       	cpi	r21, 0xFF	; 255
    102a:	ac f0       	brlt	.+42     	; 0x1056 <ldexp+0x66>
    102c:	98 3e       	cpi	r25, 0xE8	; 232
    102e:	9c f0       	brlt	.+38     	; 0x1056 <ldexp+0x66>
    1030:	bb 27       	eor	r27, r27
    1032:	86 95       	lsr	r24
    1034:	77 95       	ror	r23
    1036:	67 95       	ror	r22
    1038:	b7 95       	ror	r27
    103a:	08 f4       	brcc	.+2      	; 0x103e <ldexp+0x4e>
    103c:	b1 60       	ori	r27, 0x01	; 1
    103e:	93 95       	inc	r25
    1040:	c1 f7       	brne	.-16     	; 0x1032 <ldexp+0x42>
    1042:	bb 0f       	add	r27, r27
    1044:	58 f7       	brcc	.-42     	; 0x101c <ldexp+0x2c>
    1046:	11 f4       	brne	.+4      	; 0x104c <ldexp+0x5c>
    1048:	60 ff       	sbrs	r22, 0
    104a:	e8 cf       	rjmp	.-48     	; 0x101c <ldexp+0x2c>
    104c:	6f 5f       	subi	r22, 0xFF	; 255
    104e:	7f 4f       	sbci	r23, 0xFF	; 255
    1050:	8f 4f       	sbci	r24, 0xFF	; 255
    1052:	9f 4f       	sbci	r25, 0xFF	; 255
    1054:	e3 cf       	rjmp	.-58     	; 0x101c <ldexp+0x2c>
    1056:	bd cf       	rjmp	.-134    	; 0xfd2 <__fp_szero>

00001058 <modf>:
    1058:	fa 01       	movw	r30, r20
    105a:	dc 01       	movw	r26, r24
    105c:	aa 0f       	add	r26, r26
    105e:	bb 1f       	adc	r27, r27
    1060:	9b 01       	movw	r18, r22
    1062:	ac 01       	movw	r20, r24
    1064:	bf 57       	subi	r27, 0x7F	; 127
    1066:	28 f4       	brcc	.+10     	; 0x1072 <modf+0x1a>
    1068:	22 27       	eor	r18, r18
    106a:	33 27       	eor	r19, r19
    106c:	44 27       	eor	r20, r20
    106e:	50 78       	andi	r21, 0x80	; 128
    1070:	1f c0       	rjmp	.+62     	; 0x10b0 <modf+0x58>
    1072:	b7 51       	subi	r27, 0x17	; 23
    1074:	88 f4       	brcc	.+34     	; 0x1098 <modf+0x40>
    1076:	ab 2f       	mov	r26, r27
    1078:	00 24       	eor	r0, r0
    107a:	46 95       	lsr	r20
    107c:	37 95       	ror	r19
    107e:	27 95       	ror	r18
    1080:	01 1c       	adc	r0, r1
    1082:	a3 95       	inc	r26
    1084:	d2 f3       	brmi	.-12     	; 0x107a <modf+0x22>
    1086:	00 20       	and	r0, r0
    1088:	69 f0       	breq	.+26     	; 0x10a4 <modf+0x4c>
    108a:	22 0f       	add	r18, r18
    108c:	33 1f       	adc	r19, r19
    108e:	44 1f       	adc	r20, r20
    1090:	b3 95       	inc	r27
    1092:	da f3       	brmi	.-10     	; 0x108a <modf+0x32>
    1094:	0d d0       	rcall	.+26     	; 0x10b0 <modf+0x58>
    1096:	c6 cd       	rjmp	.-1140   	; 0xc24 <__subsf3>
    1098:	61 30       	cpi	r22, 0x01	; 1
    109a:	71 05       	cpc	r23, r1
    109c:	a0 e8       	ldi	r26, 0x80	; 128
    109e:	8a 07       	cpc	r24, r26
    10a0:	b9 46       	sbci	r27, 0x69	; 105
    10a2:	30 f4       	brcc	.+12     	; 0x10b0 <modf+0x58>
    10a4:	9b 01       	movw	r18, r22
    10a6:	ac 01       	movw	r20, r24
    10a8:	66 27       	eor	r22, r22
    10aa:	77 27       	eor	r23, r23
    10ac:	88 27       	eor	r24, r24
    10ae:	90 78       	andi	r25, 0x80	; 128
    10b0:	30 96       	adiw	r30, 0x00	; 0
    10b2:	21 f0       	breq	.+8      	; 0x10bc <modf+0x64>
    10b4:	20 83       	st	Z, r18
    10b6:	31 83       	std	Z+1, r19	; 0x01
    10b8:	42 83       	std	Z+2, r20	; 0x02
    10ba:	53 83       	std	Z+3, r21	; 0x03
    10bc:	08 95       	ret

000010be <__mulsf3>:
    10be:	0b d0       	rcall	.+22     	; 0x10d6 <__mulsf3x>
    10c0:	54 cf       	rjmp	.-344    	; 0xf6a <__fp_round>
    10c2:	45 df       	rcall	.-374    	; 0xf4e <__fp_pscA>
    10c4:	28 f0       	brcs	.+10     	; 0x10d0 <__mulsf3+0x12>
    10c6:	4a df       	rcall	.-364    	; 0xf5c <__fp_pscB>
    10c8:	18 f0       	brcs	.+6      	; 0x10d0 <__mulsf3+0x12>
    10ca:	95 23       	and	r25, r21
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <__mulsf3+0x12>
    10ce:	11 cf       	rjmp	.-478    	; 0xef2 <__fp_inf>
    10d0:	16 cf       	rjmp	.-468    	; 0xefe <__fp_nan>
    10d2:	11 24       	eor	r1, r1
    10d4:	7e cf       	rjmp	.-260    	; 0xfd2 <__fp_szero>

000010d6 <__mulsf3x>:
    10d6:	5a df       	rcall	.-332    	; 0xf8c <__fp_split3>
    10d8:	a0 f3       	brcs	.-24     	; 0x10c2 <__mulsf3+0x4>

000010da <__mulsf3_pse>:
    10da:	95 9f       	mul	r25, r21
    10dc:	d1 f3       	breq	.-12     	; 0x10d2 <__mulsf3+0x14>
    10de:	95 0f       	add	r25, r21
    10e0:	50 e0       	ldi	r21, 0x00	; 0
    10e2:	55 1f       	adc	r21, r21
    10e4:	62 9f       	mul	r22, r18
    10e6:	f0 01       	movw	r30, r0
    10e8:	72 9f       	mul	r23, r18
    10ea:	bb 27       	eor	r27, r27
    10ec:	f0 0d       	add	r31, r0
    10ee:	b1 1d       	adc	r27, r1
    10f0:	63 9f       	mul	r22, r19
    10f2:	aa 27       	eor	r26, r26
    10f4:	f0 0d       	add	r31, r0
    10f6:	b1 1d       	adc	r27, r1
    10f8:	aa 1f       	adc	r26, r26
    10fa:	64 9f       	mul	r22, r20
    10fc:	66 27       	eor	r22, r22
    10fe:	b0 0d       	add	r27, r0
    1100:	a1 1d       	adc	r26, r1
    1102:	66 1f       	adc	r22, r22
    1104:	82 9f       	mul	r24, r18
    1106:	22 27       	eor	r18, r18
    1108:	b0 0d       	add	r27, r0
    110a:	a1 1d       	adc	r26, r1
    110c:	62 1f       	adc	r22, r18
    110e:	73 9f       	mul	r23, r19
    1110:	b0 0d       	add	r27, r0
    1112:	a1 1d       	adc	r26, r1
    1114:	62 1f       	adc	r22, r18
    1116:	83 9f       	mul	r24, r19
    1118:	a0 0d       	add	r26, r0
    111a:	61 1d       	adc	r22, r1
    111c:	22 1f       	adc	r18, r18
    111e:	74 9f       	mul	r23, r20
    1120:	33 27       	eor	r19, r19
    1122:	a0 0d       	add	r26, r0
    1124:	61 1d       	adc	r22, r1
    1126:	23 1f       	adc	r18, r19
    1128:	84 9f       	mul	r24, r20
    112a:	60 0d       	add	r22, r0
    112c:	21 1d       	adc	r18, r1
    112e:	82 2f       	mov	r24, r18
    1130:	76 2f       	mov	r23, r22
    1132:	6a 2f       	mov	r22, r26
    1134:	11 24       	eor	r1, r1
    1136:	9f 57       	subi	r25, 0x7F	; 127
    1138:	50 40       	sbci	r21, 0x00	; 0
    113a:	8a f0       	brmi	.+34     	; 0x115e <__mulsf3_pse+0x84>
    113c:	e1 f0       	breq	.+56     	; 0x1176 <__mulsf3_pse+0x9c>
    113e:	88 23       	and	r24, r24
    1140:	4a f0       	brmi	.+18     	; 0x1154 <__mulsf3_pse+0x7a>
    1142:	ee 0f       	add	r30, r30
    1144:	ff 1f       	adc	r31, r31
    1146:	bb 1f       	adc	r27, r27
    1148:	66 1f       	adc	r22, r22
    114a:	77 1f       	adc	r23, r23
    114c:	88 1f       	adc	r24, r24
    114e:	91 50       	subi	r25, 0x01	; 1
    1150:	50 40       	sbci	r21, 0x00	; 0
    1152:	a9 f7       	brne	.-22     	; 0x113e <__mulsf3_pse+0x64>
    1154:	9e 3f       	cpi	r25, 0xFE	; 254
    1156:	51 05       	cpc	r21, r1
    1158:	70 f0       	brcs	.+28     	; 0x1176 <__mulsf3_pse+0x9c>
    115a:	cb ce       	rjmp	.-618    	; 0xef2 <__fp_inf>
    115c:	3a cf       	rjmp	.-396    	; 0xfd2 <__fp_szero>
    115e:	5f 3f       	cpi	r21, 0xFF	; 255
    1160:	ec f3       	brlt	.-6      	; 0x115c <__mulsf3_pse+0x82>
    1162:	98 3e       	cpi	r25, 0xE8	; 232
    1164:	dc f3       	brlt	.-10     	; 0x115c <__mulsf3_pse+0x82>
    1166:	86 95       	lsr	r24
    1168:	77 95       	ror	r23
    116a:	67 95       	ror	r22
    116c:	b7 95       	ror	r27
    116e:	f7 95       	ror	r31
    1170:	e7 95       	ror	r30
    1172:	9f 5f       	subi	r25, 0xFF	; 255
    1174:	c1 f7       	brne	.-16     	; 0x1166 <__mulsf3_pse+0x8c>
    1176:	fe 2b       	or	r31, r30
    1178:	88 0f       	add	r24, r24
    117a:	91 1d       	adc	r25, r1
    117c:	96 95       	lsr	r25
    117e:	87 95       	ror	r24
    1180:	97 f9       	bld	r25, 7
    1182:	08 95       	ret

00001184 <__fp_mpack>:
    1184:	9f 3f       	cpi	r25, 0xFF	; 255
    1186:	31 f0       	breq	.+12     	; 0x1194 <__fp_mpack_finite+0xc>

00001188 <__fp_mpack_finite>:
    1188:	91 50       	subi	r25, 0x01	; 1
    118a:	20 f4       	brcc	.+8      	; 0x1194 <__fp_mpack_finite+0xc>
    118c:	87 95       	ror	r24
    118e:	77 95       	ror	r23
    1190:	67 95       	ror	r22
    1192:	b7 95       	ror	r27
    1194:	88 0f       	add	r24, r24
    1196:	91 1d       	adc	r25, r1
    1198:	96 95       	lsr	r25
    119a:	87 95       	ror	r24
    119c:	97 f9       	bld	r25, 7
    119e:	08 95       	ret

000011a0 <_exit>:
    11a0:	f8 94       	cli

000011a2 <__stop_program>:
    11a2:	ff cf       	rjmp	.-2      	; 0x11a2 <__stop_program>
