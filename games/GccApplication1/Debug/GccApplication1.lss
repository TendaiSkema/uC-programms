
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  0000137a  0000140e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000137a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800126  00800126  00001434  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001464  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000014a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023ec  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae9  00000000  00000000  00003964  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010ad  00000000  00000000  0000444d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  000054fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006fd  00000000  00000000  00005808  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000187a  00000000  00000000  00005f05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000777f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f1 c0       	rjmp	.+482    	; 0x1e4 <__ctors_end>
       2:	0b c1       	rjmp	.+534    	; 0x21a <__bad_interrupt>
       4:	8b c4       	rjmp	.+2326   	; 0x91c <__vector_2>
       6:	09 c1       	rjmp	.+530    	; 0x21a <__bad_interrupt>
       8:	08 c1       	rjmp	.+528    	; 0x21a <__bad_interrupt>
       a:	07 c1       	rjmp	.+526    	; 0x21a <__bad_interrupt>
       c:	9a c4       	rjmp	.+2356   	; 0x942 <__vector_6>
       e:	05 c1       	rjmp	.+522    	; 0x21a <__bad_interrupt>
      10:	04 c1       	rjmp	.+520    	; 0x21a <__bad_interrupt>
      12:	03 c1       	rjmp	.+518    	; 0x21a <__bad_interrupt>
      14:	02 c1       	rjmp	.+516    	; 0x21a <__bad_interrupt>
      16:	01 c1       	rjmp	.+514    	; 0x21a <__bad_interrupt>
      18:	00 c1       	rjmp	.+512    	; 0x21a <__bad_interrupt>
      1a:	ff c0       	rjmp	.+510    	; 0x21a <__bad_interrupt>
      1c:	fe c0       	rjmp	.+508    	; 0x21a <__bad_interrupt>
      1e:	fd c0       	rjmp	.+506    	; 0x21a <__bad_interrupt>
      20:	fc c0       	rjmp	.+504    	; 0x21a <__bad_interrupt>
      22:	fb c0       	rjmp	.+502    	; 0x21a <__bad_interrupt>
      24:	fa c0       	rjmp	.+500    	; 0x21a <__bad_interrupt>
      26:	f9 c0       	rjmp	.+498    	; 0x21a <__bad_interrupt>
      28:	f8 c0       	rjmp	.+496    	; 0x21a <__bad_interrupt>
      2a:	f7 c0       	rjmp	.+494    	; 0x21a <__bad_interrupt>
      2c:	f6 c0       	rjmp	.+492    	; 0x21a <__bad_interrupt>
      2e:	f5 c0       	rjmp	.+490    	; 0x21a <__bad_interrupt>
      30:	f4 c0       	rjmp	.+488    	; 0x21a <__bad_interrupt>
      32:	f3 c0       	rjmp	.+486    	; 0x21a <__bad_interrupt>
      34:	f2 c0       	rjmp	.+484    	; 0x21a <__bad_interrupt>
      36:	f1 c0       	rjmp	.+482    	; 0x21a <__bad_interrupt>
      38:	f0 c0       	rjmp	.+480    	; 0x21a <__bad_interrupt>
      3a:	ef c0       	rjmp	.+478    	; 0x21a <__bad_interrupt>

0000003c <__trampolines_end>:
      3c:	1b 20       	and	r1, r11
      3e:	20 20       	and	r2, r0
      40:	20 20       	and	r2, r0
      42:	20 20       	and	r2, r0
      44:	20 20       	and	r2, r0
      46:	20 20       	and	r2, r0
      48:	20 20       	and	r2, r0
      4a:	20 20       	and	r2, r0
      4c:	20 20       	and	r2, r0
      4e:	20 1a       	sub	r2, r16
	...

00000051 <__c.1808>:
      51:	63 72 65 61 74 65 20 43 6f 64 65 3a 00              create Code:.

0000005e <__c.1810>:
      5e:	4f 4b 00                                            OK.

00000061 <__c.1817>:
      61:	41 70 70 6c 79 65 64 00                             Applyed.

00000069 <__c.1819>:
      69:	20 20 20 20 20 20 20 00                                    .

00000071 <__c.1822>:
      71:	20 20 20 20 43 6f 64 65 20 63 72 65 61 74 65 64         Code created
      81:	20 20 20 20 00                                          .

00000086 <__c.1832>:
      86:	20 20 20 20 20 20 20 74 72 79 20 74 6f 20 63 72            try to cr
      96:	61 63 6b 10 00                                      ack..

0000009b <__c.1834>:
      9b:	63 6f 64 65 3a 20 2e 2e 2c 2e 2e 2c 2e 2e 20 20     code: ..,..,..  
	...

000000ac <__c.1847>:
      ac:	11 20 63 72 61 74 65 20 74 68 65 20 63 6f 64 65     . crate the code
      bc:	20 00                                                .

000000be <__c.1849>:
      be:	20 62 61 63 6b 20 10 00                              back ..

000000c6 <__c.1851>:
      c6:	11 20 63 72 61 74 65 20 74 68 65 20 63 6f 64 65     . crate the code
      d6:	20 00                                                .

000000d8 <__c.1853>:
      d8:	11 20 73 74 61 72 74 20 20 20 da 20 20 20 62 61     . start   .   ba
      e8:	63 6b 20 10 00                                      ck ..

000000ed <__c.1856>:
      ed:	20 20 20 20 20 20 59 4f 55 20 57 49 4e 20 20 20           YOU WIN   
      fd:	20 20 20 00                                            .

00000101 <__c.1858>:
     101:	11 20 63 72 61 74 65 20 74 68 65 20 63 6f 64 65     . crate the code
     111:	20 00                                                .

00000113 <__c.1860>:
     113:	11 20 73 74 61 72 74 20 20 20 da 20 20 20 62 61     . start   .   ba
     123:	63 6b 20 10 00                                      ck ..

00000128 <__c.1862>:
     128:	20 20 20 20 20 20 59 4f 55 20 4c 4f 53 45 20 20           YOU LOSE  
     138:	20 20 20 00                                            .

0000013c <__c.1864>:
     13c:	11 20 63 72 61 74 65 20 74 68 65 20 63 6f 64 65     . crate the code
     14c:	20 00                                                .

0000014e <__c.1866>:
     14e:	11 20 73 74 61 72 74 20 20 20 da 20 20 20 62 61     . start   .   ba
     15e:	63 6b 20 10 00                                      ck ..

00000163 <__c.1895>:
     163:	59 4f 55 20 57 49 4e 00                             YOU WIN.

0000016b <__c.1902>:
     16b:	20 00                                                .

0000016d <__c.1904>:
     16d:	11 00                                               ..

0000016f <__c.1906>:
     16f:	20 00                                                .

00000171 <__c.1908>:
     171:	20 b2 00                                             ..

00000174 <__c.1913>:
     174:	10 00                                               ..

00000176 <__c.1915>:
     176:	20 00                                                .

00000178 <__c.1917>:
     178:	20 00                                                .

0000017a <__c.1922>:
     17a:	59 4f 55 20 4c 4f 53 45 00                          YOU LOSE.

00000183 <__c.1927>:
     183:	11 20 63 6f 64 65 20 63 72 61 63 6b 65 72 20 00     . code cracker .

00000193 <__c.1929>:
     193:	11 20 66 69 67 68 74 65 72 20 67 61 6d 65 20 00     . fighter game .

000001a3 <__c.1931>:
     1a3:	11 20 63 6f 64 65 20 63 72 61 63 6b 65 72 20 00     . code cracker .

000001b3 <__c.1933>:
     1b3:	11 20 66 69 67 68 74 65 72 20 67 61 6d 65 20 00     . fighter game .

000001c3 <__c.1935>:
     1c3:	11 20 63 6f 64 65 20 63 72 61 63 6b 65 72 20 00     . code cracker .

000001d3 <__c.1937>:
     1d3:	11 20 66 69 67 68 74 65 72 20 67 61 6d 65 20 00     . fighter game .
	...

000001e4 <__ctors_end>:
     1e4:	11 24       	eor	r1, r1
     1e6:	1f be       	out	0x3f, r1	; 63
     1e8:	cf ef       	ldi	r28, 0xFF	; 255
     1ea:	d2 e0       	ldi	r29, 0x02	; 2
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	cd bf       	out	0x3d, r28	; 61

000001f0 <__do_copy_data>:
     1f0:	11 e0       	ldi	r17, 0x01	; 1
     1f2:	a0 e0       	ldi	r26, 0x00	; 0
     1f4:	b1 e0       	ldi	r27, 0x01	; 1
     1f6:	ea e7       	ldi	r30, 0x7A	; 122
     1f8:	f3 e1       	ldi	r31, 0x13	; 19
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <__do_copy_data+0x10>
     1fc:	05 90       	lpm	r0, Z+
     1fe:	0d 92       	st	X+, r0
     200:	a6 32       	cpi	r26, 0x26	; 38
     202:	b1 07       	cpc	r27, r17
     204:	d9 f7       	brne	.-10     	; 0x1fc <__do_copy_data+0xc>

00000206 <__do_clear_bss>:
     206:	21 e0       	ldi	r18, 0x01	; 1
     208:	a6 e2       	ldi	r26, 0x26	; 38
     20a:	b1 e0       	ldi	r27, 0x01	; 1
     20c:	01 c0       	rjmp	.+2      	; 0x210 <.do_clear_bss_start>

0000020e <.do_clear_bss_loop>:
     20e:	1d 92       	st	X+, r1

00000210 <.do_clear_bss_start>:
     210:	a2 34       	cpi	r26, 0x42	; 66
     212:	b2 07       	cpc	r27, r18
     214:	e1 f7       	brne	.-8      	; 0x20e <.do_clear_bss_loop>
     216:	4b d8       	rcall	.-3946   	; 0xfffff2ae <__eeprom_end+0xff7ef2ae>
     218:	ae c8       	rjmp	.-3748   	; 0xfffff376 <__eeprom_end+0xff7ef376>

0000021a <__bad_interrupt>:
     21a:	f2 ce       	rjmp	.-540    	; 0x0 <__vectors>

0000021c <wait_1ms>:
		LED_2_ON;									// Ausgang wieder auf 1 zurücksetzen. ( Wird erst aktiv, wen Port wieder als Ausgang definiert ist.)
	}
	else DDRA  &= ~0x02;				// Port als Eingang definieren: Taste 2
	if(Taste_2)	
	{ DDRA  |=  0x02;						// Port wieder als Ausgang definieren: Taste 2 auf Mocca Mini					 
		return(1);
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	00 d0       	rcall	.+0      	; 0x222 <wait_1ms+0x6>
     222:	00 d0       	rcall	.+0      	; 0x224 <wait_1ms+0x8>
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
     228:	69 83       	std	Y+1, r22	; 0x01
     22a:	7a 83       	std	Y+2, r23	; 0x02
     22c:	8b 83       	std	Y+3, r24	; 0x03
     22e:	9c 83       	std	Y+4, r25	; 0x04
     230:	89 81       	ldd	r24, Y+1	; 0x01
     232:	9a 81       	ldd	r25, Y+2	; 0x02
     234:	ab 81       	ldd	r26, Y+3	; 0x03
     236:	bc 81       	ldd	r27, Y+4	; 0x04
     238:	89 2b       	or	r24, r25
     23a:	8a 2b       	or	r24, r26
     23c:	8b 2b       	or	r24, r27
     23e:	69 f0       	breq	.+26     	; 0x25a <wait_1ms+0x3e>
     240:	89 81       	ldd	r24, Y+1	; 0x01
     242:	9a 81       	ldd	r25, Y+2	; 0x02
     244:	ab 81       	ldd	r26, Y+3	; 0x03
     246:	bc 81       	ldd	r27, Y+4	; 0x04
     248:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
     24c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
     250:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <__data_end+0x2>
     254:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <__data_end+0x3>
     258:	0c c0       	rjmp	.+24     	; 0x272 <wait_1ms+0x56>
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	a0 e0       	ldi	r26, 0x00	; 0
     260:	b0 e0       	ldi	r27, 0x00	; 0
     262:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
     266:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
     26a:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <__data_end+0x2>
     26e:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <__data_end+0x3>
     272:	00 00       	nop
     274:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
     278:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
     27c:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <__data_end+0x2>
     280:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <__data_end+0x3>
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	a1 05       	cpc	r26, r1
     288:	b1 05       	cpc	r27, r1
     28a:	a1 f7       	brne	.-24     	; 0x274 <wait_1ms+0x58>
     28c:	00 00       	nop
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <delay_nop>:
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	00 d0       	rcall	.+0      	; 0x2a2 <delay_nop+0x6>
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
     2a6:	8a 83       	std	Y+2, r24	; 0x02
     2a8:	19 82       	std	Y+1, r1	; 0x01
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <delay_nop+0x18>
     2ac:	00 00       	nop
     2ae:	89 81       	ldd	r24, Y+1	; 0x01
     2b0:	8f 5f       	subi	r24, 0xFF	; 255
     2b2:	89 83       	std	Y+1, r24	; 0x01
     2b4:	99 81       	ldd	r25, Y+1	; 0x01
     2b6:	8a 81       	ldd	r24, Y+2	; 0x02
     2b8:	98 17       	cp	r25, r24
     2ba:	c0 f3       	brcs	.-16     	; 0x2ac <delay_nop+0x10>
     2bc:	00 00       	nop
     2be:	0f 90       	pop	r0
     2c0:	0f 90       	pop	r0
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <write_lcd_f>:
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <write_RGB_LCD_activ>
     2ce:	dc 9a       	sbi	0x1b, 4	; 27
     2d0:	de 98       	cbi	0x1b, 6	; 27
     2d2:	de 98       	cbi	0x1b, 6	; 27
     2d4:	de 9a       	sbi	0x1b, 6	; 27
     2d6:	de 9a       	sbi	0x1b, 6	; 27
     2d8:	de 98       	cbi	0x1b, 6	; 27
     2da:	de 98       	cbi	0x1b, 6	; 27
     2dc:	de 9a       	sbi	0x1b, 6	; 27
     2de:	de 9a       	sbi	0x1b, 6	; 27
     2e0:	de 98       	cbi	0x1b, 6	; 27
     2e2:	de 98       	cbi	0x1b, 6	; 27
     2e4:	de 9a       	sbi	0x1b, 6	; 27
     2e6:	de 9a       	sbi	0x1b, 6	; 27
     2e8:	de 98       	cbi	0x1b, 6	; 27
     2ea:	de 98       	cbi	0x1b, 6	; 27
     2ec:	de 9a       	sbi	0x1b, 6	; 27
     2ee:	de 9a       	sbi	0x1b, 6	; 27
     2f0:	de 98       	cbi	0x1b, 6	; 27
     2f2:	de 98       	cbi	0x1b, 6	; 27
     2f4:	de 9a       	sbi	0x1b, 6	; 27
     2f6:	dc 98       	cbi	0x1b, 4	; 27
     2f8:	de 98       	cbi	0x1b, 6	; 27
     2fa:	de 98       	cbi	0x1b, 6	; 27
     2fc:	de 9a       	sbi	0x1b, 6	; 27
     2fe:	83 34       	cpi	r24, 0x43	; 67
     300:	a9 f1       	breq	.+106    	; 0x36c <__stack+0x6d>
     302:	dc 9a       	sbi	0x1b, 4	; 27
     304:	de 98       	cbi	0x1b, 6	; 27
     306:	de 98       	cbi	0x1b, 6	; 27
     308:	de 9a       	sbi	0x1b, 6	; 27
     30a:	dc 98       	cbi	0x1b, 4	; 27
     30c:	de 98       	cbi	0x1b, 6	; 27
     30e:	de 98       	cbi	0x1b, 6	; 27
     310:	de 9a       	sbi	0x1b, 6	; 27
     312:	84 e0       	ldi	r24, 0x04	; 4
     314:	de 98       	cbi	0x1b, 6	; 27
     316:	60 ff       	sbrs	r22, 0
     318:	27 c0       	rjmp	.+78     	; 0x368 <__stack+0x69>
     31a:	dc 9a       	sbi	0x1b, 4	; 27
     31c:	66 95       	lsr	r22
     31e:	de 98       	cbi	0x1b, 6	; 27
     320:	de 9a       	sbi	0x1b, 6	; 27
     322:	81 50       	subi	r24, 0x01	; 1
     324:	b9 f7       	brne	.-18     	; 0x314 <__stack+0x15>
     326:	dc 98       	cbi	0x1b, 4	; 27
     328:	84 e0       	ldi	r24, 0x04	; 4
     32a:	de 98       	cbi	0x1b, 6	; 27
     32c:	de 98       	cbi	0x1b, 6	; 27
     32e:	de 9a       	sbi	0x1b, 6	; 27
     330:	81 50       	subi	r24, 0x01	; 1
     332:	d9 f7       	brne	.-10     	; 0x32a <__stack+0x2b>
     334:	84 e0       	ldi	r24, 0x04	; 4
     336:	de 98       	cbi	0x1b, 6	; 27
     338:	60 ff       	sbrs	r22, 0
     33a:	14 c0       	rjmp	.+40     	; 0x364 <__stack+0x65>
     33c:	dc 9a       	sbi	0x1b, 4	; 27
     33e:	66 95       	lsr	r22
     340:	de 98       	cbi	0x1b, 6	; 27
     342:	de 9a       	sbi	0x1b, 6	; 27
     344:	81 50       	subi	r24, 0x01	; 1
     346:	b9 f7       	brne	.-18     	; 0x336 <__stack+0x37>
     348:	dc 98       	cbi	0x1b, 4	; 27
     34a:	84 e0       	ldi	r24, 0x04	; 4
     34c:	de 98       	cbi	0x1b, 6	; 27
     34e:	de 98       	cbi	0x1b, 6	; 27
     350:	de 9a       	sbi	0x1b, 6	; 27
     352:	81 50       	subi	r24, 0x01	; 1
     354:	d9 f7       	brne	.-10     	; 0x34c <__stack+0x4d>
     356:	84 e1       	ldi	r24, 0x14	; 20
     358:	dc 9a       	sbi	0x1b, 4	; 27
     35a:	81 50       	subi	r24, 0x01	; 1
     35c:	e9 f7       	brne	.-6      	; 0x358 <__stack+0x59>
     35e:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <write_RGB_LCD_activ>
     362:	08 95       	ret
     364:	dc 98       	cbi	0x1b, 4	; 27
     366:	eb cf       	rjmp	.-42     	; 0x33e <__stack+0x3f>
     368:	dc 98       	cbi	0x1b, 4	; 27
     36a:	d8 cf       	rjmp	.-80     	; 0x31c <__stack+0x1d>
     36c:	dc 98       	cbi	0x1b, 4	; 27
     36e:	ca cf       	rjmp	.-108    	; 0x304 <__stack+0x5>

00000370 <write_text>:
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
     374:	df 93       	push	r29
     376:	8a 01       	movw	r16, r20
     378:	82 95       	swap	r24
     37a:	88 0f       	add	r24, r24
     37c:	80 7e       	andi	r24, 0xE0	; 224
     37e:	68 0f       	add	r22, r24
     380:	60 68       	ori	r22, 0x80	; 128
     382:	83 e4       	ldi	r24, 0x43	; 67
     384:	a1 df       	rcall	.-190    	; 0x2c8 <write_lcd_f>
     386:	f8 01       	movw	r30, r16
     388:	64 91       	lpm	r22, Z
     38a:	66 23       	and	r22, r22
     38c:	61 f0       	breq	.+24     	; 0x3a6 <write_text+0x36>
     38e:	d1 e0       	ldi	r29, 0x01	; 1
     390:	84 e4       	ldi	r24, 0x44	; 68
     392:	9a df       	rcall	.-204    	; 0x2c8 <write_lcd_f>
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	8d 0f       	add	r24, r29
     398:	f8 01       	movw	r30, r16
     39a:	ed 0f       	add	r30, r29
     39c:	f1 1d       	adc	r31, r1
     39e:	64 91       	lpm	r22, Z
     3a0:	d8 2f       	mov	r29, r24
     3a2:	61 11       	cpse	r22, r1
     3a4:	f5 cf       	rjmp	.-22     	; 0x390 <write_text+0x20>
     3a6:	df 91       	pop	r29
     3a8:	1f 91       	pop	r17
     3aa:	0f 91       	pop	r16
     3ac:	08 95       	ret

000003ae <write_text_ram>:
     3ae:	0f 93       	push	r16
     3b0:	1f 93       	push	r17
     3b2:	df 93       	push	r29
     3b4:	8a 01       	movw	r16, r20
     3b6:	82 95       	swap	r24
     3b8:	88 0f       	add	r24, r24
     3ba:	80 7e       	andi	r24, 0xE0	; 224
     3bc:	68 0f       	add	r22, r24
     3be:	60 68       	ori	r22, 0x80	; 128
     3c0:	83 e4       	ldi	r24, 0x43	; 67
     3c2:	82 df       	rcall	.-252    	; 0x2c8 <write_lcd_f>
     3c4:	f8 01       	movw	r30, r16
     3c6:	60 81       	ld	r22, Z
     3c8:	66 23       	and	r22, r22
     3ca:	51 f0       	breq	.+20     	; 0x3e0 <write_text_ram+0x32>
     3cc:	d0 e0       	ldi	r29, 0x00	; 0
     3ce:	df 5f       	subi	r29, 0xFF	; 255
     3d0:	84 e4       	ldi	r24, 0x44	; 68
     3d2:	7a df       	rcall	.-268    	; 0x2c8 <write_lcd_f>
     3d4:	f8 01       	movw	r30, r16
     3d6:	ed 0f       	add	r30, r29
     3d8:	f1 1d       	adc	r31, r1
     3da:	60 81       	ld	r22, Z
     3dc:	61 11       	cpse	r22, r1
     3de:	f7 cf       	rjmp	.-18     	; 0x3ce <write_text_ram+0x20>
     3e0:	df 91       	pop	r29
     3e2:	1f 91       	pop	r17
     3e4:	0f 91       	pop	r16
     3e6:	08 95       	ret

000003e8 <write_zahl>:
     3e8:	2f 92       	push	r2
     3ea:	3f 92       	push	r3
     3ec:	4f 92       	push	r4
     3ee:	5f 92       	push	r5
     3f0:	6f 92       	push	r6
     3f2:	7f 92       	push	r7
     3f4:	8f 92       	push	r8
     3f6:	9f 92       	push	r9
     3f8:	af 92       	push	r10
     3fa:	bf 92       	push	r11
     3fc:	cf 92       	push	r12
     3fe:	df 92       	push	r13
     400:	ef 92       	push	r14
     402:	ff 92       	push	r15
     404:	0f 93       	push	r16
     406:	1f 93       	push	r17
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
     40c:	cd b7       	in	r28, 0x3d	; 61
     40e:	de b7       	in	r29, 0x3e	; 62
     410:	63 97       	sbiw	r28, 0x13	; 19
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	f8 94       	cli
     416:	de bf       	out	0x3e, r29	; 62
     418:	0f be       	out	0x3f, r0	; 63
     41a:	cd bf       	out	0x3d, r28	; 61
     41c:	8a 8b       	std	Y+18, r24	; 0x12
     41e:	6b 8b       	std	Y+19, r22	; 0x13
     420:	29 01       	movw	r4, r18
     422:	3a 01       	movw	r6, r20
     424:	ce 86       	std	Y+14, r12	; 0x0e
     426:	04 36       	cpi	r16, 0x64	; 100
     428:	08 f4       	brcc	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42a:	ba c0       	rjmp	.+372    	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     42c:	04 56       	subi	r16, 0x64	; 100
     42e:	19 8a       	std	Y+17, r1	; 0x11
     430:	0b 30       	cpi	r16, 0x0B	; 11
     432:	08 f0       	brcs	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     434:	0a e0       	ldi	r16, 0x0A	; 10
     436:	ed 86       	std	Y+13, r14	; 0x0d
     438:	4e 85       	ldd	r20, Y+14	; 0x0e
     43a:	4e 15       	cp	r20, r14
     43c:	08 f4       	brcc	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43e:	4d 87       	std	Y+13, r20	; 0x0d
     440:	80 2f       	mov	r24, r16
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	98 8b       	std	Y+16, r25	; 0x10
     446:	8f 87       	std	Y+15, r24	; 0x0f
     448:	ed 85       	ldd	r30, Y+13	; 0x0d
     44a:	8e 0f       	add	r24, r30
     44c:	91 1d       	adc	r25, r1
     44e:	0b 97       	sbiw	r24, 0x0b	; 11
     450:	1c f0       	brlt	.+6      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     452:	8a e0       	ldi	r24, 0x0A	; 10
     454:	80 1b       	sub	r24, r16
     456:	8d 87       	std	Y+13, r24	; 0x0d
     458:	c3 01       	movw	r24, r6
     45a:	b2 01       	movw	r22, r4
     45c:	2a e0       	ldi	r18, 0x0A	; 10
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	40 e0       	ldi	r20, 0x00	; 0
     462:	50 e0       	ldi	r21, 0x00	; 0
     464:	66 d7       	rcall	.+3788   	; 0x1332 <__udivmodsi4>
     466:	60 5d       	subi	r22, 0xD0	; 208
     468:	6c 87       	std	Y+12, r22	; 0x0c
     46a:	1a e0       	ldi	r17, 0x0A	; 10
     46c:	3a e0       	ldi	r19, 0x0A	; 10
     46e:	c3 2e       	mov	r12, r19
     470:	d1 2c       	mov	r13, r1
     472:	e1 2c       	mov	r14, r1
     474:	f1 2c       	mov	r15, r1
     476:	4a e0       	ldi	r20, 0x0A	; 10
     478:	84 2e       	mov	r8, r20
     47a:	91 2c       	mov	r9, r1
     47c:	a1 2c       	mov	r10, r1
     47e:	b1 2c       	mov	r11, r1
     480:	22 24       	eor	r2, r2
     482:	23 94       	inc	r2
     484:	31 2c       	mov	r3, r1
     486:	2c 0e       	add	r2, r28
     488:	3d 1e       	adc	r3, r29
     48a:	21 0e       	add	r2, r17
     48c:	31 1c       	adc	r3, r1
     48e:	c3 01       	movw	r24, r6
     490:	b2 01       	movw	r22, r4
     492:	a7 01       	movw	r20, r14
     494:	96 01       	movw	r18, r12
     496:	4d d7       	rcall	.+3738   	; 0x1332 <__udivmodsi4>
     498:	ca 01       	movw	r24, r20
     49a:	b9 01       	movw	r22, r18
     49c:	a5 01       	movw	r20, r10
     49e:	94 01       	movw	r18, r8
     4a0:	48 d7       	rcall	.+3728   	; 0x1332 <__udivmodsi4>
     4a2:	60 5d       	subi	r22, 0xD0	; 208
     4a4:	f1 01       	movw	r30, r2
     4a6:	60 83       	st	Z, r22
     4a8:	cc 0c       	add	r12, r12
     4aa:	dd 1c       	adc	r13, r13
     4ac:	ee 1c       	adc	r14, r14
     4ae:	ff 1c       	adc	r15, r15
     4b0:	d7 01       	movw	r26, r14
     4b2:	c6 01       	movw	r24, r12
     4b4:	88 0f       	add	r24, r24
     4b6:	99 1f       	adc	r25, r25
     4b8:	aa 1f       	adc	r26, r26
     4ba:	bb 1f       	adc	r27, r27
     4bc:	88 0f       	add	r24, r24
     4be:	99 1f       	adc	r25, r25
     4c0:	aa 1f       	adc	r26, r26
     4c2:	bb 1f       	adc	r27, r27
     4c4:	c8 0e       	add	r12, r24
     4c6:	d9 1e       	adc	r13, r25
     4c8:	ea 1e       	adc	r14, r26
     4ca:	fb 1e       	adc	r15, r27
     4cc:	11 50       	subi	r17, 0x01	; 1
     4ce:	c0 f6       	brcc	.-80     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     4d0:	2c e0       	ldi	r18, 0x0C	; 12
     4d2:	fe 85       	ldd	r31, Y+14	; 0x0e
     4d4:	2f 1b       	sub	r18, r31
     4d6:	82 2f       	mov	r24, r18
     4d8:	80 1b       	sub	r24, r16
     4da:	00 23       	and	r16, r16
     4dc:	09 f4       	brne	.+2      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     4de:	88 c0       	rjmp	.+272    	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
     4e0:	fe 01       	movw	r30, r28
     4e2:	31 96       	adiw	r30, 0x01	; 1
     4e4:	a1 e0       	ldi	r26, 0x01	; 1
     4e6:	b0 e0       	ldi	r27, 0x00	; 0
     4e8:	ac 0f       	add	r26, r28
     4ea:	bd 1f       	adc	r27, r29
     4ec:	a8 0f       	add	r26, r24
     4ee:	b1 1d       	adc	r27, r1
     4f0:	9c 91       	ld	r25, X
     4f2:	91 93       	st	Z+, r25
     4f4:	8f 5f       	subi	r24, 0xFF	; 255
     4f6:	28 13       	cpse	r18, r24
     4f8:	f5 cf       	rjmp	.-22     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4fa:	4d 85       	ldd	r20, Y+13	; 0x0d
     4fc:	41 11       	cpse	r20, r1
     4fe:	53 c0       	rjmp	.+166    	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
     500:	ef 85       	ldd	r30, Y+15	; 0x0f
     502:	f8 89       	ldd	r31, Y+16	; 0x10
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	8c 0f       	add	r24, r28
     50a:	9d 1f       	adc	r25, r29
     50c:	e8 0f       	add	r30, r24
     50e:	f9 1f       	adc	r31, r25
     510:	10 82       	st	Z, r1
     512:	99 89       	ldd	r25, Y+17	; 0x11
     514:	99 23       	and	r25, r25
     516:	29 f1       	breq	.+74     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
     518:	89 81       	ldd	r24, Y+1	; 0x01
     51a:	80 33       	cpi	r24, 0x30	; 48
     51c:	11 f5       	brne	.+68     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
     51e:	4f 85       	ldd	r20, Y+15	; 0x0f
     520:	58 89       	ldd	r21, Y+16	; 0x10
     522:	41 50       	subi	r20, 0x01	; 1
     524:	51 09       	sbc	r21, r1
     526:	14 16       	cp	r1, r20
     528:	15 06       	cpc	r1, r21
     52a:	dc f4       	brge	.+54     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	60 e2       	ldi	r22, 0x20	; 32
     534:	03 c0       	rjmp	.+6      	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
     536:	84 17       	cp	r24, r20
     538:	95 07       	cpc	r25, r21
     53a:	9c f4       	brge	.+38     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
     53c:	2f 5f       	subi	r18, 0xFF	; 255
     53e:	e1 e0       	ldi	r30, 0x01	; 1
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	ec 0f       	add	r30, r28
     544:	fd 1f       	adc	r31, r29
     546:	e8 0f       	add	r30, r24
     548:	f9 1f       	adc	r31, r25
     54a:	60 83       	st	Z, r22
     54c:	82 2f       	mov	r24, r18
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	e1 e0       	ldi	r30, 0x01	; 1
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	ec 0f       	add	r30, r28
     556:	fd 1f       	adc	r31, r29
     558:	e8 0f       	add	r30, r24
     55a:	f9 1f       	adc	r31, r25
     55c:	30 81       	ld	r19, Z
     55e:	30 33       	cpi	r19, 0x30	; 48
     560:	51 f3       	breq	.-44     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
     562:	ae 01       	movw	r20, r28
     564:	4f 5f       	subi	r20, 0xFF	; 255
     566:	5f 4f       	sbci	r21, 0xFF	; 255
     568:	6b 89       	ldd	r22, Y+19	; 0x13
     56a:	8a 89       	ldd	r24, Y+18	; 0x12
     56c:	20 df       	rcall	.-448    	; 0x3ae <write_text_ram>
     56e:	63 96       	adiw	r28, 0x13	; 19
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	f8 94       	cli
     574:	de bf       	out	0x3e, r29	; 62
     576:	0f be       	out	0x3f, r0	; 63
     578:	cd bf       	out	0x3d, r28	; 61
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	1f 91       	pop	r17
     580:	0f 91       	pop	r16
     582:	ff 90       	pop	r15
     584:	ef 90       	pop	r14
     586:	df 90       	pop	r13
     588:	cf 90       	pop	r12
     58a:	bf 90       	pop	r11
     58c:	af 90       	pop	r10
     58e:	9f 90       	pop	r9
     590:	8f 90       	pop	r8
     592:	7f 90       	pop	r7
     594:	6f 90       	pop	r6
     596:	5f 90       	pop	r5
     598:	4f 90       	pop	r4
     59a:	3f 90       	pop	r3
     59c:	2f 90       	pop	r2
     59e:	08 95       	ret
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	29 8b       	std	Y+17, r18	; 0x11
     5a4:	45 cf       	rjmp	.-374    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     5a6:	0f 5f       	subi	r16, 0xFF	; 255
     5a8:	8e e2       	ldi	r24, 0x2E	; 46
     5aa:	e1 e0       	ldi	r30, 0x01	; 1
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	ec 0f       	add	r30, r28
     5b0:	fd 1f       	adc	r31, r29
     5b2:	4f 85       	ldd	r20, Y+15	; 0x0f
     5b4:	58 89       	ldd	r21, Y+16	; 0x10
     5b6:	e4 0f       	add	r30, r20
     5b8:	f5 1f       	adc	r31, r21
     5ba:	80 83       	st	Z, r24
     5bc:	e0 2f       	mov	r30, r16
     5be:	20 1b       	sub	r18, r16
     5c0:	9d 85       	ldd	r25, Y+13	; 0x0d
     5c2:	82 2f       	mov	r24, r18
     5c4:	8e 0f       	add	r24, r30
     5c6:	a1 e0       	ldi	r26, 0x01	; 1
     5c8:	b0 e0       	ldi	r27, 0x00	; 0
     5ca:	ac 0f       	add	r26, r28
     5cc:	bd 1f       	adc	r27, r29
     5ce:	a8 0f       	add	r26, r24
     5d0:	b1 1d       	adc	r27, r1
     5d2:	8c 91       	ld	r24, X
     5d4:	a1 e0       	ldi	r26, 0x01	; 1
     5d6:	b0 e0       	ldi	r27, 0x00	; 0
     5d8:	ac 0f       	add	r26, r28
     5da:	bd 1f       	adc	r27, r29
     5dc:	ae 0f       	add	r26, r30
     5de:	b1 1d       	adc	r27, r1
     5e0:	8c 93       	st	X, r24
     5e2:	ef 5f       	subi	r30, 0xFF	; 255
     5e4:	8e 2f       	mov	r24, r30
     5e6:	80 1b       	sub	r24, r16
     5e8:	89 17       	cp	r24, r25
     5ea:	58 f3       	brcs	.-42     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	8a cf       	rjmp	.-236    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     5f0:	ed 85       	ldd	r30, Y+13	; 0x0d
     5f2:	ee 23       	and	r30, r30
     5f4:	21 f0       	breq	.+8      	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
     5f6:	8e e2       	ldi	r24, 0x2E	; 46
     5f8:	89 83       	std	Y+1, r24	; 0x01
     5fa:	01 e0       	ldi	r16, 0x01	; 1
     5fc:	df cf       	rjmp	.-66     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     5fe:	e0 e0       	ldi	r30, 0x00	; 0
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	80 cf       	rjmp	.-256    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>

00000604 <lcd_init>:
     604:	df 93       	push	r29
     606:	d4 9a       	sbi	0x1a, 4	; 26
     608:	d6 9a       	sbi	0x1a, 6	; 26
     60a:	d2 e3       	ldi	r29, 0x32	; 50
     60c:	88 e7       	ldi	r24, 0x78	; 120
     60e:	46 de       	rcall	.-884    	; 0x29c <delay_nop>
     610:	d1 50       	subi	r29, 0x01	; 1
     612:	e1 f7       	brne	.-8      	; 0x60c <lcd_init+0x8>
     614:	64 e3       	ldi	r22, 0x34	; 52
     616:	83 e4       	ldi	r24, 0x43	; 67
     618:	57 de       	rcall	.-850    	; 0x2c8 <write_lcd_f>
     61a:	64 e3       	ldi	r22, 0x34	; 52
     61c:	83 e4       	ldi	r24, 0x43	; 67
     61e:	54 de       	rcall	.-856    	; 0x2c8 <write_lcd_f>
     620:	69 e0       	ldi	r22, 0x09	; 9
     622:	83 e4       	ldi	r24, 0x43	; 67
     624:	51 de       	rcall	.-862    	; 0x2c8 <write_lcd_f>
     626:	60 e3       	ldi	r22, 0x30	; 48
     628:	83 e4       	ldi	r24, 0x43	; 67
     62a:	4e de       	rcall	.-868    	; 0x2c8 <write_lcd_f>
     62c:	6c e0       	ldi	r22, 0x0C	; 12
     62e:	83 e4       	ldi	r24, 0x43	; 67
     630:	4b de       	rcall	.-874    	; 0x2c8 <write_lcd_f>
     632:	61 e0       	ldi	r22, 0x01	; 1
     634:	83 e4       	ldi	r24, 0x43	; 67
     636:	48 de       	rcall	.-880    	; 0x2c8 <write_lcd_f>
     638:	d8 e0       	ldi	r29, 0x08	; 8
     63a:	88 e7       	ldi	r24, 0x78	; 120
     63c:	2f de       	rcall	.-930    	; 0x29c <delay_nop>
     63e:	d1 50       	subi	r29, 0x01	; 1
     640:	e1 f7       	brne	.-8      	; 0x63a <lcd_init+0x36>
     642:	67 e0       	ldi	r22, 0x07	; 7
     644:	83 e4       	ldi	r24, 0x43	; 67
     646:	df 91       	pop	r29
     648:	3f ce       	rjmp	.-898    	; 0x2c8 <write_lcd_f>

0000064a <clear_lcd>:
     64a:	df 93       	push	r29
     64c:	61 e0       	ldi	r22, 0x01	; 1
     64e:	83 e4       	ldi	r24, 0x43	; 67
     650:	3b de       	rcall	.-906    	; 0x2c8 <write_lcd_f>
     652:	d8 e0       	ldi	r29, 0x08	; 8
     654:	88 e7       	ldi	r24, 0x78	; 120
     656:	22 de       	rcall	.-956    	; 0x29c <delay_nop>
     658:	d1 50       	subi	r29, 0x01	; 1
     65a:	e1 f7       	brne	.-8      	; 0x654 <clear_lcd+0xa>
     65c:	df 91       	pop	r29
     65e:	08 95       	ret

00000660 <get_ADC_Channel>:
}



u16 get_ADC_Channel(u8 channel)	
{	u16 AD_Result;
     660:	df 93       	push	r29
	u8  i;
	
	// A/D-Wandler Initialisieren
	ADMUXA = channel;		// select Channel 
     662:	89 b9       	out	0x09, r24	; 9
	
	if(channel == 12) ADMUXB = 0x01;			// Wenn interner Temperatur-Sensor gewählt wird, muss die "Internal 1.1V Reference" selektiert sein.
     664:	8c 30       	cpi	r24, 0x0C	; 12
     666:	79 f0       	breq	.+30     	; 0x686 <get_ADC_Channel+0x26>
						   else ADMUXB = 0x00;			// Vcc als Referenz = 5V
     668:	18 b8       	out	0x08, r1	; 8
	// ADMUXB = 0x03;			// Internal 4.096V reference
	
	if(channel == 12) for(i=0; i<8; i++) delay_nop(120);		// 1.6ms (8x 0.2us) warten, bis interne Temperatur gemessen werden kann
	
	
	ADCSRA |=  (1 << ADEN) | (1 << ADSC);			// A/D-Wandler Enable, Start, Single Mode
     66a:	85 b1       	in	r24, 0x05	; 5
     66c:	80 6c       	ori	r24, 0xC0	; 192
     66e:	85 b9       	out	0x05, r24	; 5
	while(ADCSRA & (1 << ADSC));							// Warten, bis Messung fertig ist.
     670:	2e 99       	sbic	0x05, 6	; 5
     672:	fe cf       	rjmp	.-4      	; 0x670 <get_ADC_Channel+0x10>
	
	AD_Result = ADCL + (ADCH << 8);			//	ADCL zuerst lesen und dann erst ADCH !!!
     674:	26 b1       	in	r18, 0x06	; 6
     676:	87 b1       	in	r24, 0x07	; 7
	
	return(AD_Result);
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	98 2f       	mov	r25, r24
     67c:	88 27       	eor	r24, r24
}
     67e:	82 0f       	add	r24, r18
     680:	91 1d       	adc	r25, r1
     682:	df 91       	pop	r29
     684:	08 95       	ret
	u8  i;
	
	// A/D-Wandler Initialisieren
	ADMUXA = channel;		// select Channel 
	
	if(channel == 12) ADMUXB = 0x01;			// Wenn interner Temperatur-Sensor gewählt wird, muss die "Internal 1.1V Reference" selektiert sein.
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	88 b9       	out	0x08, r24	; 8
     68a:	d8 e0       	ldi	r29, 0x08	; 8
						   else ADMUXB = 0x00;			// Vcc als Referenz = 5V
	// ADMUXB = 0x01;			// Internal 1.1V Reference
	// ADMUXB = 0x02;			// Internal 2.2V Reference
	// ADMUXB = 0x03;			// Internal 4.096V reference
	
	if(channel == 12) for(i=0; i<8; i++) delay_nop(120);		// 1.6ms (8x 0.2us) warten, bis interne Temperatur gemessen werden kann
     68c:	88 e7       	ldi	r24, 0x78	; 120
     68e:	06 de       	rcall	.-1012   	; 0x29c <delay_nop>
     690:	d1 50       	subi	r29, 0x01	; 1
     692:	e1 f7       	brne	.-8      	; 0x68c <get_ADC_Channel+0x2c>
     694:	ea cf       	rjmp	.-44     	; 0x66a <get_ADC_Channel+0xa>

00000696 <set_RGB_LED>:
}

#pragma GCC optimize 2						// Optimitation-Level nicht verstellen, weil sonst das Timing der LCD-Schnittstelle nicht mehr stimmen würde!!!

void set_RGB_LED(u16 rot,u16 gruen,u16 blau)
{
     696:	dc 01       	movw	r26, r24
	u8 i;
	u16 bit_muster;
	
	RGB_rot = rot;
     698:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <RGB_rot+0x1>
     69c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <RGB_rot>
	RGB_gruen = gruen;
     6a0:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <RGB_gruen+0x1>
     6a4:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <RGB_gruen>
	RGB_blau = blau;
     6a8:	50 93 3f 01 	sts	0x013F, r21	; 0x80013f <RGB_blau+0x1>
     6ac:	40 93 3e 01 	sts	0x013E, r20	; 0x80013e <RGB_blau>
	DDRA  |=  0x04;						// Port wieder als Ausgang definieren
     6b0:	d2 9a       	sbi	0x1a, 2	; 26
	
	write_RGB_LCD_activ = 1;
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <write_RGB_LCD_activ>
	RGB_SHCP_0;
     6b8:	da 98       	cbi	0x1b, 2	; 27
	RGB_OE_1;
     6ba:	d8 98       	cbi	0x1b, 0	; 27
     6bc:	90 e1       	ldi	r25, 0x10	; 16
	bit_muster =  0x8000;
     6be:	20 e0       	ldi	r18, 0x00	; 0
     6c0:	30 e8       	ldi	r19, 0x80	; 128
     6c2:	17 c0       	rjmp	.+46     	; 0x6f2 <set_RGB_LED+0x5c>
	for(i=0; i<16; i++)
	{ if(blau  & bit_muster) RGB_DS_1; else RGB_DS_0;
     6c4:	dc 9a       	sbi	0x1b, 4	; 27
		RGB_SHCP_1; RGB_SHCP_0;
     6c6:	da 9a       	sbi	0x1b, 2	; 27
     6c8:	da 98       	cbi	0x1b, 2	; 27
		if(gruen & bit_muster) RGB_DS_1; else RGB_DS_0;
     6ca:	fb 01       	movw	r30, r22
     6cc:	e2 23       	and	r30, r18
     6ce:	f3 23       	and	r31, r19
     6d0:	ef 2b       	or	r30, r31
     6d2:	e1 f0       	breq	.+56     	; 0x70c <set_RGB_LED+0x76>
     6d4:	dc 9a       	sbi	0x1b, 4	; 27
		RGB_SHCP_1; RGB_SHCP_0;
     6d6:	da 9a       	sbi	0x1b, 2	; 27
     6d8:	da 98       	cbi	0x1b, 2	; 27
		if(rot   & bit_muster) RGB_DS_1; else RGB_DS_0;
     6da:	fd 01       	movw	r30, r26
     6dc:	e2 23       	and	r30, r18
     6de:	f3 23       	and	r31, r19
     6e0:	ef 2b       	or	r30, r31
     6e2:	e1 f0       	breq	.+56     	; 0x71c <set_RGB_LED+0x86>
     6e4:	dc 9a       	sbi	0x1b, 4	; 27
		RGB_SHCP_1; RGB_SHCP_0;
     6e6:	da 9a       	sbi	0x1b, 2	; 27
     6e8:	da 98       	cbi	0x1b, 2	; 27
		bit_muster >>= 1;
     6ea:	36 95       	lsr	r19
     6ec:	27 95       	ror	r18
     6ee:	91 50       	subi	r25, 0x01	; 1
	
	write_RGB_LCD_activ = 1;
	RGB_SHCP_0;
	RGB_OE_1;
	bit_muster =  0x8000;
	for(i=0; i<16; i++)
     6f0:	e1 f0       	breq	.+56     	; 0x72a <set_RGB_LED+0x94>
	{ if(blau  & bit_muster) RGB_DS_1; else RGB_DS_0;
     6f2:	fa 01       	movw	r30, r20
     6f4:	e2 23       	and	r30, r18
     6f6:	f3 23       	and	r31, r19
     6f8:	ef 2b       	or	r30, r31
     6fa:	21 f7       	brne	.-56     	; 0x6c4 <set_RGB_LED+0x2e>
     6fc:	dc 98       	cbi	0x1b, 4	; 27
		RGB_SHCP_1; RGB_SHCP_0;
     6fe:	da 9a       	sbi	0x1b, 2	; 27
     700:	da 98       	cbi	0x1b, 2	; 27
		if(gruen & bit_muster) RGB_DS_1; else RGB_DS_0;
     702:	fb 01       	movw	r30, r22
     704:	e2 23       	and	r30, r18
     706:	f3 23       	and	r31, r19
     708:	ef 2b       	or	r30, r31
     70a:	21 f7       	brne	.-56     	; 0x6d4 <set_RGB_LED+0x3e>
     70c:	dc 98       	cbi	0x1b, 4	; 27
		RGB_SHCP_1; RGB_SHCP_0;
     70e:	da 9a       	sbi	0x1b, 2	; 27
     710:	da 98       	cbi	0x1b, 2	; 27
		if(rot   & bit_muster) RGB_DS_1; else RGB_DS_0;
     712:	fd 01       	movw	r30, r26
     714:	e2 23       	and	r30, r18
     716:	f3 23       	and	r31, r19
     718:	ef 2b       	or	r30, r31
     71a:	21 f7       	brne	.-56     	; 0x6e4 <set_RGB_LED+0x4e>
     71c:	dc 98       	cbi	0x1b, 4	; 27
		RGB_SHCP_1; RGB_SHCP_0;
     71e:	da 9a       	sbi	0x1b, 2	; 27
     720:	da 98       	cbi	0x1b, 2	; 27
		bit_muster >>= 1;
     722:	36 95       	lsr	r19
     724:	27 95       	ror	r18
     726:	91 50       	subi	r25, 0x01	; 1
	
	write_RGB_LCD_activ = 1;
	RGB_SHCP_0;
	RGB_OE_1;
	bit_muster =  0x8000;
	for(i=0; i<16; i++)
     728:	21 f7       	brne	.-56     	; 0x6f2 <set_RGB_LED+0x5c>
		RGB_SHCP_1; RGB_SHCP_0;
		if(rot   & bit_muster) RGB_DS_1; else RGB_DS_0;
		RGB_SHCP_1; RGB_SHCP_0;
		bit_muster >>= 1;
	}
	RGB_STCP_0;
     72a:	d9 98       	cbi	0x1b, 1	; 27
	RGB_STCP_1;								// Daten ins "storage register" übernehmen
     72c:	d9 9a       	sbi	0x1b, 1	; 27
	write_RGB_LCD_activ = 0;
     72e:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <write_RGB_LCD_activ>
     732:	08 95       	ret

00000734 <init_Mocca_Mini>:

void init_Mocca_Mini(void)  //xyz ganze Funktion
{
		// CPU-Clock auf Maximum stellen

	CLKPR	= 0x00;			// System-Takt = 8MHz
     734:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__EEPROM_REGION_LENGTH__+0x7f0073>
	//PRR 	 |= (1 << PRUSI);			// SPI
	//ACSR	 |= (1 << ACD);				// Analog Comparator
	

	// Initialisierung des ADC's
	PRR 	 &= ~(1 << PRADC);			// Stromsparmodus des ADC's ausschalten
     738:	e0 e7       	ldi	r30, 0x70	; 112
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	80 81       	ld	r24, Z
     73e:	8e 7f       	andi	r24, 0xFE	; 254
     740:	80 83       	st	Z, r24
	ADCSRA |=  (1 << ADEN) | (1 << ADSC) | (0 << ADATE);			// A/D-Wandler Enable, Start, !Auto-Trigger
     742:	85 b1       	in	r24, 0x05	; 5
     744:	80 6c       	ori	r24, 0xC0	; 192
     746:	85 b9       	out	0x05, r24	; 5
	//ADCSRA |= (0 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);		// Clock = CPU /  64 ==> ADC_Clock = 125kHz ==> Conversen-Time = 104us  
	//ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);		// Clock = CPU / 128 ==> ADC_Clock = 125kHz ==> Conversen-Time = 208us  
	//ADCSRB |= (0 << ADTS0) | (0 << ADTS1) | (0 << ADTS2);		// Free Running mode
	
	// PWM für LED-Dimmer initialisieren
	DDRB			|= (1 << PB2);													// PB2 = Output
     748:	ba 9a       	sbi	0x17, 2	; 23
	TCCR0A		|= (1 << COM0A1) | (1 << WGM00);				// phase correct PWM mode A
     74a:	80 b7       	in	r24, 0x30	; 48
     74c:	81 68       	ori	r24, 0x81	; 129
     74e:	80 bf       	out	0x30, r24	; 48
	TCCR0A		|= (1 << COM0B1) | (1 << WGM00);				// phase correct PWM mode B
     750:	80 b7       	in	r24, 0x30	; 48
     752:	81 62       	ori	r24, 0x21	; 33
     754:	80 bf       	out	0x30, r24	; 48
//	TOCPMCOE	|=   (1 << TOCC4OE);										// Output enable TOCC4

//	TOCPMSA1	&= ~((1 << TOCC7S1) | (1 << TOCC7S0));	// 00: Output MUX: 8Bit-PWM Timer/Counter0 OC0A auf Pin PB2 - Pin5 - TOCC7 schalten
//	TOCPMCOE	|=   (1 << TOCC7OE);										// Output enable TOCC7
	
	OCR0A			 =   0;									// initial PWM pulse width A
     756:	16 be       	out	0x36, r1	; 54
	OCR0B			 =   10;								// initial PWM pulse width B
     758:	8a e0       	ldi	r24, 0x0A	; 10
     75a:	8c bf       	out	0x3c, r24	; 60
	// Bei System-Takt = 1MHz gilt:
	//TCCR0B |= (0 << CS00) | (1 << CS01);		// PWM-Grundtakt = 254Hz: clock source = CLK/8, start PWM (125kHz => 8us, 8us*255 *2 = 4.08ms => 254Hz)
	//TCCR0B |= (1 << CS00) | (0 << CS01);		// PWM-Grundtakt = 1.96kHz: clock source = CLK  , start PWM (  1MHz => 1us, 1us*255 *2 = 0.51ms => 1.96kHz)
	
	// Bei System-Takt = 8MHz gilt:
	TCCR0B |= (1 << CS00) | (1 << CS01);		// PWM-Grundtakt = 245Hz: clock source = CLK/64  , start PWM ( 125kHz => 8us, 8us*255 *2 = 4.08ms => 245Hz)
     75c:	83 b7       	in	r24, 0x33	; 51
     75e:	83 60       	ori	r24, 0x03	; 3
     760:	83 bf       	out	0x33, r24	; 51
	//TCCR0B |= (0 << CS00) | (1 << CS01);		// PWM-Grundtakt = 1.96kHz: clock source = CLK/8  , start PWM ( 1MHz =>   1us,   1us*255 *2 = 0.51ms => 1.96kHz)
	//TCCR0B |= (1 << CS00) | (0 << CS01);		// PWM-Grundtakt = 15.68kHz: clock source = CLK  , start PWM (  8MHz => 125ns, 125ns*255 *2 = 0.63.75us => 15.68kHz)
	
	// 16-Bit-Timer für 1ms-Ticker
	GTCCR  |= (1 << TSM) | (1 << PSR  );  //Timer anhalten, Prescaler Reset
     762:	83 b5       	in	r24, 0x23	; 35
     764:	81 68       	ori	r24, 0x81	; 129
     766:	83 bd       	out	0x23, r24	; 35
	TCNT1	= 0x1FF;														// 12.12.6 TCNTnH and TCNTnL  Timer/Counter
     768:	8f ef       	ldi	r24, 0xFF	; 255
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	9d bd       	out	0x2d, r25	; 45
     76e:	8c bd       	out	0x2c, r24	; 44
	TCCR1A |= (0 << COM1A1) | (0 << COM1A1);	// Normal Operation
     770:	8f b5       	in	r24, 0x2f	; 47
     772:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (0 <<  WGM11) | (0 <<  WGM10);	// CTC-Mode
     774:	8f b5       	in	r24, 0x2f	; 47
     776:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (0 <<  WGM13) | (1 <<  WGM12);	// CTC-Mode
     778:	8e b5       	in	r24, 0x2e	; 46
     77a:	88 60       	ori	r24, 0x08	; 8
     77c:	8e bd       	out	0x2e, r24	; 46
	//TCCR1B |= (0 <<   CS12) | (0 <<   CS11) | (1 <<   CS10);	// Clock select CLK/1: 1'000'000Hz ==> f = 1'000'000Hz ==> t = 1us
	TCCR1B |= (0 <<   CS12) | (1 <<   CS11) | (0 <<   CS10);	// Clock select CLK/8: 8'000'000Hz ==> f = 1'000'000Hz ==> t = 1us
     77e:	8e b5       	in	r24, 0x2e	; 46
     780:	82 60       	ori	r24, 0x02	; 2
     782:	8e bd       	out	0x2e, r24	; 46
	TCCR1C |= (0 <<  FOC1A);					// no Output Compare
     784:	82 b5       	in	r24, 0x22	; 34
     786:	82 bd       	out	0x22, r24	; 34
	OCR1A   = 1000-1;									// 1us * 1000 = 1ms
     788:	87 ee       	ldi	r24, 0xE7	; 231
     78a:	93 e0       	ldi	r25, 0x03	; 3
     78c:	9b bd       	out	0x2b, r25	; 43
     78e:	8a bd       	out	0x2a, r24	; 42
	TIMSK1 |= (1 << OCIE1A);					// Interrupt Enable
     790:	79 9a       	sbi	0x0f, 1	; 15
	GTCCR  &= ~(1 << TSM);						// Timer starten
     792:	83 b5       	in	r24, 0x23	; 35
     794:	8f 77       	andi	r24, 0x7F	; 127
     796:	83 bd       	out	0x23, r24	; 35
	
	GIMSK  |= (1 << PCIE0);			// General Interrupt Mask Register für PCINT[7:0] any change
     798:	8b b7       	in	r24, 0x3b	; 59
     79a:	80 61       	ori	r24, 0x10	; 16
     79c:	8b bf       	out	0x3b, r24	; 59
	PCMSK0 |= (1 << 2);					// Interrupt für SPI-Eingang setzen (Pin 11/PA2/PCINT2)
     79e:	92 9a       	sbi	0x12, 2	; 18

	sei();										// Global Interrupts aktivieren
     7a0:	78 94       	sei
	
	// Ports als EIN- oder AUSGANG initialisieren
	
	// Ausgänge
	//PUEA  &= ~0x03;			// PORTA Bit 0-1: Pull-Up Widerstand ausschalten
	DDRA  |=  0x03;			// LED 1 und 2 auf Mocca Mini
     7a2:	8a b3       	in	r24, 0x1a	; 26
     7a4:	83 60       	ori	r24, 0x03	; 3
     7a6:	8a bb       	out	0x1a, r24	; 26
	PORTA &= ~0x03;			// LED 1 und 2 ausschalten
     7a8:	8b b3       	in	r24, 0x1b	; 27
     7aa:	8c 7f       	andi	r24, 0xFC	; 252
     7ac:	8b bb       	out	0x1b, r24	; 27
	DDRA  |=  0x02;			// Ausgang PA.1 Pin 12:		RGB storage register clock
     7ae:	d1 9a       	sbi	0x1a, 1	; 26
	
	DDRA  |=  0x04;			// Ausgang PA.2 Pin 11:		RGB shift register clock
     7b0:	d2 9a       	sbi	0x1a, 2	; 26
	DDRA  |=  0x20;			// freier I/O
     7b2:	d5 9a       	sbi	0x1a, 5	; 26
	

	// Eingänge
	
	//DDRA  &= ~0x04;			// Eingang PA2 Pin 11:		Switch vom LCD-RGB-SWITCH einlesen
	DDRA  &= ~0x08;			// Eingang PA3 Pin 10:		A/D-Channel 3 Umgebungs-Temperatur
     7b4:	d3 98       	cbi	0x1a, 3	; 26
	DDRA  &= ~0x80;			// Eingang PA7 Pin  6:		A/D-Channel 7 Potentiometer
     7b6:	d7 98       	cbi	0x1a, 7	; 26
		
	/* Ausgänge für LCD werden im Treiber konfiguriert
	DDRA |= 0x10;								// Port PA4 auf Output setzen LCD-Outputs SOD
	DDRA |= 0x40;								// Port PA6 auf Output setzen LCD-Outputs SCLK	*/

	DDRA  |=  0x04;
     7b8:	d2 9a       	sbi	0x1a, 2	; 26
	DDRB  |=  0x07;			// RGB-LED
     7ba:	87 b3       	in	r24, 0x17	; 23
     7bc:	87 60       	ori	r24, 0x07	; 7
     7be:	87 bb       	out	0x17, r24	; 23
	
	set_RGB_LED(0,0,0);
     7c0:	40 e0       	ldi	r20, 0x00	; 0
     7c2:	50 e0       	ldi	r21, 0x00	; 0
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	64 cf       	rjmp	.-312    	; 0x696 <set_RGB_LED>

000007ce <read_SWITCH>:
{
	u8  i;
	u16 bit_muster, bit_dip_nr, switch_wert;
	
	// Die korrekten Werte wieder ins RGB-Schieberegster schreiben, damit beim nächsten RGB_STCP-Puls (verursacht durch die korrekten Daten übernomen werden.
	RGB_SHCP_0;
     7ce:	da 98       	cbi	0x1b, 2	; 27
	RGB_OE_1;
     7d0:	d8 98       	cbi	0x1b, 0	; 27
     7d2:	40 e1       	ldi	r20, 0x10	; 16
	bit_muster =  0x8000;
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	90 e8       	ldi	r25, 0x80	; 128
     7d8:	1e c0       	rjmp	.+60     	; 0x816 <read_SWITCH+0x48>
	for(i=0; i<16; i++)
	{ if(RGB_blau  & bit_muster) RGB_DS_1; else RGB_DS_0;
     7da:	dc 9a       	sbi	0x1b, 4	; 27
		RGB_SHCP_1; RGB_SHCP_0;
     7dc:	da 9a       	sbi	0x1b, 2	; 27
     7de:	da 98       	cbi	0x1b, 2	; 27
		if(RGB_gruen & bit_muster) RGB_DS_1; else RGB_DS_0;
     7e0:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <RGB_gruen>
     7e4:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <RGB_gruen+0x1>
     7e8:	28 23       	and	r18, r24
     7ea:	39 23       	and	r19, r25
     7ec:	23 2b       	or	r18, r19
     7ee:	09 f4       	brne	.+2      	; 0x7f2 <read_SWITCH+0x24>
     7f0:	75 c0       	rjmp	.+234    	; 0x8dc <read_SWITCH+0x10e>
     7f2:	dc 9a       	sbi	0x1b, 4	; 27
		RGB_SHCP_1; RGB_SHCP_0;
     7f4:	da 9a       	sbi	0x1b, 2	; 27
     7f6:	da 98       	cbi	0x1b, 2	; 27
		if(RGB_rot   & bit_muster) RGB_DS_1; else RGB_DS_0;
     7f8:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <RGB_rot>
     7fc:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <RGB_rot+0x1>
     800:	28 23       	and	r18, r24
     802:	39 23       	and	r19, r25
     804:	23 2b       	or	r18, r19
     806:	89 f0       	breq	.+34     	; 0x82a <read_SWITCH+0x5c>
     808:	dc 9a       	sbi	0x1b, 4	; 27
		RGB_SHCP_1; RGB_SHCP_0;
     80a:	da 9a       	sbi	0x1b, 2	; 27
     80c:	da 98       	cbi	0x1b, 2	; 27
		bit_muster >>= 1;
     80e:	96 95       	lsr	r25
     810:	87 95       	ror	r24
     812:	41 50       	subi	r20, 0x01	; 1
	
	// Die korrekten Werte wieder ins RGB-Schieberegster schreiben, damit beim nächsten RGB_STCP-Puls (verursacht durch die korrekten Daten übernomen werden.
	RGB_SHCP_0;
	RGB_OE_1;
	bit_muster =  0x8000;
	for(i=0; i<16; i++)
     814:	89 f0       	breq	.+34     	; 0x838 <read_SWITCH+0x6a>
	{ if(RGB_blau  & bit_muster) RGB_DS_1; else RGB_DS_0;
     816:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <RGB_blau>
     81a:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <RGB_blau+0x1>
     81e:	28 23       	and	r18, r24
     820:	39 23       	and	r19, r25
     822:	23 2b       	or	r18, r19
     824:	d1 f6       	brne	.-76     	; 0x7da <read_SWITCH+0xc>
     826:	dc 98       	cbi	0x1b, 4	; 27
     828:	d9 cf       	rjmp	.-78     	; 0x7dc <read_SWITCH+0xe>
		RGB_SHCP_1; RGB_SHCP_0;
		if(RGB_gruen & bit_muster) RGB_DS_1; else RGB_DS_0;
		RGB_SHCP_1; RGB_SHCP_0;
		if(RGB_rot   & bit_muster) RGB_DS_1; else RGB_DS_0;
     82a:	dc 98       	cbi	0x1b, 4	; 27
		RGB_SHCP_1; RGB_SHCP_0;
     82c:	da 9a       	sbi	0x1b, 2	; 27
     82e:	da 98       	cbi	0x1b, 2	; 27
		bit_muster >>= 1;
     830:	96 95       	lsr	r25
     832:	87 95       	ror	r24
     834:	41 50       	subi	r20, 0x01	; 1
	
	// Die korrekten Werte wieder ins RGB-Schieberegster schreiben, damit beim nächsten RGB_STCP-Puls (verursacht durch die korrekten Daten übernomen werden.
	RGB_SHCP_0;
	RGB_OE_1;
	bit_muster =  0x8000;
	for(i=0; i<16; i++)
     836:	79 f7       	brne	.-34     	; 0x816 <read_SWITCH+0x48>
		RGB_SHCP_1; RGB_SHCP_0;
		if(RGB_rot   & bit_muster) RGB_DS_1; else RGB_DS_0;
		RGB_SHCP_1; RGB_SHCP_0;
		bit_muster >>= 1;
	}
	RGB_STCP_0;
     838:	d9 98       	cbi	0x1b, 1	; 27
	RGB_STCP_1;								// Daten ins "storage register" übernehmen
     83a:	d9 9a       	sbi	0x1b, 1	; 27
	
	
	RGB_SHCP_0;							// um Eingangskapazität des Ports zu leeren, sonst würde am Eingang anschliessend immer eine 1 gelesen.
     83c:	da 98       	cbi	0x1b, 2	; 27
	DDRA  &= ~0x04;						// Port als Eingang definieren
     83e:	d2 98       	cbi	0x1a, 2	; 26
	
	SWICH_P_Load_0;						// parallel load: paralleles Einlesen aller Eingänge (LOW-Pegel)
     840:	d9 98       	cbi	0x1b, 1	; 27
	SWICH_P_Load_1;						// serial shift : Ab jetzt werden die einzelnen Bits seriell herausgelesen. (HIGH-Pegel)
     842:	d9 9a       	sbi	0x1b, 1	; 27
	
	switch_wert = 0;
	bit_muster = 1;
	SWITCH_CLK_0;						
     844:	dc 98       	cbi	0x1b, 4	; 27
     846:	80 e1       	ldi	r24, 0x10	; 16
	DDRA  &= ~0x04;						// Port als Eingang definieren
	
	SWICH_P_Load_0;						// parallel load: paralleles Einlesen aller Eingänge (LOW-Pegel)
	SWICH_P_Load_1;						// serial shift : Ab jetzt werden die einzelnen Bits seriell herausgelesen. (HIGH-Pegel)
	
	switch_wert = 0;
     848:	40 e0       	ldi	r20, 0x00	; 0
     84a:	50 e0       	ldi	r21, 0x00	; 0
	bit_muster = 1;
     84c:	21 e0       	ldi	r18, 0x01	; 1
     84e:	30 e0       	ldi	r19, 0x00	; 0
	SWITCH_CLK_0;						
	for(i=0; i<16; i++)
	{ 
		if(SWITCH_QH) switch_wert |= bit_muster;
     850:	ca 9b       	sbis	0x19, 2	; 25
     852:	02 c0       	rjmp	.+4      	; 0x858 <read_SWITCH+0x8a>
     854:	42 2b       	or	r20, r18
     856:	53 2b       	or	r21, r19
		bit_muster = bit_muster << 1;
     858:	22 0f       	add	r18, r18
     85a:	33 1f       	adc	r19, r19
			
		SWITCH_CLK_1;
     85c:	dc 9a       	sbi	0x1b, 4	; 27
		SWITCH_CLK_0;
     85e:	dc 98       	cbi	0x1b, 4	; 27
     860:	81 50       	subi	r24, 0x01	; 1
	SWICH_P_Load_1;						// serial shift : Ab jetzt werden die einzelnen Bits seriell herausgelesen. (HIGH-Pegel)
	
	switch_wert = 0;
	bit_muster = 1;
	SWITCH_CLK_0;						
	for(i=0; i<16; i++)
     862:	b1 f7       	brne	.-20     	; 0x850 <read_SWITCH+0x82>
		bit_muster = bit_muster << 1;
			
		SWITCH_CLK_1;
		SWITCH_CLK_0;
	}
	DDRA  |=  0x04;						// Port wieder als Ausgang definieren
     864:	d2 9a       	sbi	0x1a, 2	; 26

	DIP_Switch = 0;
     866:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <DIP_Switch+0x1>
     86a:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <DIP_Switch>
     86e:	2a e0       	ldi	r18, 0x0A	; 10
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	a0 e0       	ldi	r26, 0x00	; 0
     874:	b0 e0       	ldi	r27, 0x00	; 0
	bit_muster =   1;
	bit_dip_nr = 512;
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	72 e0       	ldi	r23, 0x02	; 2
		SWITCH_CLK_0;
	}
	DDRA  |=  0x04;						// Port wieder als Ausgang definieren

	DIP_Switch = 0;
	bit_muster =   1;
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	90 e0       	ldi	r25, 0x00	; 0
	bit_dip_nr = 512;
	for(i=0; i<10; i++)
	{ if(switch_wert & bit_muster) DIP_Switch |= bit_dip_nr;
     87e:	fa 01       	movw	r30, r20
     880:	e8 23       	and	r30, r24
     882:	f9 23       	and	r31, r25
     884:	ef 2b       	or	r30, r31
     886:	19 f0       	breq	.+6      	; 0x88e <read_SWITCH+0xc0>
     888:	a6 2b       	or	r26, r22
     88a:	b7 2b       	or	r27, r23
     88c:	31 e0       	ldi	r19, 0x01	; 1
		bit_muster <<= 1;
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
		bit_dip_nr >>= 1;
     892:	76 95       	lsr	r23
     894:	67 95       	ror	r22
     896:	21 50       	subi	r18, 0x01	; 1
	DDRA  |=  0x04;						// Port wieder als Ausgang definieren

	DIP_Switch = 0;
	bit_muster =   1;
	bit_dip_nr = 512;
	for(i=0; i<10; i++)
     898:	91 f7       	brne	.-28     	; 0x87e <read_SWITCH+0xb0>
     89a:	31 11       	cpse	r19, r1
     89c:	3a c0       	rjmp	.+116    	; 0x912 <read_SWITCH+0x144>
	{ if(switch_wert & bit_muster) DIP_Switch |= bit_dip_nr;
		bit_muster <<= 1;
		bit_dip_nr >>= 1;
	}
	if(switch_wert & 1024) Taste_1 = 1; else Taste_1 = 0;
     89e:	52 ff       	sbrs	r21, 2
     8a0:	1f c0       	rjmp	.+62     	; 0x8e0 <read_SWITCH+0x112>
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <Taste_1+0x1>
     8aa:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <Taste_1>
	if(switch_wert & 2048) Taste_2 = 1; else Taste_2 = 0;
     8ae:	53 ff       	sbrs	r21, 3
     8b0:	1d c0       	rjmp	.+58     	; 0x8ec <read_SWITCH+0x11e>
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <Taste_2+0x1>
     8ba:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Taste_2>
	if(switch_wert & 4096) Taste_3 = 1; else Taste_3 = 0;
     8be:	54 ff       	sbrs	r21, 4
     8c0:	1b c0       	rjmp	.+54     	; 0x8f8 <read_SWITCH+0x12a>
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <Taste_3+0x1>
     8ca:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <Taste_3>
	if(switch_wert & 8192) Taste_4 = 1; else Taste_4 = 0;
     8ce:	55 fd       	sbrc	r21, 5
     8d0:	19 c0       	rjmp	.+50     	; 0x904 <read_SWITCH+0x136>
     8d2:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <Taste_4+0x1>
     8d6:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <Taste_4>
     8da:	08 95       	ret
	RGB_OE_1;
	bit_muster =  0x8000;
	for(i=0; i<16; i++)
	{ if(RGB_blau  & bit_muster) RGB_DS_1; else RGB_DS_0;
		RGB_SHCP_1; RGB_SHCP_0;
		if(RGB_gruen & bit_muster) RGB_DS_1; else RGB_DS_0;
     8dc:	dc 98       	cbi	0x1b, 4	; 27
     8de:	8a cf       	rjmp	.-236    	; 0x7f4 <read_SWITCH+0x26>
	for(i=0; i<10; i++)
	{ if(switch_wert & bit_muster) DIP_Switch |= bit_dip_nr;
		bit_muster <<= 1;
		bit_dip_nr >>= 1;
	}
	if(switch_wert & 1024) Taste_1 = 1; else Taste_1 = 0;
     8e0:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <Taste_1+0x1>
     8e4:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <Taste_1>
	if(switch_wert & 2048) Taste_2 = 1; else Taste_2 = 0;
     8e8:	53 fd       	sbrc	r21, 3
     8ea:	e3 cf       	rjmp	.-58     	; 0x8b2 <read_SWITCH+0xe4>
     8ec:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <Taste_2+0x1>
     8f0:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <Taste_2>
	if(switch_wert & 4096) Taste_3 = 1; else Taste_3 = 0;
     8f4:	54 fd       	sbrc	r21, 4
     8f6:	e5 cf       	rjmp	.-54     	; 0x8c2 <read_SWITCH+0xf4>
     8f8:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <Taste_3+0x1>
     8fc:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <Taste_3>
	if(switch_wert & 8192) Taste_4 = 1; else Taste_4 = 0;
     900:	55 ff       	sbrs	r21, 5
     902:	e7 cf       	rjmp	.-50     	; 0x8d2 <read_SWITCH+0x104>
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <Taste_4+0x1>
     90c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <Taste_4>
     910:	08 95       	ret
     912:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <DIP_Switch+0x1>
     916:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <DIP_Switch>
     91a:	c1 cf       	rjmp	.-126    	; 0x89e <read_SWITCH+0xd0>

0000091c <__vector_2>:
#pragma GCC optimize 0


// Interrupt-Funktion, die auslöst, wenn SPI-Eingang sich verändert (Pin 11/PA2/PCINT2)
ISR (PCINT0_vect) // Interrupt für Inputs PCINT[7:0]
{
     91c:	1f 92       	push	r1
     91e:	0f 92       	push	r0
     920:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
     924:	0f 92       	push	r0
     926:	11 24       	eor	r1, r1
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
}
     930:	00 00       	nop
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	0f 90       	pop	r0
     938:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
     93c:	0f 90       	pop	r0
     93e:	1f 90       	pop	r1
     940:	18 95       	reti

00000942 <__vector_6>:


ISR (TIMER1_COMPA_vect) // Dieser Timer-Interrupt löst im 1ms-Takt aus.
{	
     942:	1f 92       	push	r1
     944:	0f 92       	push	r0
     946:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
     94a:	0f 92       	push	r0
     94c:	11 24       	eor	r1, r1
     94e:	2f 93       	push	r18
     950:	3f 93       	push	r19
     952:	4f 93       	push	r20
     954:	5f 93       	push	r21
     956:	6f 93       	push	r22
     958:	7f 93       	push	r23
     95a:	8f 93       	push	r24
     95c:	9f 93       	push	r25
     95e:	af 93       	push	r26
     960:	bf 93       	push	r27
     962:	ef 93       	push	r30
     964:	ff 93       	push	r31
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	cd b7       	in	r28, 0x3d	; 61
     96c:	de b7       	in	r29, 0x3e	; 62
	
	tick_1ms++;
     96e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <tick_1ms>
     972:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <tick_1ms+0x1>
     976:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <tick_1ms+0x2>
     97a:	b0 91 2d 01 	lds	r27, 0x012D	; 0x80012d <tick_1ms+0x3>
     97e:	01 96       	adiw	r24, 0x01	; 1
     980:	a1 1d       	adc	r26, r1
     982:	b1 1d       	adc	r27, r1
     984:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <tick_1ms>
     988:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <tick_1ms+0x1>
     98c:	a0 93 2c 01 	sts	0x012C, r26	; 0x80012c <tick_1ms+0x2>
     990:	b0 93 2d 01 	sts	0x012D, r27	; 0x80012d <tick_1ms+0x3>
	
	if(tick_1ms_cnt > 0) tick_1ms_cnt--;										// Wird für 1ms-Tick benötigt
     994:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
     998:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
     99c:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <__data_end+0x2>
     9a0:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <__data_end+0x3>
     9a4:	89 2b       	or	r24, r25
     9a6:	8a 2b       	or	r24, r26
     9a8:	8b 2b       	or	r24, r27
     9aa:	99 f0       	breq	.+38     	; 0x9d2 <__vector_6+0x90>
     9ac:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
     9b0:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
     9b4:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <__data_end+0x2>
     9b8:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <__data_end+0x3>
     9bc:	01 97       	sbiw	r24, 0x01	; 1
     9be:	a1 09       	sbc	r26, r1
     9c0:	b1 09       	sbc	r27, r1
     9c2:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
     9c6:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
     9ca:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <__data_end+0x2>
     9ce:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <__data_end+0x3>
	if(LCD_Refresh_Time_cnt > 0) LCD_Refresh_Time_cnt--;
     9d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <LCD_Refresh_Time_cnt>
     9d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <LCD_Refresh_Time_cnt+0x1>
     9da:	89 2b       	or	r24, r25
     9dc:	49 f0       	breq	.+18     	; 0x9f0 <__vector_6+0xae>
     9de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <LCD_Refresh_Time_cnt>
     9e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <LCD_Refresh_Time_cnt+0x1>
     9e6:	01 97       	sbiw	r24, 0x01	; 1
     9e8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <LCD_Refresh_Time_cnt+0x1>
     9ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <LCD_Refresh_Time_cnt>
	
	if (write_RGB_LCD_activ == 0) read_SWITCH();		// liesst alle DIP-Switch, Tasten und Optionen-Jumper ein und speichert die Zustaände in globalen Variablen ab.
     9f0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <write_RGB_LCD_activ>
     9f4:	88 23       	and	r24, r24
     9f6:	09 f4       	brne	.+2      	; 0x9fa <__vector_6+0xb8>
     9f8:	ea de       	rcall	.-556    	; 0x7ce <read_SWITCH>
	
}
     9fa:	00 00       	nop
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	ff 91       	pop	r31
     a02:	ef 91       	pop	r30
     a04:	bf 91       	pop	r27
     a06:	af 91       	pop	r26
     a08:	9f 91       	pop	r25
     a0a:	8f 91       	pop	r24
     a0c:	7f 91       	pop	r23
     a0e:	6f 91       	pop	r22
     a10:	5f 91       	pop	r21
     a12:	4f 91       	pop	r20
     a14:	3f 91       	pop	r19
     a16:	2f 91       	pop	r18
     a18:	0f 90       	pop	r0
     a1a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
     a1e:	0f 90       	pop	r0
     a20:	1f 90       	pop	r1
     a22:	18 95       	reti

00000a24 <crate_code>:
 extern u16 RGB_rot, RGB_gruen, RGB_blau;

 u8 std, min, sec, sec_neu;

 u8* crate_code()
 {
     a24:	cf 92       	push	r12
     a26:	ef 92       	push	r14
     a28:	0f 93       	push	r16
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	00 d0       	rcall	.+0      	; 0xa30 <crate_code+0xc>
     a30:	1f 92       	push	r1
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
	clear_lcd();
     a36:	09 de       	rcall	.-1006   	; 0x64a <clear_lcd>
	write_text(0,0,PSTR("\x1B""                  \x1A"""));
     a38:	8c e3       	ldi	r24, 0x3C	; 60
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	ac 01       	movw	r20, r24
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	96 dc       	rcall	.-1748   	; 0x370 <write_text>
 	write_text(1,0,PSTR("create Code:"));
     a44:	81 e5       	ldi	r24, 0x51	; 81
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	ac 01       	movw	r20, r24
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	90 dc       	rcall	.-1760   	; 0x370 <write_text>
 	write_text(3,18,PSTR("OK"));
     a50:	8e e5       	ldi	r24, 0x5E	; 94
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	ac 01       	movw	r20, r24
     a56:	62 e1       	ldi	r22, 0x12	; 18
     a58:	83 e0       	ldi	r24, 0x03	; 3
     a5a:	8a dc       	rcall	.-1772   	; 0x370 <write_text>

	u8 zahl = 0;
     a5c:	19 82       	std	Y+1, r1	; 0x01
	static u8 code[3];
	u8 x_pos = 0;
     a5e:	1a 82       	std	Y+2, r1	; 0x02
	u8 index = 0;
     a60:	1b 82       	std	Y+3, r1	; 0x03
	write_zahl(2,x_pos,zahl,2,0,0);
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	88 2f       	mov	r24, r24
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	a0 e0       	ldi	r26, 0x00	; 0
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	c1 2c       	mov	r12, r1
     a6e:	e1 2c       	mov	r14, r1
     a70:	02 e0       	ldi	r16, 0x02	; 2
     a72:	9c 01       	movw	r18, r24
     a74:	ad 01       	movw	r20, r26
     a76:	6a 81       	ldd	r22, Y+2	; 0x02
     a78:	82 e0       	ldi	r24, 0x02	; 2
     a7a:	b6 dc       	rcall	.-1684   	; 0x3e8 <write_zahl>
	while (1)
	{
		if(Taste_4 == 1)
     a7c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Taste_4>
     a80:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <Taste_4+0x1>
     a84:	01 97       	sbiw	r24, 0x01	; 1
     a86:	89 f5       	brne	.+98     	; 0xaea <crate_code+0xc6>
		{
			x_pos += 3;
     a88:	8a 81       	ldd	r24, Y+2	; 0x02
     a8a:	8d 5f       	subi	r24, 0xFD	; 253
     a8c:	8a 83       	std	Y+2, r24	; 0x02
			code[index] = zahl;
     a8e:	8b 81       	ldd	r24, Y+3	; 0x03
     a90:	88 2f       	mov	r24, r24
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	81 5d       	subi	r24, 0xD1	; 209
     a96:	9e 4f       	sbci	r25, 0xFE	; 254
     a98:	29 81       	ldd	r18, Y+1	; 0x01
     a9a:	fc 01       	movw	r30, r24
     a9c:	20 83       	st	Z, r18
			index++;
     a9e:	8b 81       	ldd	r24, Y+3	; 0x03
     aa0:	8f 5f       	subi	r24, 0xFF	; 255
     aa2:	8b 83       	std	Y+3, r24	; 0x03
			zahl = 0;
     aa4:	19 82       	std	Y+1, r1	; 0x01
			
			if (index > 2)
     aa6:	8b 81       	ldd	r24, Y+3	; 0x03
     aa8:	83 30       	cpi	r24, 0x03	; 3
     aaa:	08 f0       	brcs	.+2      	; 0xaae <crate_code+0x8a>
     aac:	5f c0       	rjmp	.+190    	; 0xb6c <crate_code+0x148>
			{
				break;
			}
			write_zahl(2,x_pos,zahl,2,0,0);
     aae:	89 81       	ldd	r24, Y+1	; 0x01
     ab0:	88 2f       	mov	r24, r24
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	a0 e0       	ldi	r26, 0x00	; 0
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	c1 2c       	mov	r12, r1
     aba:	e1 2c       	mov	r14, r1
     abc:	02 e0       	ldi	r16, 0x02	; 2
     abe:	9c 01       	movw	r18, r24
     ac0:	ad 01       	movw	r20, r26
     ac2:	6a 81       	ldd	r22, Y+2	; 0x02
     ac4:	82 e0       	ldi	r24, 0x02	; 2
     ac6:	90 dc       	rcall	.-1760   	; 0x3e8 <write_zahl>
			write_text(2,10,PSTR("Applyed"));
     ac8:	81 e6       	ldi	r24, 0x61	; 97
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	ac 01       	movw	r20, r24
     ace:	6a e0       	ldi	r22, 0x0A	; 10
     ad0:	82 e0       	ldi	r24, 0x02	; 2
     ad2:	4e dc       	rcall	.-1892   	; 0x370 <write_text>
			wait_1ms(500);
     ad4:	64 ef       	ldi	r22, 0xF4	; 244
     ad6:	71 e0       	ldi	r23, 0x01	; 1
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	9f db       	rcall	.-2242   	; 0x21c <wait_1ms>
			write_text(2,10,PSTR("       "));
     ade:	89 e6       	ldi	r24, 0x69	; 105
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	ac 01       	movw	r20, r24
     ae4:	6a e0       	ldi	r22, 0x0A	; 10
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	43 dc       	rcall	.-1914   	; 0x370 <write_text>
		}
		if (Taste_3 == 1)
     aea:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <Taste_3>
     aee:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <Taste_3+0x1>
     af2:	01 97       	sbiw	r24, 0x01	; 1
     af4:	c9 f4       	brne	.+50     	; 0xb28 <crate_code+0x104>
		{
			zahl++;
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	8f 5f       	subi	r24, 0xFF	; 255
     afa:	89 83       	std	Y+1, r24	; 0x01
			if(zahl>15){
     afc:	89 81       	ldd	r24, Y+1	; 0x01
     afe:	80 31       	cpi	r24, 0x10	; 16
     b00:	08 f0       	brcs	.+2      	; 0xb04 <crate_code+0xe0>
				zahl = 0;
     b02:	19 82       	std	Y+1, r1	; 0x01
			}
			write_zahl(2,x_pos,zahl,2,0,0);
     b04:	89 81       	ldd	r24, Y+1	; 0x01
     b06:	88 2f       	mov	r24, r24
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	a0 e0       	ldi	r26, 0x00	; 0
     b0c:	b0 e0       	ldi	r27, 0x00	; 0
     b0e:	c1 2c       	mov	r12, r1
     b10:	e1 2c       	mov	r14, r1
     b12:	02 e0       	ldi	r16, 0x02	; 2
     b14:	9c 01       	movw	r18, r24
     b16:	ad 01       	movw	r20, r26
     b18:	6a 81       	ldd	r22, Y+2	; 0x02
     b1a:	82 e0       	ldi	r24, 0x02	; 2
     b1c:	65 dc       	rcall	.-1846   	; 0x3e8 <write_zahl>
			wait_1ms(500);
     b1e:	64 ef       	ldi	r22, 0xF4	; 244
     b20:	71 e0       	ldi	r23, 0x01	; 1
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	7a db       	rcall	.-2316   	; 0x21c <wait_1ms>
		}
		if (Taste_1 == 1)
     b28:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <Taste_1>
     b2c:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <Taste_1+0x1>
     b30:	01 97       	sbiw	r24, 0x01	; 1
     b32:	09 f0       	breq	.+2      	; 0xb36 <crate_code+0x112>
     b34:	a3 cf       	rjmp	.-186    	; 0xa7c <crate_code+0x58>
		{
			zahl--;
     b36:	89 81       	ldd	r24, Y+1	; 0x01
     b38:	81 50       	subi	r24, 0x01	; 1
     b3a:	89 83       	std	Y+1, r24	; 0x01
			if(zahl>15){
     b3c:	89 81       	ldd	r24, Y+1	; 0x01
     b3e:	80 31       	cpi	r24, 0x10	; 16
     b40:	10 f0       	brcs	.+4      	; 0xb46 <crate_code+0x122>
				zahl = 15;
     b42:	8f e0       	ldi	r24, 0x0F	; 15
     b44:	89 83       	std	Y+1, r24	; 0x01
			}
			write_zahl(2,x_pos,zahl,2,0,0);
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	88 2f       	mov	r24, r24
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	a0 e0       	ldi	r26, 0x00	; 0
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	c1 2c       	mov	r12, r1
     b52:	e1 2c       	mov	r14, r1
     b54:	02 e0       	ldi	r16, 0x02	; 2
     b56:	9c 01       	movw	r18, r24
     b58:	ad 01       	movw	r20, r26
     b5a:	6a 81       	ldd	r22, Y+2	; 0x02
     b5c:	82 e0       	ldi	r24, 0x02	; 2
     b5e:	44 dc       	rcall	.-1912   	; 0x3e8 <write_zahl>
			wait_1ms(500);
     b60:	64 ef       	ldi	r22, 0xF4	; 244
     b62:	71 e0       	ldi	r23, 0x01	; 1
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	59 db       	rcall	.-2382   	; 0x21c <wait_1ms>
		}
	}
     b6a:	88 cf       	rjmp	.-240    	; 0xa7c <crate_code+0x58>
			index++;
			zahl = 0;
			
			if (index > 2)
			{
				break;
     b6c:	00 00       	nop
			}
			write_zahl(2,x_pos,zahl,2,0,0);
			wait_1ms(500);
		}
	}
	clear_lcd();
     b6e:	6d dd       	rcall	.-1318   	; 0x64a <clear_lcd>
	write_text(1,0,PSTR("    Code created    "));
     b70:	81 e7       	ldi	r24, 0x71	; 113
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	ac 01       	movw	r20, r24
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	fa db       	rcall	.-2060   	; 0x370 <write_text>
	write_zahl(2,6,code[0],2,0,0);
     b7c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <code.1813>
     b80:	88 2f       	mov	r24, r24
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	a0 e0       	ldi	r26, 0x00	; 0
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	c1 2c       	mov	r12, r1
     b8a:	e1 2c       	mov	r14, r1
     b8c:	02 e0       	ldi	r16, 0x02	; 2
     b8e:	9c 01       	movw	r18, r24
     b90:	ad 01       	movw	r20, r26
     b92:	66 e0       	ldi	r22, 0x06	; 6
     b94:	82 e0       	ldi	r24, 0x02	; 2
     b96:	28 dc       	rcall	.-1968   	; 0x3e8 <write_zahl>
	write_zahl(2,10,code[1],2,0,0);
     b98:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <code.1813+0x1>
     b9c:	88 2f       	mov	r24, r24
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	a0 e0       	ldi	r26, 0x00	; 0
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	c1 2c       	mov	r12, r1
     ba6:	e1 2c       	mov	r14, r1
     ba8:	02 e0       	ldi	r16, 0x02	; 2
     baa:	9c 01       	movw	r18, r24
     bac:	ad 01       	movw	r20, r26
     bae:	6a e0       	ldi	r22, 0x0A	; 10
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	1a dc       	rcall	.-1996   	; 0x3e8 <write_zahl>
	write_zahl(2,14,code[2],2,0,0);
     bb4:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <code.1813+0x2>
     bb8:	88 2f       	mov	r24, r24
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	a0 e0       	ldi	r26, 0x00	; 0
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	c1 2c       	mov	r12, r1
     bc2:	e1 2c       	mov	r14, r1
     bc4:	02 e0       	ldi	r16, 0x02	; 2
     bc6:	9c 01       	movw	r18, r24
     bc8:	ad 01       	movw	r20, r26
     bca:	6e e0       	ldi	r22, 0x0E	; 14
     bcc:	82 e0       	ldi	r24, 0x02	; 2
     bce:	0c dc       	rcall	.-2024   	; 0x3e8 <write_zahl>

	return code;
     bd0:	8f e2       	ldi	r24, 0x2F	; 47
     bd2:	91 e0       	ldi	r25, 0x01	; 1
 }
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	0f 91       	pop	r16
     be0:	ef 90       	pop	r14
     be2:	cf 90       	pop	r12
     be4:	08 95       	ret

00000be6 <start_game>:

 u8 start_game(u8 code[3])
 {
     be6:	cf 92       	push	r12
     be8:	ef 92       	push	r14
     bea:	0f 93       	push	r16
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	2d 97       	sbiw	r28, 0x0d	; 13
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	f8 94       	cli
     bfa:	de bf       	out	0x3e, r29	; 62
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	cd bf       	out	0x3d, r28	; 61
     c00:	9d 87       	std	Y+13, r25	; 0x0d
     c02:	8c 87       	std	Y+12, r24	; 0x0c
	clear_lcd();
     c04:	22 dd       	rcall	.-1468   	; 0x64a <clear_lcd>
	u16 Poti = get_ADC_Channel(7);
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	2b dd       	rcall	.-1450   	; 0x660 <get_ADC_Channel>
     c0a:	99 87       	std	Y+9, r25	; 0x09
     c0c:	88 87       	std	Y+8, r24	; 0x08
	Poti = Poti>>6;
     c0e:	88 85       	ldd	r24, Y+8	; 0x08
     c10:	99 85       	ldd	r25, Y+9	; 0x09
     c12:	00 24       	eor	r0, r0
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	00 1c       	adc	r0, r0
     c1a:	88 0f       	add	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	00 1c       	adc	r0, r0
     c20:	89 2f       	mov	r24, r25
     c22:	90 2d       	mov	r25, r0
     c24:	99 87       	std	Y+9, r25	; 0x09
     c26:	88 87       	std	Y+8, r24	; 0x08
	u16 color = 0x0007;
     c28:	87 e0       	ldi	r24, 0x07	; 7
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	9a 83       	std	Y+2, r25	; 0x02
     c2e:	89 83       	std	Y+1, r24	; 0x01
	u16 crackt = 0x0000;
     c30:	1c 82       	std	Y+4, r1	; 0x04
     c32:	1b 82       	std	Y+3, r1	; 0x03
	set_RGB_LED(color,0,0);
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	9a 81       	ldd	r25, Y+2	; 0x02
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	50 e0       	ldi	r21, 0x00	; 0
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	2a dd       	rcall	.-1452   	; 0x696 <set_RGB_LED>
	u8 i = 0;
     c42:	1d 82       	std	Y+5, r1	; 0x05
	u8 place = 8;
     c44:	88 e0       	ldi	r24, 0x08	; 8
     c46:	8e 83       	std	Y+6, r24	; 0x06

	write_text(3,0,PSTR("       try to crack\x10"));
     c48:	86 e8       	ldi	r24, 0x86	; 134
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	ac 01       	movw	r20, r24
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	8e db       	rcall	.-2276   	; 0x370 <write_text>
	write_text(1,2,PSTR("code: ..,..,..  "));
     c54:	8b e9       	ldi	r24, 0x9B	; 155
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	ac 01       	movw	r20, r24
     c5a:	62 e0       	ldi	r22, 0x02	; 2
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	88 db       	rcall	.-2288   	; 0x370 <write_text>

	while(i<3)
     c60:	95 c0       	rjmp	.+298    	; 0xd8c <start_game+0x1a6>
	{
		u8 is_in_while = 0;
     c62:	1f 82       	std	Y+7, r1	; 0x07
		while (is_in_while == 0)
     c64:	8f c0       	rjmp	.+286    	; 0xd84 <start_game+0x19e>
		{
			u16 Poti = get_ADC_Channel(7);
     c66:	87 e0       	ldi	r24, 0x07	; 7
     c68:	fb dc       	rcall	.-1546   	; 0x660 <get_ADC_Channel>
     c6a:	9b 87       	std	Y+11, r25	; 0x0b
     c6c:	8a 87       	std	Y+10, r24	; 0x0a
			Poti = Poti>>6;
     c6e:	8a 85       	ldd	r24, Y+10	; 0x0a
     c70:	9b 85       	ldd	r25, Y+11	; 0x0b
     c72:	00 24       	eor	r0, r0
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	00 1c       	adc	r0, r0
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	00 1c       	adc	r0, r0
     c80:	89 2f       	mov	r24, r25
     c82:	90 2d       	mov	r25, r0
     c84:	9b 87       	std	Y+11, r25	; 0x0b
     c86:	8a 87       	std	Y+10, r24	; 0x0a

			if (Poti==code[i])
     c88:	8d 81       	ldd	r24, Y+5	; 0x05
     c8a:	88 2f       	mov	r24, r24
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	2c 85       	ldd	r18, Y+12	; 0x0c
     c90:	3d 85       	ldd	r19, Y+13	; 0x0d
     c92:	82 0f       	add	r24, r18
     c94:	93 1f       	adc	r25, r19
     c96:	fc 01       	movw	r30, r24
     c98:	80 81       	ld	r24, Z
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	8a 85       	ldd	r24, Y+10	; 0x0a
     ca0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	09 f0       	breq	.+2      	; 0xcaa <start_game+0xc4>
     ca8:	46 c0       	rjmp	.+140    	; 0xd36 <start_game+0x150>
			{
				set_RGB_LED(0,0x0007,0);
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	50 e0       	ldi	r21, 0x00	; 0
     cae:	67 e0       	ldi	r22, 0x07	; 7
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	ef dc       	rcall	.-1570   	; 0x696 <set_RGB_LED>
				if (Taste_4 == 1)
     cb8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Taste_4>
     cbc:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <Taste_4+0x1>
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <start_game+0xe0>
     cc4:	40 c0       	rjmp	.+128    	; 0xd46 <start_game+0x160>
				{
					crackt = crackt<<1;
     cc6:	8b 81       	ldd	r24, Y+3	; 0x03
     cc8:	9c 81       	ldd	r25, Y+4	; 0x04
     cca:	88 0f       	add	r24, r24
     ccc:	99 1f       	adc	r25, r25
     cce:	9c 83       	std	Y+4, r25	; 0x04
     cd0:	8b 83       	std	Y+3, r24	; 0x03
					crackt++;
     cd2:	8b 81       	ldd	r24, Y+3	; 0x03
     cd4:	9c 81       	ldd	r25, Y+4	; 0x04
     cd6:	01 96       	adiw	r24, 0x01	; 1
     cd8:	9c 83       	std	Y+4, r25	; 0x04
     cda:	8b 83       	std	Y+3, r24	; 0x03
					color = 0x0007-crackt;
     cdc:	27 e0       	ldi	r18, 0x07	; 7
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	9c 81       	ldd	r25, Y+4	; 0x04
     ce4:	a9 01       	movw	r20, r18
     ce6:	48 1b       	sub	r20, r24
     ce8:	59 0b       	sbc	r21, r25
     cea:	ca 01       	movw	r24, r20
     cec:	9a 83       	std	Y+2, r25	; 0x02
     cee:	89 83       	std	Y+1, r24	; 0x01
					is_in_while = 1;
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	8f 83       	std	Y+7, r24	; 0x07
					write_zahl(1,place,code[i],2,0,0);
     cf4:	8d 81       	ldd	r24, Y+5	; 0x05
     cf6:	88 2f       	mov	r24, r24
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	2c 85       	ldd	r18, Y+12	; 0x0c
     cfc:	3d 85       	ldd	r19, Y+13	; 0x0d
     cfe:	82 0f       	add	r24, r18
     d00:	93 1f       	adc	r25, r19
     d02:	fc 01       	movw	r30, r24
     d04:	80 81       	ld	r24, Z
     d06:	88 2f       	mov	r24, r24
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	a0 e0       	ldi	r26, 0x00	; 0
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	c1 2c       	mov	r12, r1
     d10:	e1 2c       	mov	r14, r1
     d12:	02 e0       	ldi	r16, 0x02	; 2
     d14:	9c 01       	movw	r18, r24
     d16:	ad 01       	movw	r20, r26
     d18:	6e 81       	ldd	r22, Y+6	; 0x06
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	65 db       	rcall	.-2358   	; 0x3e8 <write_zahl>
					place+=3;
     d1e:	8e 81       	ldd	r24, Y+6	; 0x06
     d20:	8d 5f       	subi	r24, 0xFD	; 253
     d22:	8e 83       	std	Y+6, r24	; 0x06
					i++;
     d24:	8d 81       	ldd	r24, Y+5	; 0x05
     d26:	8f 5f       	subi	r24, 0xFF	; 255
     d28:	8d 83       	std	Y+5, r24	; 0x05
					wait_1ms(500);
     d2a:	64 ef       	ldi	r22, 0xF4	; 244
     d2c:	71 e0       	ldi	r23, 0x01	; 1
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	74 da       	rcall	.-2840   	; 0x21c <wait_1ms>
     d34:	08 c0       	rjmp	.+16     	; 0xd46 <start_game+0x160>
				}
			}
			else
			{
				set_RGB_LED(color,crackt,0);
     d36:	2b 81       	ldd	r18, Y+3	; 0x03
     d38:	3c 81       	ldd	r19, Y+4	; 0x04
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	9a 81       	ldd	r25, Y+2	; 0x02
     d3e:	40 e0       	ldi	r20, 0x00	; 0
     d40:	50 e0       	ldi	r21, 0x00	; 0
     d42:	b9 01       	movw	r22, r18
     d44:	a8 dc       	rcall	.-1712   	; 0x696 <set_RGB_LED>
			}
			if (Taste_4 == 1 && Poti != code[i])
     d46:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Taste_4>
     d4a:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <Taste_4+0x1>
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	c9 f4       	brne	.+50     	; 0xd84 <start_game+0x19e>
     d52:	8d 81       	ldd	r24, Y+5	; 0x05
     d54:	88 2f       	mov	r24, r24
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	2c 85       	ldd	r18, Y+12	; 0x0c
     d5a:	3d 85       	ldd	r19, Y+13	; 0x0d
     d5c:	82 0f       	add	r24, r18
     d5e:	93 1f       	adc	r25, r19
     d60:	fc 01       	movw	r30, r24
     d62:	80 81       	ld	r24, Z
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	8a 85       	ldd	r24, Y+10	; 0x0a
     d6a:	9b 85       	ldd	r25, Y+11	; 0x0b
     d6c:	28 17       	cp	r18, r24
     d6e:	39 07       	cpc	r19, r25
     d70:	49 f0       	breq	.+18     	; 0xd84 <start_game+0x19e>
			{
				set_RGB_LED(0,0,0);
     d72:	40 e0       	ldi	r20, 0x00	; 0
     d74:	50 e0       	ldi	r21, 0x00	; 0
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	8b dc       	rcall	.-1770   	; 0x696 <set_RGB_LED>
				return 0;
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	10 c0       	rjmp	.+32     	; 0xda4 <start_game+0x1be>
	write_text(1,2,PSTR("code: ..,..,..  "));

	while(i<3)
	{
		u8 is_in_while = 0;
		while (is_in_while == 0)
     d84:	8f 81       	ldd	r24, Y+7	; 0x07
     d86:	88 23       	and	r24, r24
     d88:	09 f4       	brne	.+2      	; 0xd8c <start_game+0x1a6>
     d8a:	6d cf       	rjmp	.-294    	; 0xc66 <start_game+0x80>
	u8 place = 8;

	write_text(3,0,PSTR("       try to crack\x10"));
	write_text(1,2,PSTR("code: ..,..,..  "));

	while(i<3)
     d8c:	8d 81       	ldd	r24, Y+5	; 0x05
     d8e:	83 30       	cpi	r24, 0x03	; 3
     d90:	08 f4       	brcc	.+2      	; 0xd94 <start_game+0x1ae>
     d92:	67 cf       	rjmp	.-306    	; 0xc62 <start_game+0x7c>
				set_RGB_LED(0,0,0);
				return 0;
			}
		}
	}
	set_RGB_LED(0,0,0);
     d94:	40 e0       	ldi	r20, 0x00	; 0
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	7a dc       	rcall	.-1804   	; 0x696 <set_RGB_LED>
	return 1;
     da2:	81 e0       	ldi	r24, 0x01	; 1
	 
}
     da4:	2d 96       	adiw	r28, 0x0d	; 13
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	f8 94       	cli
     daa:	de bf       	out	0x3e, r29	; 62
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	cd bf       	out	0x3d, r28	; 61
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	0f 91       	pop	r16
     db6:	ef 90       	pop	r14
     db8:	cf 90       	pop	r12
     dba:	08 95       	ret

00000dbc <code_cracker_game>:

void code_cracker_game()
{
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	00 d0       	rcall	.+0      	; 0xdc2 <code_cracker_game+0x6>
     dc2:	1f 92       	push	r1
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
	clear_lcd();
     dc8:	40 dc       	rcall	.-1920   	; 0x64a <clear_lcd>
	u8 *code_array;
	write_text(0,0,PSTR("\x11"" crate the code "));
     dca:	8c ea       	ldi	r24, 0xAC	; 172
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	ac 01       	movw	r20, r24
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	cd da       	rcall	.-2662   	; 0x370 <write_text>
	write_text(3,13,PSTR(" back \x10"));
     dd6:	8e eb       	ldi	r24, 0xBE	; 190
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	ac 01       	movw	r20, r24
     ddc:	6d e0       	ldi	r22, 0x0D	; 13
     dde:	83 e0       	ldi	r24, 0x03	; 3
     de0:	c7 da       	rcall	.-2674   	; 0x370 <write_text>
	wait_1ms(500);
     de2:	64 ef       	ldi	r22, 0xF4	; 244
     de4:	71 e0       	ldi	r23, 0x01	; 1
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	18 da       	rcall	.-3024   	; 0x21c <wait_1ms>

	while (1)
	{
		if (Taste_1 == 1)
     dec:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <Taste_1>
     df0:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <Taste_1+0x1>
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	a9 f4       	brne	.+42     	; 0xe22 <code_cracker_game+0x66>
		{
			code_array = crate_code();
     df8:	15 de       	rcall	.-982    	; 0xa24 <crate_code>
     dfa:	9a 83       	std	Y+2, r25	; 0x02
     dfc:	89 83       	std	Y+1, r24	; 0x01
			clear_lcd();
     dfe:	25 dc       	rcall	.-1974   	; 0x64a <clear_lcd>
			write_text(0,0,PSTR("\x11"" crate the code "));
     e00:	86 ec       	ldi	r24, 0xC6	; 198
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	ac 01       	movw	r20, r24
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	b2 da       	rcall	.-2716   	; 0x370 <write_text>
			write_text(3,0,PSTR("\x11"" start   \xDA""   back \x10"));
     e0c:	88 ed       	ldi	r24, 0xD8	; 216
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	ac 01       	movw	r20, r24
     e12:	60 e0       	ldi	r22, 0x00	; 0
     e14:	83 e0       	ldi	r24, 0x03	; 3
     e16:	ac da       	rcall	.-2728   	; 0x370 <write_text>
			wait_1ms(500);
     e18:	64 ef       	ldi	r22, 0xF4	; 244
     e1a:	71 e0       	ldi	r23, 0x01	; 1
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	fd d9       	rcall	.-3078   	; 0x21c <wait_1ms>
		}
		if (Taste_2 == 1)
     e22:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Taste_2>
     e26:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <Taste_2+0x1>
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	d1 f5       	brne	.+116    	; 0xea2 <code_cracker_game+0xe6>
		{
			u8 game_result = start_game(code_array);
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	9a 81       	ldd	r25, Y+2	; 0x02
     e32:	d9 de       	rcall	.-590    	; 0xbe6 <start_game>
     e34:	8b 83       	std	Y+3, r24	; 0x03
			if (game_result == 1)
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	81 30       	cpi	r24, 0x01	; 1
     e3a:	d1 f4       	brne	.+52     	; 0xe70 <code_cracker_game+0xb4>
			{
				clear_lcd();
     e3c:	06 dc       	rcall	.-2036   	; 0x64a <clear_lcd>
				write_text(1,0,PSTR("      YOU WIN      "));
     e3e:	8d ee       	ldi	r24, 0xED	; 237
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	ac 01       	movw	r20, r24
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	93 da       	rcall	.-2778   	; 0x370 <write_text>
				wait_1ms(10000);
     e4a:	60 e1       	ldi	r22, 0x10	; 16
     e4c:	77 e2       	ldi	r23, 0x27	; 39
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	e4 d9       	rcall	.-3128   	; 0x21c <wait_1ms>
				clear_lcd();
     e54:	fa db       	rcall	.-2060   	; 0x64a <clear_lcd>
				write_text(0,0,PSTR("\x11"" crate the code "));
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	91 e0       	ldi	r25, 0x01	; 1
     e5a:	ac 01       	movw	r20, r24
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	87 da       	rcall	.-2802   	; 0x370 <write_text>
				write_text(3,0,PSTR("\x11"" start   \xDA""   back \x10"));
     e62:	83 e1       	ldi	r24, 0x13	; 19
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	ac 01       	movw	r20, r24
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	83 e0       	ldi	r24, 0x03	; 3
     e6c:	81 da       	rcall	.-2814   	; 0x370 <write_text>
     e6e:	19 c0       	rjmp	.+50     	; 0xea2 <code_cracker_game+0xe6>

			} 
			else
			{
				clear_lcd();
     e70:	ec db       	rcall	.-2088   	; 0x64a <clear_lcd>
				write_text(1,0,PSTR("      YOU LOSE     "));
     e72:	88 e2       	ldi	r24, 0x28	; 40
     e74:	91 e0       	ldi	r25, 0x01	; 1
     e76:	ac 01       	movw	r20, r24
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	79 da       	rcall	.-2830   	; 0x370 <write_text>
				wait_1ms(10000);
     e7e:	60 e1       	ldi	r22, 0x10	; 16
     e80:	77 e2       	ldi	r23, 0x27	; 39
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	ca d9       	rcall	.-3180   	; 0x21c <wait_1ms>
				clear_lcd();
     e88:	e0 db       	rcall	.-2112   	; 0x64a <clear_lcd>
				write_text(0,0,PSTR("\x11"" crate the code "));
     e8a:	8c e3       	ldi	r24, 0x3C	; 60
     e8c:	91 e0       	ldi	r25, 0x01	; 1
     e8e:	ac 01       	movw	r20, r24
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	6d da       	rcall	.-2854   	; 0x370 <write_text>
				write_text(3,0,PSTR("\x11"" start   \xDA""   back \x10"));
     e96:	8e e4       	ldi	r24, 0x4E	; 78
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	ac 01       	movw	r20, r24
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	83 e0       	ldi	r24, 0x03	; 3
     ea0:	67 da       	rcall	.-2866   	; 0x370 <write_text>
			}
		}
		if (Taste_4 == 1)
     ea2:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Taste_4>
     ea6:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <Taste_4+0x1>
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	09 f0       	breq	.+2      	; 0xeb0 <code_cracker_game+0xf4>
     eae:	9e cf       	rjmp	.-196    	; 0xdec <code_cracker_game+0x30>
		{
			clear_lcd();
     eb0:	cc db       	rcall	.-2152   	; 0x64a <clear_lcd>
			wait_1ms(100);
     eb2:	64 e6       	ldi	r22, 0x64	; 100
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	b0 d9       	rcall	.-3232   	; 0x21c <wait_1ms>
			break;
     ebc:	00 00       	nop
		}
	}
}
     ebe:	00 00       	nop
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	08 95       	ret

00000ecc <start_fighter_game>:

u8 start_fighter_game()
{
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	ce 55       	subi	r28, 0x5E	; 94
     ed6:	d1 09       	sbc	r29, r1
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	f8 94       	cli
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	cd bf       	out	0x3d, r28	; 61
	clear_lcd();
     ee2:	b3 db       	rcall	.-2202   	; 0x64a <clear_lcd>

	u16 life_points = 0x001F;
     ee4:	8f e1       	ldi	r24, 0x1F	; 31
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	9a 83       	std	Y+2, r25	; 0x02
     eea:	89 83       	std	Y+1, r24	; 0x01
	u16 losted_points = 0;
     eec:	1e 86       	std	Y+14, r1	; 0x0e
     eee:	1d 86       	std	Y+13, r1	; 0x0d

	//player vars
	u8 player_x_pos = 3;
     ef0:	83 e0       	ldi	r24, 0x03	; 3
     ef2:	8f 87       	std	Y+15, r24	; 0x0f
	u8 player_y_pos = 1;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	8b 83       	std	Y+3, r24	; 0x03
	u8 player_save_time = 0;
     ef8:	1c 82       	std	Y+4, r1	; 0x04
	u8 cool_down = 5;
     efa:	85 e0       	ldi	r24, 0x05	; 5
     efc:	8d 83       	std	Y+5, r24	; 0x05

	//target vars
	u8 respawn = 0;
     efe:	1e 82       	std	Y+6, r1	; 0x06
	u8 target_y_pos = 15;
     f00:	8f e0       	ldi	r24, 0x0F	; 15
     f02:	88 8b       	std	Y+16, r24	; 0x10
	u8 target_x_pos = 19;
     f04:	83 e1       	ldi	r24, 0x13	; 19
     f06:	89 8b       	std	Y+17, r24	; 0x11
	u8 move_cool_down = 5;
     f08:	85 e0       	ldi	r24, 0x05	; 5
     f0a:	8f 83       	std	Y+7, r24	; 0x07
	u8 target_y_poses[20];
	for (u8 j = 0;j<20;j++)
     f0c:	18 86       	std	Y+8, r1	; 0x08
     f0e:	0e c0       	rjmp	.+28     	; 0xf2c <start_fighter_game+0x60>
	{
		target_y_poses[j] = 15;
     f10:	88 85       	ldd	r24, Y+8	; 0x08
     f12:	88 2f       	mov	r24, r24
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	9e 01       	movw	r18, r28
     f18:	2c 5e       	subi	r18, 0xEC	; 236
     f1a:	3f 4f       	sbci	r19, 0xFF	; 255
     f1c:	82 0f       	add	r24, r18
     f1e:	93 1f       	adc	r25, r19
     f20:	2f e0       	ldi	r18, 0x0F	; 15
     f22:	fc 01       	movw	r30, r24
     f24:	20 83       	st	Z, r18
	u8 respawn = 0;
	u8 target_y_pos = 15;
	u8 target_x_pos = 19;
	u8 move_cool_down = 5;
	u8 target_y_poses[20];
	for (u8 j = 0;j<20;j++)
     f26:	88 85       	ldd	r24, Y+8	; 0x08
     f28:	8f 5f       	subi	r24, 0xFF	; 255
     f2a:	88 87       	std	Y+8, r24	; 0x08
     f2c:	88 85       	ldd	r24, Y+8	; 0x08
     f2e:	84 31       	cpi	r24, 0x14	; 20
     f30:	78 f3       	brcs	.-34     	; 0xf10 <start_fighter_game+0x44>
	{
		target_y_poses[j] = 15;
	}
	u8 target_x_poses[20];
	for (u8 j = 0;j<20;j++)
     f32:	19 86       	std	Y+9, r1	; 0x09
     f34:	0e c0       	rjmp	.+28     	; 0xf52 <start_fighter_game+0x86>
	{
		target_x_poses[j] = 19;
     f36:	89 85       	ldd	r24, Y+9	; 0x09
     f38:	88 2f       	mov	r24, r24
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	9e 01       	movw	r18, r28
     f3e:	28 5d       	subi	r18, 0xD8	; 216
     f40:	3f 4f       	sbci	r19, 0xFF	; 255
     f42:	82 0f       	add	r24, r18
     f44:	93 1f       	adc	r25, r19
     f46:	23 e1       	ldi	r18, 0x13	; 19
     f48:	fc 01       	movw	r30, r24
     f4a:	20 83       	st	Z, r18
	for (u8 j = 0;j<20;j++)
	{
		target_y_poses[j] = 15;
	}
	u8 target_x_poses[20];
	for (u8 j = 0;j<20;j++)
     f4c:	89 85       	ldd	r24, Y+9	; 0x09
     f4e:	8f 5f       	subi	r24, 0xFF	; 255
     f50:	89 87       	std	Y+9, r24	; 0x09
     f52:	89 85       	ldd	r24, Y+9	; 0x09
     f54:	84 31       	cpi	r24, 0x14	; 20
     f56:	78 f3       	brcs	.-34     	; 0xf36 <start_fighter_game+0x6a>
	{
		target_x_poses[j] = 19;
	}

	//other game vars
	u8 ind = 0;
     f58:	1a 86       	std	Y+10, r1	; 0x0a
	u8 spawn_points[35] = {1,0,2,1,1,0,3,2,3,3,2,0,2,3,0,1,2,3,1,3,2,1,0,0,3,0,1,2,3,0,3,2,1,0,1};
     f5a:	83 e2       	ldi	r24, 0x23	; 35
     f5c:	e2 e0       	ldi	r30, 0x02	; 2
     f5e:	f1 e0       	ldi	r31, 0x01	; 1
     f60:	de 01       	movw	r26, r28
     f62:	dc 96       	adiw	r26, 0x3c	; 60
     f64:	01 90       	ld	r0, Z+
     f66:	0d 92       	st	X+, r0
     f68:	8a 95       	dec	r24
     f6a:	e1 f7       	brne	.-8      	; 0xf64 <start_fighter_game+0x98>
	u16 fps = 40;
     f6c:	88 e2       	ldi	r24, 0x28	; 40
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	9b 8b       	std	Y+19, r25	; 0x13
     f72:	8a 8b       	std	Y+18, r24	; 0x12

	set_RGB_LED(losted_points,0,life_points);
     f74:	29 81       	ldd	r18, Y+1	; 0x01
     f76:	3a 81       	ldd	r19, Y+2	; 0x02
     f78:	8d 85       	ldd	r24, Y+13	; 0x0d
     f7a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f7c:	a9 01       	movw	r20, r18
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	89 db       	rcall	.-2286   	; 0x696 <set_RGB_LED>

	while (life_points>0)
     f84:	78 c1       	rjmp	.+752    	; 0x1276 <start_fighter_game+0x3aa>
	{
		//create a new enemy
		if (respawn<1)
     f86:	8e 81       	ldd	r24, Y+6	; 0x06
     f88:	88 23       	and	r24, r24
     f8a:	09 f0       	breq	.+2      	; 0xf8e <start_fighter_game+0xc2>
     f8c:	4c c0       	rjmp	.+152    	; 0x1026 <start_fighter_game+0x15a>
		{
			//check game end
			if (ind==35)
     f8e:	8a 85       	ldd	r24, Y+10	; 0x0a
     f90:	83 32       	cpi	r24, 0x23	; 35
     f92:	71 f4       	brne	.+28     	; 0xfb0 <start_fighter_game+0xe4>
			{
				clear_lcd();
     f94:	5a db       	rcall	.-2380   	; 0x64a <clear_lcd>
				write_text(1,6,PSTR("YOU WIN"));
     f96:	83 e6       	ldi	r24, 0x63	; 99
     f98:	91 e0       	ldi	r25, 0x01	; 1
     f9a:	ac 01       	movw	r20, r24
     f9c:	66 e0       	ldi	r22, 0x06	; 6
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	e7 d9       	rcall	.-3122   	; 0x370 <write_text>
				wait_1ms(2000);
     fa2:	60 ed       	ldi	r22, 0xD0	; 208
     fa4:	77 e0       	ldi	r23, 0x07	; 7
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	38 d9       	rcall	.-3472   	; 0x21c <wait_1ms>
				return 1;
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	75 c1       	rjmp	.+746    	; 0x129a <start_fighter_game+0x3ce>
			}
			target_y_pos = spawn_points[ind];
     fb0:	8a 85       	ldd	r24, Y+10	; 0x0a
     fb2:	88 2f       	mov	r24, r24
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	9e 01       	movw	r18, r28
     fb8:	24 5c       	subi	r18, 0xC4	; 196
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
     fbc:	82 0f       	add	r24, r18
     fbe:	93 1f       	adc	r25, r19
     fc0:	fc 01       	movw	r30, r24
     fc2:	80 81       	ld	r24, Z
     fc4:	88 8b       	std	Y+16, r24	; 0x10
			ind++;
     fc6:	8a 85       	ldd	r24, Y+10	; 0x0a
     fc8:	8f 5f       	subi	r24, 0xFF	; 255
     fca:	8a 87       	std	Y+10, r24	; 0x0a

			for (u8 j = 0;j<20;j++)
     fcc:	1b 86       	std	Y+11, r1	; 0x0b
     fce:	26 c0       	rjmp	.+76     	; 0x101c <start_fighter_game+0x150>
			{
				if (target_y_poses[j] == 15)
     fd0:	8b 85       	ldd	r24, Y+11	; 0x0b
     fd2:	88 2f       	mov	r24, r24
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	9e 01       	movw	r18, r28
     fd8:	2c 5e       	subi	r18, 0xEC	; 236
     fda:	3f 4f       	sbci	r19, 0xFF	; 255
     fdc:	82 0f       	add	r24, r18
     fde:	93 1f       	adc	r25, r19
     fe0:	fc 01       	movw	r30, r24
     fe2:	80 81       	ld	r24, Z
     fe4:	8f 30       	cpi	r24, 0x0F	; 15
     fe6:	b9 f4       	brne	.+46     	; 0x1016 <start_fighter_game+0x14a>
				{
					target_y_poses[j] = target_y_pos;
     fe8:	8b 85       	ldd	r24, Y+11	; 0x0b
     fea:	88 2f       	mov	r24, r24
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	9e 01       	movw	r18, r28
     ff0:	2c 5e       	subi	r18, 0xEC	; 236
     ff2:	3f 4f       	sbci	r19, 0xFF	; 255
     ff4:	82 0f       	add	r24, r18
     ff6:	93 1f       	adc	r25, r19
     ff8:	28 89       	ldd	r18, Y+16	; 0x10
     ffa:	fc 01       	movw	r30, r24
     ffc:	20 83       	st	Z, r18
					target_x_poses[j] = target_x_pos;
     ffe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	9e 01       	movw	r18, r28
    1006:	28 5d       	subi	r18, 0xD8	; 216
    1008:	3f 4f       	sbci	r19, 0xFF	; 255
    100a:	82 0f       	add	r24, r18
    100c:	93 1f       	adc	r25, r19
    100e:	29 89       	ldd	r18, Y+17	; 0x11
    1010:	fc 01       	movw	r30, r24
    1012:	20 83       	st	Z, r18
					break;
    1014:	06 c0       	rjmp	.+12     	; 0x1022 <start_fighter_game+0x156>
				return 1;
			}
			target_y_pos = spawn_points[ind];
			ind++;

			for (u8 j = 0;j<20;j++)
    1016:	8b 85       	ldd	r24, Y+11	; 0x0b
    1018:	8f 5f       	subi	r24, 0xFF	; 255
    101a:	8b 87       	std	Y+11, r24	; 0x0b
    101c:	8b 85       	ldd	r24, Y+11	; 0x0b
    101e:	84 31       	cpi	r24, 0x14	; 20
    1020:	b8 f2       	brcs	.-82     	; 0xfd0 <start_fighter_game+0x104>
					target_x_poses[j] = target_x_pos;
					break;
				}
			}

			respawn = 20;
    1022:	84 e1       	ldi	r24, 0x14	; 20
    1024:	8e 83       	std	Y+6, r24	; 0x06
		}
		//move enemy
		if(move_cool_down == 0)
    1026:	8f 81       	ldd	r24, Y+7	; 0x07
    1028:	88 23       	and	r24, r24
    102a:	09 f0       	breq	.+2      	; 0x102e <start_fighter_game+0x162>
    102c:	d0 c0       	rjmp	.+416    	; 0x11ce <start_fighter_game+0x302>
		{
			for (u8 i = 0; i<20;i++)
    102e:	1c 86       	std	Y+12, r1	; 0x0c
    1030:	c8 c0       	rjmp	.+400    	; 0x11c2 <start_fighter_game+0x2f6>
			{
				if (target_y_poses[i]<4)
    1032:	8c 85       	ldd	r24, Y+12	; 0x0c
    1034:	88 2f       	mov	r24, r24
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	9e 01       	movw	r18, r28
    103a:	2c 5e       	subi	r18, 0xEC	; 236
    103c:	3f 4f       	sbci	r19, 0xFF	; 255
    103e:	82 0f       	add	r24, r18
    1040:	93 1f       	adc	r25, r19
    1042:	fc 01       	movw	r30, r24
    1044:	80 81       	ld	r24, Z
    1046:	84 30       	cpi	r24, 0x04	; 4
    1048:	08 f0       	brcs	.+2      	; 0x104c <start_fighter_game+0x180>
    104a:	46 c0       	rjmp	.+140    	; 0x10d8 <start_fighter_game+0x20c>
				{
					write_text(target_y_poses[i],target_x_poses[i],PSTR(" "));
    104c:	4b e6       	ldi	r20, 0x6B	; 107
    104e:	51 e0       	ldi	r21, 0x01	; 1
    1050:	8c 85       	ldd	r24, Y+12	; 0x0c
    1052:	88 2f       	mov	r24, r24
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	9e 01       	movw	r18, r28
    1058:	28 5d       	subi	r18, 0xD8	; 216
    105a:	3f 4f       	sbci	r19, 0xFF	; 255
    105c:	82 0f       	add	r24, r18
    105e:	93 1f       	adc	r25, r19
    1060:	fc 01       	movw	r30, r24
    1062:	60 81       	ld	r22, Z
    1064:	8c 85       	ldd	r24, Y+12	; 0x0c
    1066:	88 2f       	mov	r24, r24
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	9e 01       	movw	r18, r28
    106c:	2c 5e       	subi	r18, 0xEC	; 236
    106e:	3f 4f       	sbci	r19, 0xFF	; 255
    1070:	82 0f       	add	r24, r18
    1072:	93 1f       	adc	r25, r19
    1074:	fc 01       	movw	r30, r24
    1076:	80 81       	ld	r24, Z
    1078:	7b d9       	rcall	.-3338   	; 0x370 <write_text>
					target_x_poses[i] = target_x_poses[i]-1;
    107a:	8c 85       	ldd	r24, Y+12	; 0x0c
    107c:	88 2f       	mov	r24, r24
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	2c 85       	ldd	r18, Y+12	; 0x0c
    1082:	22 2f       	mov	r18, r18
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	ae 01       	movw	r20, r28
    1088:	48 5d       	subi	r20, 0xD8	; 216
    108a:	5f 4f       	sbci	r21, 0xFF	; 255
    108c:	24 0f       	add	r18, r20
    108e:	35 1f       	adc	r19, r21
    1090:	f9 01       	movw	r30, r18
    1092:	20 81       	ld	r18, Z
    1094:	4f ef       	ldi	r20, 0xFF	; 255
    1096:	42 0f       	add	r20, r18
    1098:	9e 01       	movw	r18, r28
    109a:	28 5d       	subi	r18, 0xD8	; 216
    109c:	3f 4f       	sbci	r19, 0xFF	; 255
    109e:	82 0f       	add	r24, r18
    10a0:	93 1f       	adc	r25, r19
    10a2:	fc 01       	movw	r30, r24
    10a4:	40 83       	st	Z, r20
					write_text(target_y_poses[i],target_x_poses[i],PSTR("\x11"""));
    10a6:	4d e6       	ldi	r20, 0x6D	; 109
    10a8:	51 e0       	ldi	r21, 0x01	; 1
    10aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	9e 01       	movw	r18, r28
    10b2:	28 5d       	subi	r18, 0xD8	; 216
    10b4:	3f 4f       	sbci	r19, 0xFF	; 255
    10b6:	82 0f       	add	r24, r18
    10b8:	93 1f       	adc	r25, r19
    10ba:	fc 01       	movw	r30, r24
    10bc:	60 81       	ld	r22, Z
    10be:	8c 85       	ldd	r24, Y+12	; 0x0c
    10c0:	88 2f       	mov	r24, r24
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	9e 01       	movw	r18, r28
    10c6:	2c 5e       	subi	r18, 0xEC	; 236
    10c8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ca:	82 0f       	add	r24, r18
    10cc:	93 1f       	adc	r25, r19
    10ce:	fc 01       	movw	r30, r24
    10d0:	80 81       	ld	r24, Z
    10d2:	4e d9       	rcall	.-3428   	; 0x370 <write_text>
					move_cool_down = 5;
    10d4:	85 e0       	ldi	r24, 0x05	; 5
    10d6:	8f 83       	std	Y+7, r24	; 0x07
				}
				if (target_x_poses[i]<=1)
    10d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	9e 01       	movw	r18, r28
    10e0:	28 5d       	subi	r18, 0xD8	; 216
    10e2:	3f 4f       	sbci	r19, 0xFF	; 255
    10e4:	82 0f       	add	r24, r18
    10e6:	93 1f       	adc	r25, r19
    10e8:	fc 01       	movw	r30, r24
    10ea:	80 81       	ld	r24, Z
    10ec:	82 30       	cpi	r24, 0x02	; 2
    10ee:	10 f5       	brcc	.+68     	; 0x1134 <start_fighter_game+0x268>
				{
					write_text(target_y_poses[i],target_x_poses[i],PSTR(" "));
    10f0:	4f e6       	ldi	r20, 0x6F	; 111
    10f2:	51 e0       	ldi	r21, 0x01	; 1
    10f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    10f6:	88 2f       	mov	r24, r24
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	9e 01       	movw	r18, r28
    10fc:	28 5d       	subi	r18, 0xD8	; 216
    10fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1100:	82 0f       	add	r24, r18
    1102:	93 1f       	adc	r25, r19
    1104:	fc 01       	movw	r30, r24
    1106:	60 81       	ld	r22, Z
    1108:	8c 85       	ldd	r24, Y+12	; 0x0c
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	9e 01       	movw	r18, r28
    1110:	2c 5e       	subi	r18, 0xEC	; 236
    1112:	3f 4f       	sbci	r19, 0xFF	; 255
    1114:	82 0f       	add	r24, r18
    1116:	93 1f       	adc	r25, r19
    1118:	fc 01       	movw	r30, r24
    111a:	80 81       	ld	r24, Z
    111c:	29 d9       	rcall	.-3502   	; 0x370 <write_text>
					target_y_poses[i] = 15;
    111e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1120:	88 2f       	mov	r24, r24
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	9e 01       	movw	r18, r28
    1126:	2c 5e       	subi	r18, 0xEC	; 236
    1128:	3f 4f       	sbci	r19, 0xFF	; 255
    112a:	82 0f       	add	r24, r18
    112c:	93 1f       	adc	r25, r19
    112e:	2f e0       	ldi	r18, 0x0F	; 15
    1130:	fc 01       	movw	r30, r24
    1132:	20 83       	st	Z, r18
				}
				//damage und display life points leds
				if (target_x_poses[i] == player_x_pos && target_y_poses[i] == player_y_pos && player_save_time==0)
    1134:	8c 85       	ldd	r24, Y+12	; 0x0c
    1136:	88 2f       	mov	r24, r24
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	9e 01       	movw	r18, r28
    113c:	28 5d       	subi	r18, 0xD8	; 216
    113e:	3f 4f       	sbci	r19, 0xFF	; 255
    1140:	82 0f       	add	r24, r18
    1142:	93 1f       	adc	r25, r19
    1144:	fc 01       	movw	r30, r24
    1146:	90 81       	ld	r25, Z
    1148:	8f 85       	ldd	r24, Y+15	; 0x0f
    114a:	98 17       	cp	r25, r24
    114c:	b9 f5       	brne	.+110    	; 0x11bc <start_fighter_game+0x2f0>
    114e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1150:	88 2f       	mov	r24, r24
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	9e 01       	movw	r18, r28
    1156:	2c 5e       	subi	r18, 0xEC	; 236
    1158:	3f 4f       	sbci	r19, 0xFF	; 255
    115a:	82 0f       	add	r24, r18
    115c:	93 1f       	adc	r25, r19
    115e:	fc 01       	movw	r30, r24
    1160:	90 81       	ld	r25, Z
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	98 17       	cp	r25, r24
    1166:	51 f5       	brne	.+84     	; 0x11bc <start_fighter_game+0x2f0>
    1168:	8c 81       	ldd	r24, Y+4	; 0x04
    116a:	88 23       	and	r24, r24
    116c:	39 f5       	brne	.+78     	; 0x11bc <start_fighter_game+0x2f0>
				{
					write_text(player_y_pos,player_x_pos-1,PSTR(" \xB2"""));
    116e:	81 e7       	ldi	r24, 0x71	; 113
    1170:	91 e0       	ldi	r25, 0x01	; 1
    1172:	2f 85       	ldd	r18, Y+15	; 0x0f
    1174:	21 50       	subi	r18, 0x01	; 1
    1176:	ac 01       	movw	r20, r24
    1178:	62 2f       	mov	r22, r18
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	f9 d8       	rcall	.-3598   	; 0x370 <write_text>
					life_points = life_points>>1;
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	9a 81       	ldd	r25, Y+2	; 0x02
    1182:	96 95       	lsr	r25
    1184:	87 95       	ror	r24
    1186:	9a 83       	std	Y+2, r25	; 0x02
    1188:	89 83       	std	Y+1, r24	; 0x01
					losted_points = 0x001F-life_points;
    118a:	2f e1       	ldi	r18, 0x1F	; 31
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	9a 81       	ldd	r25, Y+2	; 0x02
    1192:	a9 01       	movw	r20, r18
    1194:	48 1b       	sub	r20, r24
    1196:	59 0b       	sbc	r21, r25
    1198:	ca 01       	movw	r24, r20
    119a:	9e 87       	std	Y+14, r25	; 0x0e
    119c:	8d 87       	std	Y+13, r24	; 0x0d
					set_RGB_LED(losted_points,0,life_points);
    119e:	29 81       	ldd	r18, Y+1	; 0x01
    11a0:	3a 81       	ldd	r19, Y+2	; 0x02
    11a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a6:	a9 01       	movw	r20, r18
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	74 da       	rcall	.-2840   	; 0x696 <set_RGB_LED>
					player_save_time = 20;
    11ae:	84 e1       	ldi	r24, 0x14	; 20
    11b0:	8c 83       	std	Y+4, r24	; 0x04
					wait_1ms(150);
    11b2:	66 e9       	ldi	r22, 0x96	; 150
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	30 d8       	rcall	.-4000   	; 0x21c <wait_1ms>
			respawn = 20;
		}
		//move enemy
		if(move_cool_down == 0)
		{
			for (u8 i = 0; i<20;i++)
    11bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    11be:	8f 5f       	subi	r24, 0xFF	; 255
    11c0:	8c 87       	std	Y+12, r24	; 0x0c
    11c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    11c4:	84 31       	cpi	r24, 0x14	; 20
    11c6:	08 f4       	brcc	.+2      	; 0x11ca <start_fighter_game+0x2fe>
    11c8:	34 cf       	rjmp	.-408    	; 0x1032 <start_fighter_game+0x166>
					set_RGB_LED(losted_points,0,life_points);
					player_save_time = 20;
					wait_1ms(150);
				}
			}
			move_cool_down = 5;
    11ca:	85 e0       	ldi	r24, 0x05	; 5
    11cc:	8f 83       	std	Y+7, r24	; 0x07
		}

		//display the player
		write_text(player_y_pos,player_x_pos,PSTR("\x10"""));
    11ce:	84 e7       	ldi	r24, 0x74	; 116
    11d0:	91 e0       	ldi	r25, 0x01	; 1
    11d2:	ac 01       	movw	r20, r24
    11d4:	6f 85       	ldd	r22, Y+15	; 0x0f
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	cb d8       	rcall	.-3690   	; 0x370 <write_text>

		//move the player one up
		if (Taste_3 == 1 && cool_down==0)
    11da:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <Taste_3>
    11de:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <Taste_3+0x1>
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	99 f4       	brne	.+38     	; 0x120c <start_fighter_game+0x340>
    11e6:	8d 81       	ldd	r24, Y+5	; 0x05
    11e8:	88 23       	and	r24, r24
    11ea:	81 f4       	brne	.+32     	; 0x120c <start_fighter_game+0x340>
		{
			write_text(player_y_pos,player_x_pos,PSTR(" "));
    11ec:	86 e7       	ldi	r24, 0x76	; 118
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	ac 01       	movw	r20, r24
    11f2:	6f 85       	ldd	r22, Y+15	; 0x0f
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	bc d8       	rcall	.-3720   	; 0x370 <write_text>
			player_y_pos--;
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	81 50       	subi	r24, 0x01	; 1
    11fc:	8b 83       	std	Y+3, r24	; 0x03

			if (player_y_pos>4)
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	85 30       	cpi	r24, 0x05	; 5
    1202:	10 f0       	brcs	.+4      	; 0x1208 <start_fighter_game+0x33c>
			{
				player_y_pos = 3;
    1204:	83 e0       	ldi	r24, 0x03	; 3
    1206:	8b 83       	std	Y+3, r24	; 0x03
			}
			cool_down = 5;
    1208:	85 e0       	ldi	r24, 0x05	; 5
    120a:	8d 83       	std	Y+5, r24	; 0x05
		}
		//move the player one down
		if (Taste_4 == 1 && cool_down==0)
    120c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Taste_4>
    1210:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <Taste_4+0x1>
    1214:	01 97       	sbiw	r24, 0x01	; 1
    1216:	91 f4       	brne	.+36     	; 0x123c <start_fighter_game+0x370>
    1218:	8d 81       	ldd	r24, Y+5	; 0x05
    121a:	88 23       	and	r24, r24
    121c:	79 f4       	brne	.+30     	; 0x123c <start_fighter_game+0x370>
		{
			write_text(player_y_pos,player_x_pos,PSTR(" "));
    121e:	88 e7       	ldi	r24, 0x78	; 120
    1220:	91 e0       	ldi	r25, 0x01	; 1
    1222:	ac 01       	movw	r20, r24
    1224:	6f 85       	ldd	r22, Y+15	; 0x0f
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	a3 d8       	rcall	.-3770   	; 0x370 <write_text>
			player_y_pos++;
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	8f 5f       	subi	r24, 0xFF	; 255
    122e:	8b 83       	std	Y+3, r24	; 0x03

			if (player_y_pos>4)
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	85 30       	cpi	r24, 0x05	; 5
    1234:	08 f0       	brcs	.+2      	; 0x1238 <start_fighter_game+0x36c>
			{
				player_y_pos = 0;
    1236:	1b 82       	std	Y+3, r1	; 0x03
			}
			cool_down = 5;
    1238:	85 e0       	ldi	r24, 0x05	; 5
    123a:	8d 83       	std	Y+5, r24	; 0x05
		}
		//controll speed limiter
		if (cool_down>0)
    123c:	8d 81       	ldd	r24, Y+5	; 0x05
    123e:	88 23       	and	r24, r24
    1240:	19 f0       	breq	.+6      	; 0x1248 <start_fighter_game+0x37c>
		{
			cool_down--;
    1242:	8d 81       	ldd	r24, Y+5	; 0x05
    1244:	81 50       	subi	r24, 0x01	; 1
    1246:	8d 83       	std	Y+5, r24	; 0x05
		}
		//enemy move speed limiter
		if (move_cool_down>0)
    1248:	8f 81       	ldd	r24, Y+7	; 0x07
    124a:	88 23       	and	r24, r24
    124c:	19 f0       	breq	.+6      	; 0x1254 <start_fighter_game+0x388>
		{
			move_cool_down--;
    124e:	8f 81       	ldd	r24, Y+7	; 0x07
    1250:	81 50       	subi	r24, 0x01	; 1
    1252:	8f 83       	std	Y+7, r24	; 0x07
		}
		//player save time after a collision 
		if (player_save_time>0)
    1254:	8c 81       	ldd	r24, Y+4	; 0x04
    1256:	88 23       	and	r24, r24
    1258:	19 f0       	breq	.+6      	; 0x1260 <start_fighter_game+0x394>
		{
			player_save_time--;
    125a:	8c 81       	ldd	r24, Y+4	; 0x04
    125c:	81 50       	subi	r24, 0x01	; 1
    125e:	8c 83       	std	Y+4, r24	; 0x04
		}
		respawn--;
    1260:	8e 81       	ldd	r24, Y+6	; 0x06
    1262:	81 50       	subi	r24, 0x01	; 1
    1264:	8e 83       	std	Y+6, r24	; 0x06
		wait_1ms(fps);
    1266:	8a 89       	ldd	r24, Y+18	; 0x12
    1268:	9b 89       	ldd	r25, Y+19	; 0x13
    126a:	cc 01       	movw	r24, r24
    126c:	a0 e0       	ldi	r26, 0x00	; 0
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	bc 01       	movw	r22, r24
    1272:	cd 01       	movw	r24, r26
    1274:	d3 d7       	rcall	.+4006   	; 0x221c <__TEXT_REGION_LENGTH__+0x21c>
	u8 spawn_points[35] = {1,0,2,1,1,0,3,2,3,3,2,0,2,3,0,1,2,3,1,3,2,1,0,0,3,0,1,2,3,0,3,2,1,0,1};
	u16 fps = 40;

	set_RGB_LED(losted_points,0,life_points);

	while (life_points>0)
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	9a 81       	ldd	r25, Y+2	; 0x02
    127a:	89 2b       	or	r24, r25
    127c:	09 f0       	breq	.+2      	; 0x1280 <start_fighter_game+0x3b4>
    127e:	83 ce       	rjmp	.-762    	; 0xf86 <start_fighter_game+0xba>
			player_save_time--;
		}
		respawn--;
		wait_1ms(fps);
	}
	clear_lcd();
    1280:	e4 d9       	rcall	.-3128   	; 0x64a <clear_lcd>
	write_text(1,6,PSTR("YOU LOSE"));
    1282:	8a e7       	ldi	r24, 0x7A	; 122
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	ac 01       	movw	r20, r24
    1288:	66 e0       	ldi	r22, 0x06	; 6
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	71 d8       	rcall	.-3870   	; 0x370 <write_text>
	wait_1ms(2000);
    128e:	60 ed       	ldi	r22, 0xD0	; 208
    1290:	77 e0       	ldi	r23, 0x07	; 7
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	c2 d7       	rcall	.+3972   	; 0x221c <__TEXT_REGION_LENGTH__+0x21c>
	return 0;
    1298:	80 e0       	ldi	r24, 0x00	; 0
}
    129a:	c2 5a       	subi	r28, 0xA2	; 162
    129c:	df 4f       	sbci	r29, 0xFF	; 255
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	f8 94       	cli
    12a2:	de bf       	out	0x3e, r29	; 62
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	cd bf       	out	0x3d, r28	; 61
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	08 95       	ret

000012ae <main>:


 int main (void){
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62

	// Definition von Variablen, die nur im "main" bekannt sind.
	

	init_Mocca_Mini();
    12b6:	3e da       	rcall	.-2948   	; 0x734 <init_Mocca_Mini>
	lcd_init();
    12b8:	a5 d9       	rcall	.-3254   	; 0x604 <lcd_init>

	write_text(0,0,PSTR("\x11"" code cracker "));
    12ba:	83 e8       	ldi	r24, 0x83	; 131
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	ac 01       	movw	r20, r24
    12c0:	60 e0       	ldi	r22, 0x00	; 0
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	55 d8       	rcall	.-3926   	; 0x370 <write_text>
	write_text(3,0,PSTR("\x11"" fighter game "));
    12c6:	83 e9       	ldi	r24, 0x93	; 147
    12c8:	91 e0       	ldi	r25, 0x01	; 1
    12ca:	ac 01       	movw	r20, r24
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	83 e0       	ldi	r24, 0x03	; 3
    12d0:	4f d8       	rcall	.-3938   	; 0x370 <write_text>

	while (1)
	{
		if (Taste_1 == 1)
    12d2:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <Taste_1>
    12d6:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <Taste_1+0x1>
    12da:	01 97       	sbiw	r24, 0x01	; 1
    12dc:	71 f4       	brne	.+28     	; 0x12fa <main+0x4c>
		{
			code_cracker_game();
    12de:	6e dd       	rcall	.-1316   	; 0xdbc <code_cracker_game>
			clear_lcd();
    12e0:	b4 d9       	rcall	.-3224   	; 0x64a <clear_lcd>
			write_text(0,0,PSTR("\x11"" code cracker "));
    12e2:	83 ea       	ldi	r24, 0xA3	; 163
    12e4:	91 e0       	ldi	r25, 0x01	; 1
    12e6:	ac 01       	movw	r20, r24
    12e8:	60 e0       	ldi	r22, 0x00	; 0
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	41 d8       	rcall	.-3966   	; 0x370 <write_text>
			write_text(3,0,PSTR("\x11"" fighter game "));
    12ee:	83 eb       	ldi	r24, 0xB3	; 179
    12f0:	91 e0       	ldi	r25, 0x01	; 1
    12f2:	ac 01       	movw	r20, r24
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	83 e0       	ldi	r24, 0x03	; 3
    12f8:	3b d8       	rcall	.-3978   	; 0x370 <write_text>
		}
		if (Taste_2 == 1)
    12fa:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Taste_2>
    12fe:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <Taste_2+0x1>
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	31 f7       	brne	.-52     	; 0x12d2 <main+0x24>
		{
			start_fighter_game();
    1306:	e2 dd       	rcall	.-1084   	; 0xecc <start_fighter_game>
			clear_lcd();
    1308:	a0 d9       	rcall	.-3264   	; 0x64a <clear_lcd>
			write_text(0,0,PSTR("\x11"" code cracker "));
    130a:	83 ec       	ldi	r24, 0xC3	; 195
    130c:	91 e0       	ldi	r25, 0x01	; 1
    130e:	ac 01       	movw	r20, r24
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	2d d8       	rcall	.-4006   	; 0x370 <write_text>
			write_text(3,0,PSTR("\x11"" fighter game "));
    1316:	83 ed       	ldi	r24, 0xD3	; 211
    1318:	91 e0       	ldi	r25, 0x01	; 1
    131a:	ac 01       	movw	r20, r24
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	83 e0       	ldi	r24, 0x03	; 3
    1320:	27 d8       	rcall	.-4018   	; 0x370 <write_text>
			set_RGB_LED(0,0,0);
    1322:	40 e0       	ldi	r20, 0x00	; 0
    1324:	50 e0       	ldi	r21, 0x00	; 0
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	b3 d9       	rcall	.-3226   	; 0x696 <set_RGB_LED>
		}
	}
    1330:	d0 cf       	rjmp	.-96     	; 0x12d2 <main+0x24>

00001332 <__udivmodsi4>:
    1332:	a1 e2       	ldi	r26, 0x21	; 33
    1334:	1a 2e       	mov	r1, r26
    1336:	aa 1b       	sub	r26, r26
    1338:	bb 1b       	sub	r27, r27
    133a:	fd 01       	movw	r30, r26
    133c:	0d c0       	rjmp	.+26     	; 0x1358 <__udivmodsi4_ep>

0000133e <__udivmodsi4_loop>:
    133e:	aa 1f       	adc	r26, r26
    1340:	bb 1f       	adc	r27, r27
    1342:	ee 1f       	adc	r30, r30
    1344:	ff 1f       	adc	r31, r31
    1346:	a2 17       	cp	r26, r18
    1348:	b3 07       	cpc	r27, r19
    134a:	e4 07       	cpc	r30, r20
    134c:	f5 07       	cpc	r31, r21
    134e:	20 f0       	brcs	.+8      	; 0x1358 <__udivmodsi4_ep>
    1350:	a2 1b       	sub	r26, r18
    1352:	b3 0b       	sbc	r27, r19
    1354:	e4 0b       	sbc	r30, r20
    1356:	f5 0b       	sbc	r31, r21

00001358 <__udivmodsi4_ep>:
    1358:	66 1f       	adc	r22, r22
    135a:	77 1f       	adc	r23, r23
    135c:	88 1f       	adc	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	1a 94       	dec	r1
    1362:	69 f7       	brne	.-38     	; 0x133e <__udivmodsi4_loop>
    1364:	60 95       	com	r22
    1366:	70 95       	com	r23
    1368:	80 95       	com	r24
    136a:	90 95       	com	r25
    136c:	9b 01       	movw	r18, r22
    136e:	ac 01       	movw	r20, r24
    1370:	bd 01       	movw	r22, r26
    1372:	cf 01       	movw	r24, r30
    1374:	08 95       	ret

00001376 <_exit>:
    1376:	f8 94       	cli

00001378 <__stop_program>:
    1378:	ff cf       	rjmp	.-2      	; 0x1378 <__stop_program>
