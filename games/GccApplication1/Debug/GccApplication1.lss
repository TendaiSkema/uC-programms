
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000146c  00001500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000146c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800106  00800106  00001506  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001506  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001538  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002391  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b01  00000000  00000000  000039e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010a2  00000000  00000000  000044e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  00005588  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000072b  00000000  00000000  000058b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018d9  00000000  00000000  00005fdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000078b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e8 c0       	rjmp	.+464    	; 0x1d2 <__ctors_end>
       2:	02 c1       	rjmp	.+516    	; 0x208 <__bad_interrupt>
       4:	82 c4       	rjmp	.+2308   	; 0x90a <__vector_2>
       6:	00 c1       	rjmp	.+512    	; 0x208 <__bad_interrupt>
       8:	ff c0       	rjmp	.+510    	; 0x208 <__bad_interrupt>
       a:	fe c0       	rjmp	.+508    	; 0x208 <__bad_interrupt>
       c:	91 c4       	rjmp	.+2338   	; 0x930 <__vector_6>
       e:	fc c0       	rjmp	.+504    	; 0x208 <__bad_interrupt>
      10:	fb c0       	rjmp	.+502    	; 0x208 <__bad_interrupt>
      12:	fa c0       	rjmp	.+500    	; 0x208 <__bad_interrupt>
      14:	f9 c0       	rjmp	.+498    	; 0x208 <__bad_interrupt>
      16:	f8 c0       	rjmp	.+496    	; 0x208 <__bad_interrupt>
      18:	f7 c0       	rjmp	.+494    	; 0x208 <__bad_interrupt>
      1a:	f6 c0       	rjmp	.+492    	; 0x208 <__bad_interrupt>
      1c:	f5 c0       	rjmp	.+490    	; 0x208 <__bad_interrupt>
      1e:	f4 c0       	rjmp	.+488    	; 0x208 <__bad_interrupt>
      20:	f3 c0       	rjmp	.+486    	; 0x208 <__bad_interrupt>
      22:	f2 c0       	rjmp	.+484    	; 0x208 <__bad_interrupt>
      24:	f1 c0       	rjmp	.+482    	; 0x208 <__bad_interrupt>
      26:	f0 c0       	rjmp	.+480    	; 0x208 <__bad_interrupt>
      28:	ef c0       	rjmp	.+478    	; 0x208 <__bad_interrupt>
      2a:	ee c0       	rjmp	.+476    	; 0x208 <__bad_interrupt>
      2c:	ed c0       	rjmp	.+474    	; 0x208 <__bad_interrupt>
      2e:	ec c0       	rjmp	.+472    	; 0x208 <__bad_interrupt>
      30:	eb c0       	rjmp	.+470    	; 0x208 <__bad_interrupt>
      32:	ea c0       	rjmp	.+468    	; 0x208 <__bad_interrupt>
      34:	e9 c0       	rjmp	.+466    	; 0x208 <__bad_interrupt>
      36:	e8 c0       	rjmp	.+464    	; 0x208 <__bad_interrupt>
      38:	e7 c0       	rjmp	.+462    	; 0x208 <__bad_interrupt>
      3a:	e6 c0       	rjmp	.+460    	; 0x208 <__bad_interrupt>

0000003c <__trampolines_end>:
      3c:	1b 20       	and	r1, r11
      3e:	20 20       	and	r2, r0
      40:	20 20       	and	r2, r0
      42:	20 20       	and	r2, r0
      44:	20 20       	and	r2, r0
      46:	20 20       	and	r2, r0
      48:	20 20       	and	r2, r0
      4a:	20 20       	and	r2, r0
      4c:	20 20       	and	r2, r0
      4e:	20 1a       	sub	r2, r16
	...

00000051 <__c.1808>:
      51:	63 72 65 61 74 65 20 43 6f 64 65 3a 00              create Code:.

0000005e <__c.1810>:
      5e:	4f 4b 00                                            OK.

00000061 <__c.1817>:
      61:	41 70 70 6c 79 65 64 00                             Applyed.

00000069 <__c.1819>:
      69:	20 20 20 20 20 20 20 00                                    .

00000071 <__c.1822>:
      71:	20 20 20 20 43 6f 64 65 20 63 72 65 61 74 65 64         Code created
      81:	20 20 20 20 00                                          .

00000086 <__c.1832>:
      86:	20 20 20 20 20 20 20 74 72 79 20 74 6f 20 63 72            try to cr
      96:	61 63 6b 10 00                                      ack..

0000009b <__c.1834>:
      9b:	63 6f 64 65 3a 20 2e 2e 2c 2e 2e 2c 2e 2e 20 20     code: ..,..,..  
	...

000000ac <__c.1847>:
      ac:	11 20 63 72 61 74 65 20 74 68 65 20 63 6f 64 65     . crate the code
      bc:	20 00                                                .

000000be <__c.1849>:
      be:	20 62 61 63 6b 20 10 00                              back ..

000000c6 <__c.1851>:
      c6:	11 20 63 72 61 74 65 20 74 68 65 20 63 6f 64 65     . crate the code
      d6:	20 00                                                .

000000d8 <__c.1853>:
      d8:	11 20 73 74 61 72 74 20 20 20 da 20 20 20 62 61     . start   .   ba
      e8:	63 6b 20 10 00                                      ck ..

000000ed <__c.1856>:
      ed:	20 20 20 20 20 20 59 4f 55 20 57 49 4e 20 20 20           YOU WIN   
      fd:	20 20 20 00                                            .

00000101 <__c.1858>:
     101:	11 20 63 72 61 74 65 20 74 68 65 20 63 6f 64 65     . crate the code
     111:	20 00                                                .

00000113 <__c.1860>:
     113:	11 20 73 74 61 72 74 20 20 20 da 20 20 20 62 61     . start   .   ba
     123:	63 6b 20 10 00                                      ck ..

00000128 <__c.1862>:
     128:	20 20 20 20 20 20 59 4f 55 20 4c 4f 53 45 20 20           YOU LOSE  
     138:	20 20 20 00                                            .

0000013c <__c.1864>:
     13c:	11 20 63 72 61 74 65 20 74 68 65 20 63 6f 64 65     . crate the code
     14c:	20 00                                                .

0000014e <__c.1866>:
     14e:	11 20 73 74 61 72 74 20 20 20 da 20 20 20 62 61     . start   .   ba
     15e:	63 6b 20 10 00                                      ck ..

00000163 <__c.1908>:
     163:	20 00                                                .

00000165 <__c.1910>:
     165:	11 00                                               ..

00000167 <__c.1912>:
     167:	20 00                                                .

00000169 <__c.1914>:
     169:	20 b2 00                                             ..

0000016c <__c.1919>:
     16c:	10 00                                               ..

0000016e <__c.1921>:
     16e:	20 00                                                .

00000170 <__c.1923>:
     170:	20 00                                                .

00000172 <__c.1931>:
     172:	11 20 63 6f 64 65 20 63 72 61 63 6b 65 72 20 00     . code cracker .

00000182 <__c.1933>:
     182:	11 20 66 69 67 68 74 65 72 20 67 61 6d 65 20 00     . fighter game .

00000192 <__c.1935>:
     192:	11 20 63 6f 64 65 20 63 72 61 63 6b 65 72 20 00     . code cracker .

000001a2 <__c.1937>:
     1a2:	11 20 66 69 67 68 74 65 72 20 67 61 6d 65 20 00     . fighter game .

000001b2 <__c.1939>:
     1b2:	11 20 63 6f 64 65 20 63 72 61 63 6b 65 72 20 00     . code cracker .

000001c2 <__c.1941>:
     1c2:	11 20 66 69 67 68 74 65 72 20 67 61 6d 65 20 00     . fighter game .

000001d2 <__ctors_end>:
     1d2:	11 24       	eor	r1, r1
     1d4:	1f be       	out	0x3f, r1	; 63
     1d6:	cf ef       	ldi	r28, 0xFF	; 255
     1d8:	d2 e0       	ldi	r29, 0x02	; 2
     1da:	de bf       	out	0x3e, r29	; 62
     1dc:	cd bf       	out	0x3d, r28	; 61

000001de <__do_copy_data>:
     1de:	11 e0       	ldi	r17, 0x01	; 1
     1e0:	a0 e0       	ldi	r26, 0x00	; 0
     1e2:	b1 e0       	ldi	r27, 0x01	; 1
     1e4:	ec e6       	ldi	r30, 0x6C	; 108
     1e6:	f4 e1       	ldi	r31, 0x14	; 20
     1e8:	02 c0       	rjmp	.+4      	; 0x1ee <__do_copy_data+0x10>
     1ea:	05 90       	lpm	r0, Z+
     1ec:	0d 92       	st	X+, r0
     1ee:	a6 30       	cpi	r26, 0x06	; 6
     1f0:	b1 07       	cpc	r27, r17
     1f2:	d9 f7       	brne	.-10     	; 0x1ea <__do_copy_data+0xc>

000001f4 <__do_clear_bss>:
     1f4:	21 e0       	ldi	r18, 0x01	; 1
     1f6:	a6 e0       	ldi	r26, 0x06	; 6
     1f8:	b1 e0       	ldi	r27, 0x01	; 1
     1fa:	01 c0       	rjmp	.+2      	; 0x1fe <.do_clear_bss_start>

000001fc <.do_clear_bss_loop>:
     1fc:	1d 92       	st	X+, r1

000001fe <.do_clear_bss_start>:
     1fe:	a2 32       	cpi	r26, 0x22	; 34
     200:	b2 07       	cpc	r27, r18
     202:	e1 f7       	brne	.-8      	; 0x1fc <.do_clear_bss_loop>
     204:	2e d8       	rcall	.-4004   	; 0xfffff262 <__eeprom_end+0xff7ef262>
     206:	30 c9       	rjmp	.-3488   	; 0xfffff468 <__eeprom_end+0xff7ef468>

00000208 <__bad_interrupt>:
     208:	fb ce       	rjmp	.-522    	; 0x0 <__vectors>

0000020a <wait_1ms>:
		LED_2_ON;									// Ausgang wieder auf 1 zurücksetzen. ( Wird erst aktiv, wen Port wieder als Ausgang definiert ist.)
	}
	else DDRA  &= ~0x02;				// Port als Eingang definieren: Taste 2
	if(Taste_2)	
	{ DDRA  |=  0x02;						// Port wieder als Ausgang definieren: Taste 2 auf Mocca Mini					 
		return(1);
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	00 d0       	rcall	.+0      	; 0x210 <wait_1ms+0x6>
     210:	00 d0       	rcall	.+0      	; 0x212 <wait_1ms+0x8>
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	69 83       	std	Y+1, r22	; 0x01
     218:	7a 83       	std	Y+2, r23	; 0x02
     21a:	8b 83       	std	Y+3, r24	; 0x03
     21c:	9c 83       	std	Y+4, r25	; 0x04
     21e:	89 81       	ldd	r24, Y+1	; 0x01
     220:	9a 81       	ldd	r25, Y+2	; 0x02
     222:	ab 81       	ldd	r26, Y+3	; 0x03
     224:	bc 81       	ldd	r27, Y+4	; 0x04
     226:	89 2b       	or	r24, r25
     228:	8a 2b       	or	r24, r26
     22a:	8b 2b       	or	r24, r27
     22c:	69 f0       	breq	.+26     	; 0x248 <wait_1ms+0x3e>
     22e:	89 81       	ldd	r24, Y+1	; 0x01
     230:	9a 81       	ldd	r25, Y+2	; 0x02
     232:	ab 81       	ldd	r26, Y+3	; 0x03
     234:	bc 81       	ldd	r27, Y+4	; 0x04
     236:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
     23a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
     23e:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <__data_end+0x2>
     242:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <__data_end+0x3>
     246:	0c c0       	rjmp	.+24     	; 0x260 <wait_1ms+0x56>
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	a0 e0       	ldi	r26, 0x00	; 0
     24e:	b0 e0       	ldi	r27, 0x00	; 0
     250:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
     254:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
     258:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <__data_end+0x2>
     25c:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <__data_end+0x3>
     260:	00 00       	nop
     262:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
     266:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
     26a:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <__data_end+0x2>
     26e:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <__data_end+0x3>
     272:	01 97       	sbiw	r24, 0x01	; 1
     274:	a1 05       	cpc	r26, r1
     276:	b1 05       	cpc	r27, r1
     278:	a1 f7       	brne	.-24     	; 0x262 <wait_1ms+0x58>
     27a:	00 00       	nop
     27c:	0f 90       	pop	r0
     27e:	0f 90       	pop	r0
     280:	0f 90       	pop	r0
     282:	0f 90       	pop	r0
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <delay_nop>:
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
     28e:	00 d0       	rcall	.+0      	; 0x290 <delay_nop+0x6>
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62
     294:	8a 83       	std	Y+2, r24	; 0x02
     296:	19 82       	std	Y+1, r1	; 0x01
     298:	04 c0       	rjmp	.+8      	; 0x2a2 <delay_nop+0x18>
     29a:	00 00       	nop
     29c:	89 81       	ldd	r24, Y+1	; 0x01
     29e:	8f 5f       	subi	r24, 0xFF	; 255
     2a0:	89 83       	std	Y+1, r24	; 0x01
     2a2:	99 81       	ldd	r25, Y+1	; 0x01
     2a4:	8a 81       	ldd	r24, Y+2	; 0x02
     2a6:	98 17       	cp	r25, r24
     2a8:	c0 f3       	brcs	.-16     	; 0x29a <delay_nop+0x10>
     2aa:	00 00       	nop
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	08 95       	ret

000002b6 <write_lcd_f>:
     2b6:	91 e0       	ldi	r25, 0x01	; 1
     2b8:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <write_RGB_LCD_activ>
     2bc:	dc 9a       	sbi	0x1b, 4	; 27
     2be:	de 98       	cbi	0x1b, 6	; 27
     2c0:	de 98       	cbi	0x1b, 6	; 27
     2c2:	de 9a       	sbi	0x1b, 6	; 27
     2c4:	de 9a       	sbi	0x1b, 6	; 27
     2c6:	de 98       	cbi	0x1b, 6	; 27
     2c8:	de 98       	cbi	0x1b, 6	; 27
     2ca:	de 9a       	sbi	0x1b, 6	; 27
     2cc:	de 9a       	sbi	0x1b, 6	; 27
     2ce:	de 98       	cbi	0x1b, 6	; 27
     2d0:	de 98       	cbi	0x1b, 6	; 27
     2d2:	de 9a       	sbi	0x1b, 6	; 27
     2d4:	de 9a       	sbi	0x1b, 6	; 27
     2d6:	de 98       	cbi	0x1b, 6	; 27
     2d8:	de 98       	cbi	0x1b, 6	; 27
     2da:	de 9a       	sbi	0x1b, 6	; 27
     2dc:	de 9a       	sbi	0x1b, 6	; 27
     2de:	de 98       	cbi	0x1b, 6	; 27
     2e0:	de 98       	cbi	0x1b, 6	; 27
     2e2:	de 9a       	sbi	0x1b, 6	; 27
     2e4:	dc 98       	cbi	0x1b, 4	; 27
     2e6:	de 98       	cbi	0x1b, 6	; 27
     2e8:	de 98       	cbi	0x1b, 6	; 27
     2ea:	de 9a       	sbi	0x1b, 6	; 27
     2ec:	83 34       	cpi	r24, 0x43	; 67
     2ee:	a9 f1       	breq	.+106    	; 0x35a <__stack+0x5b>
     2f0:	dc 9a       	sbi	0x1b, 4	; 27
     2f2:	de 98       	cbi	0x1b, 6	; 27
     2f4:	de 98       	cbi	0x1b, 6	; 27
     2f6:	de 9a       	sbi	0x1b, 6	; 27
     2f8:	dc 98       	cbi	0x1b, 4	; 27
     2fa:	de 98       	cbi	0x1b, 6	; 27
     2fc:	de 98       	cbi	0x1b, 6	; 27
     2fe:	de 9a       	sbi	0x1b, 6	; 27
     300:	84 e0       	ldi	r24, 0x04	; 4
     302:	de 98       	cbi	0x1b, 6	; 27
     304:	60 ff       	sbrs	r22, 0
     306:	27 c0       	rjmp	.+78     	; 0x356 <__stack+0x57>
     308:	dc 9a       	sbi	0x1b, 4	; 27
     30a:	66 95       	lsr	r22
     30c:	de 98       	cbi	0x1b, 6	; 27
     30e:	de 9a       	sbi	0x1b, 6	; 27
     310:	81 50       	subi	r24, 0x01	; 1
     312:	b9 f7       	brne	.-18     	; 0x302 <__stack+0x3>
     314:	dc 98       	cbi	0x1b, 4	; 27
     316:	84 e0       	ldi	r24, 0x04	; 4
     318:	de 98       	cbi	0x1b, 6	; 27
     31a:	de 98       	cbi	0x1b, 6	; 27
     31c:	de 9a       	sbi	0x1b, 6	; 27
     31e:	81 50       	subi	r24, 0x01	; 1
     320:	d9 f7       	brne	.-10     	; 0x318 <__stack+0x19>
     322:	84 e0       	ldi	r24, 0x04	; 4
     324:	de 98       	cbi	0x1b, 6	; 27
     326:	60 ff       	sbrs	r22, 0
     328:	14 c0       	rjmp	.+40     	; 0x352 <__stack+0x53>
     32a:	dc 9a       	sbi	0x1b, 4	; 27
     32c:	66 95       	lsr	r22
     32e:	de 98       	cbi	0x1b, 6	; 27
     330:	de 9a       	sbi	0x1b, 6	; 27
     332:	81 50       	subi	r24, 0x01	; 1
     334:	b9 f7       	brne	.-18     	; 0x324 <__stack+0x25>
     336:	dc 98       	cbi	0x1b, 4	; 27
     338:	84 e0       	ldi	r24, 0x04	; 4
     33a:	de 98       	cbi	0x1b, 6	; 27
     33c:	de 98       	cbi	0x1b, 6	; 27
     33e:	de 9a       	sbi	0x1b, 6	; 27
     340:	81 50       	subi	r24, 0x01	; 1
     342:	d9 f7       	brne	.-10     	; 0x33a <__stack+0x3b>
     344:	84 e1       	ldi	r24, 0x14	; 20
     346:	dc 9a       	sbi	0x1b, 4	; 27
     348:	81 50       	subi	r24, 0x01	; 1
     34a:	e9 f7       	brne	.-6      	; 0x346 <__stack+0x47>
     34c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <write_RGB_LCD_activ>
     350:	08 95       	ret
     352:	dc 98       	cbi	0x1b, 4	; 27
     354:	eb cf       	rjmp	.-42     	; 0x32c <__stack+0x2d>
     356:	dc 98       	cbi	0x1b, 4	; 27
     358:	d8 cf       	rjmp	.-80     	; 0x30a <__stack+0xb>
     35a:	dc 98       	cbi	0x1b, 4	; 27
     35c:	ca cf       	rjmp	.-108    	; 0x2f2 <write_lcd_f+0x3c>

0000035e <write_text>:
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
     362:	df 93       	push	r29
     364:	8a 01       	movw	r16, r20
     366:	82 95       	swap	r24
     368:	88 0f       	add	r24, r24
     36a:	80 7e       	andi	r24, 0xE0	; 224
     36c:	68 0f       	add	r22, r24
     36e:	60 68       	ori	r22, 0x80	; 128
     370:	83 e4       	ldi	r24, 0x43	; 67
     372:	a1 df       	rcall	.-190    	; 0x2b6 <write_lcd_f>
     374:	f8 01       	movw	r30, r16
     376:	64 91       	lpm	r22, Z
     378:	66 23       	and	r22, r22
     37a:	61 f0       	breq	.+24     	; 0x394 <write_text+0x36>
     37c:	d1 e0       	ldi	r29, 0x01	; 1
     37e:	84 e4       	ldi	r24, 0x44	; 68
     380:	9a df       	rcall	.-204    	; 0x2b6 <write_lcd_f>
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	8d 0f       	add	r24, r29
     386:	f8 01       	movw	r30, r16
     388:	ed 0f       	add	r30, r29
     38a:	f1 1d       	adc	r31, r1
     38c:	64 91       	lpm	r22, Z
     38e:	d8 2f       	mov	r29, r24
     390:	61 11       	cpse	r22, r1
     392:	f5 cf       	rjmp	.-22     	; 0x37e <write_text+0x20>
     394:	df 91       	pop	r29
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	08 95       	ret

0000039c <write_text_ram>:
     39c:	0f 93       	push	r16
     39e:	1f 93       	push	r17
     3a0:	df 93       	push	r29
     3a2:	8a 01       	movw	r16, r20
     3a4:	82 95       	swap	r24
     3a6:	88 0f       	add	r24, r24
     3a8:	80 7e       	andi	r24, 0xE0	; 224
     3aa:	68 0f       	add	r22, r24
     3ac:	60 68       	ori	r22, 0x80	; 128
     3ae:	83 e4       	ldi	r24, 0x43	; 67
     3b0:	82 df       	rcall	.-252    	; 0x2b6 <write_lcd_f>
     3b2:	f8 01       	movw	r30, r16
     3b4:	60 81       	ld	r22, Z
     3b6:	66 23       	and	r22, r22
     3b8:	51 f0       	breq	.+20     	; 0x3ce <write_text_ram+0x32>
     3ba:	d0 e0       	ldi	r29, 0x00	; 0
     3bc:	df 5f       	subi	r29, 0xFF	; 255
     3be:	84 e4       	ldi	r24, 0x44	; 68
     3c0:	7a df       	rcall	.-268    	; 0x2b6 <write_lcd_f>
     3c2:	f8 01       	movw	r30, r16
     3c4:	ed 0f       	add	r30, r29
     3c6:	f1 1d       	adc	r31, r1
     3c8:	60 81       	ld	r22, Z
     3ca:	61 11       	cpse	r22, r1
     3cc:	f7 cf       	rjmp	.-18     	; 0x3bc <write_text_ram+0x20>
     3ce:	df 91       	pop	r29
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	08 95       	ret

000003d6 <write_zahl>:
     3d6:	2f 92       	push	r2
     3d8:	3f 92       	push	r3
     3da:	4f 92       	push	r4
     3dc:	5f 92       	push	r5
     3de:	6f 92       	push	r6
     3e0:	7f 92       	push	r7
     3e2:	8f 92       	push	r8
     3e4:	9f 92       	push	r9
     3e6:	af 92       	push	r10
     3e8:	bf 92       	push	r11
     3ea:	cf 92       	push	r12
     3ec:	df 92       	push	r13
     3ee:	ef 92       	push	r14
     3f0:	ff 92       	push	r15
     3f2:	0f 93       	push	r16
     3f4:	1f 93       	push	r17
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	63 97       	sbiw	r28, 0x13	; 19
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	f8 94       	cli
     404:	de bf       	out	0x3e, r29	; 62
     406:	0f be       	out	0x3f, r0	; 63
     408:	cd bf       	out	0x3d, r28	; 61
     40a:	8a 8b       	std	Y+18, r24	; 0x12
     40c:	6b 8b       	std	Y+19, r22	; 0x13
     40e:	29 01       	movw	r4, r18
     410:	3a 01       	movw	r6, r20
     412:	ce 86       	std	Y+14, r12	; 0x0e
     414:	04 36       	cpi	r16, 0x64	; 100
     416:	08 f4       	brcc	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     418:	ba c0       	rjmp	.+372    	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
     41a:	04 56       	subi	r16, 0x64	; 100
     41c:	19 8a       	std	Y+17, r1	; 0x11
     41e:	0b 30       	cpi	r16, 0x0B	; 11
     420:	08 f0       	brcs	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     422:	0a e0       	ldi	r16, 0x0A	; 10
     424:	ed 86       	std	Y+13, r14	; 0x0d
     426:	4e 85       	ldd	r20, Y+14	; 0x0e
     428:	4e 15       	cp	r20, r14
     42a:	08 f4       	brcc	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42c:	4d 87       	std	Y+13, r20	; 0x0d
     42e:	80 2f       	mov	r24, r16
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	98 8b       	std	Y+16, r25	; 0x10
     434:	8f 87       	std	Y+15, r24	; 0x0f
     436:	ed 85       	ldd	r30, Y+13	; 0x0d
     438:	8e 0f       	add	r24, r30
     43a:	91 1d       	adc	r25, r1
     43c:	0b 97       	sbiw	r24, 0x0b	; 11
     43e:	1c f0       	brlt	.+6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     440:	8a e0       	ldi	r24, 0x0A	; 10
     442:	80 1b       	sub	r24, r16
     444:	8d 87       	std	Y+13, r24	; 0x0d
     446:	c3 01       	movw	r24, r6
     448:	b2 01       	movw	r22, r4
     44a:	2a e0       	ldi	r18, 0x0A	; 10
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	40 e0       	ldi	r20, 0x00	; 0
     450:	50 e0       	ldi	r21, 0x00	; 0
     452:	5a d7       	rcall	.+3764   	; 0x1308 <__udivmodsi4>
     454:	60 5d       	subi	r22, 0xD0	; 208
     456:	6c 87       	std	Y+12, r22	; 0x0c
     458:	1a e0       	ldi	r17, 0x0A	; 10
     45a:	3a e0       	ldi	r19, 0x0A	; 10
     45c:	c3 2e       	mov	r12, r19
     45e:	d1 2c       	mov	r13, r1
     460:	e1 2c       	mov	r14, r1
     462:	f1 2c       	mov	r15, r1
     464:	4a e0       	ldi	r20, 0x0A	; 10
     466:	84 2e       	mov	r8, r20
     468:	91 2c       	mov	r9, r1
     46a:	a1 2c       	mov	r10, r1
     46c:	b1 2c       	mov	r11, r1
     46e:	22 24       	eor	r2, r2
     470:	23 94       	inc	r2
     472:	31 2c       	mov	r3, r1
     474:	2c 0e       	add	r2, r28
     476:	3d 1e       	adc	r3, r29
     478:	21 0e       	add	r2, r17
     47a:	31 1c       	adc	r3, r1
     47c:	c3 01       	movw	r24, r6
     47e:	b2 01       	movw	r22, r4
     480:	a7 01       	movw	r20, r14
     482:	96 01       	movw	r18, r12
     484:	41 d7       	rcall	.+3714   	; 0x1308 <__udivmodsi4>
     486:	ca 01       	movw	r24, r20
     488:	b9 01       	movw	r22, r18
     48a:	a5 01       	movw	r20, r10
     48c:	94 01       	movw	r18, r8
     48e:	3c d7       	rcall	.+3704   	; 0x1308 <__udivmodsi4>
     490:	60 5d       	subi	r22, 0xD0	; 208
     492:	f1 01       	movw	r30, r2
     494:	60 83       	st	Z, r22
     496:	cc 0c       	add	r12, r12
     498:	dd 1c       	adc	r13, r13
     49a:	ee 1c       	adc	r14, r14
     49c:	ff 1c       	adc	r15, r15
     49e:	d7 01       	movw	r26, r14
     4a0:	c6 01       	movw	r24, r12
     4a2:	88 0f       	add	r24, r24
     4a4:	99 1f       	adc	r25, r25
     4a6:	aa 1f       	adc	r26, r26
     4a8:	bb 1f       	adc	r27, r27
     4aa:	88 0f       	add	r24, r24
     4ac:	99 1f       	adc	r25, r25
     4ae:	aa 1f       	adc	r26, r26
     4b0:	bb 1f       	adc	r27, r27
     4b2:	c8 0e       	add	r12, r24
     4b4:	d9 1e       	adc	r13, r25
     4b6:	ea 1e       	adc	r14, r26
     4b8:	fb 1e       	adc	r15, r27
     4ba:	11 50       	subi	r17, 0x01	; 1
     4bc:	c0 f6       	brcc	.-80     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     4be:	2c e0       	ldi	r18, 0x0C	; 12
     4c0:	fe 85       	ldd	r31, Y+14	; 0x0e
     4c2:	2f 1b       	sub	r18, r31
     4c4:	82 2f       	mov	r24, r18
     4c6:	80 1b       	sub	r24, r16
     4c8:	00 23       	and	r16, r16
     4ca:	09 f4       	brne	.+2      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4cc:	88 c0       	rjmp	.+272    	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
     4ce:	fe 01       	movw	r30, r28
     4d0:	31 96       	adiw	r30, 0x01	; 1
     4d2:	a1 e0       	ldi	r26, 0x01	; 1
     4d4:	b0 e0       	ldi	r27, 0x00	; 0
     4d6:	ac 0f       	add	r26, r28
     4d8:	bd 1f       	adc	r27, r29
     4da:	a8 0f       	add	r26, r24
     4dc:	b1 1d       	adc	r27, r1
     4de:	9c 91       	ld	r25, X
     4e0:	91 93       	st	Z+, r25
     4e2:	8f 5f       	subi	r24, 0xFF	; 255
     4e4:	28 13       	cpse	r18, r24
     4e6:	f5 cf       	rjmp	.-22     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4e8:	4d 85       	ldd	r20, Y+13	; 0x0d
     4ea:	41 11       	cpse	r20, r1
     4ec:	53 c0       	rjmp	.+166    	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
     4ee:	ef 85       	ldd	r30, Y+15	; 0x0f
     4f0:	f8 89       	ldd	r31, Y+16	; 0x10
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	8c 0f       	add	r24, r28
     4f8:	9d 1f       	adc	r25, r29
     4fa:	e8 0f       	add	r30, r24
     4fc:	f9 1f       	adc	r31, r25
     4fe:	10 82       	st	Z, r1
     500:	99 89       	ldd	r25, Y+17	; 0x11
     502:	99 23       	and	r25, r25
     504:	29 f1       	breq	.+74     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
     506:	89 81       	ldd	r24, Y+1	; 0x01
     508:	80 33       	cpi	r24, 0x30	; 48
     50a:	11 f5       	brne	.+68     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
     50c:	4f 85       	ldd	r20, Y+15	; 0x0f
     50e:	58 89       	ldd	r21, Y+16	; 0x10
     510:	41 50       	subi	r20, 0x01	; 1
     512:	51 09       	sbc	r21, r1
     514:	14 16       	cp	r1, r20
     516:	15 06       	cpc	r1, r21
     518:	dc f4       	brge	.+54     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	60 e2       	ldi	r22, 0x20	; 32
     522:	03 c0       	rjmp	.+6      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
     524:	84 17       	cp	r24, r20
     526:	95 07       	cpc	r25, r21
     528:	9c f4       	brge	.+38     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
     52a:	2f 5f       	subi	r18, 0xFF	; 255
     52c:	e1 e0       	ldi	r30, 0x01	; 1
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	ec 0f       	add	r30, r28
     532:	fd 1f       	adc	r31, r29
     534:	e8 0f       	add	r30, r24
     536:	f9 1f       	adc	r31, r25
     538:	60 83       	st	Z, r22
     53a:	82 2f       	mov	r24, r18
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	e1 e0       	ldi	r30, 0x01	; 1
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	ec 0f       	add	r30, r28
     544:	fd 1f       	adc	r31, r29
     546:	e8 0f       	add	r30, r24
     548:	f9 1f       	adc	r31, r25
     54a:	30 81       	ld	r19, Z
     54c:	30 33       	cpi	r19, 0x30	; 48
     54e:	51 f3       	breq	.-44     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     550:	ae 01       	movw	r20, r28
     552:	4f 5f       	subi	r20, 0xFF	; 255
     554:	5f 4f       	sbci	r21, 0xFF	; 255
     556:	6b 89       	ldd	r22, Y+19	; 0x13
     558:	8a 89       	ldd	r24, Y+18	; 0x12
     55a:	20 df       	rcall	.-448    	; 0x39c <write_text_ram>
     55c:	63 96       	adiw	r28, 0x13	; 19
     55e:	0f b6       	in	r0, 0x3f	; 63
     560:	f8 94       	cli
     562:	de bf       	out	0x3e, r29	; 62
     564:	0f be       	out	0x3f, r0	; 63
     566:	cd bf       	out	0x3d, r28	; 61
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	1f 91       	pop	r17
     56e:	0f 91       	pop	r16
     570:	ff 90       	pop	r15
     572:	ef 90       	pop	r14
     574:	df 90       	pop	r13
     576:	cf 90       	pop	r12
     578:	bf 90       	pop	r11
     57a:	af 90       	pop	r10
     57c:	9f 90       	pop	r9
     57e:	8f 90       	pop	r8
     580:	7f 90       	pop	r7
     582:	6f 90       	pop	r6
     584:	5f 90       	pop	r5
     586:	4f 90       	pop	r4
     588:	3f 90       	pop	r3
     58a:	2f 90       	pop	r2
     58c:	08 95       	ret
     58e:	21 e0       	ldi	r18, 0x01	; 1
     590:	29 8b       	std	Y+17, r18	; 0x11
     592:	45 cf       	rjmp	.-374    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     594:	0f 5f       	subi	r16, 0xFF	; 255
     596:	8e e2       	ldi	r24, 0x2E	; 46
     598:	e1 e0       	ldi	r30, 0x01	; 1
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	ec 0f       	add	r30, r28
     59e:	fd 1f       	adc	r31, r29
     5a0:	4f 85       	ldd	r20, Y+15	; 0x0f
     5a2:	58 89       	ldd	r21, Y+16	; 0x10
     5a4:	e4 0f       	add	r30, r20
     5a6:	f5 1f       	adc	r31, r21
     5a8:	80 83       	st	Z, r24
     5aa:	e0 2f       	mov	r30, r16
     5ac:	20 1b       	sub	r18, r16
     5ae:	9d 85       	ldd	r25, Y+13	; 0x0d
     5b0:	82 2f       	mov	r24, r18
     5b2:	8e 0f       	add	r24, r30
     5b4:	a1 e0       	ldi	r26, 0x01	; 1
     5b6:	b0 e0       	ldi	r27, 0x00	; 0
     5b8:	ac 0f       	add	r26, r28
     5ba:	bd 1f       	adc	r27, r29
     5bc:	a8 0f       	add	r26, r24
     5be:	b1 1d       	adc	r27, r1
     5c0:	8c 91       	ld	r24, X
     5c2:	a1 e0       	ldi	r26, 0x01	; 1
     5c4:	b0 e0       	ldi	r27, 0x00	; 0
     5c6:	ac 0f       	add	r26, r28
     5c8:	bd 1f       	adc	r27, r29
     5ca:	ae 0f       	add	r26, r30
     5cc:	b1 1d       	adc	r27, r1
     5ce:	8c 93       	st	X, r24
     5d0:	ef 5f       	subi	r30, 0xFF	; 255
     5d2:	8e 2f       	mov	r24, r30
     5d4:	80 1b       	sub	r24, r16
     5d6:	89 17       	cp	r24, r25
     5d8:	58 f3       	brcs	.-42     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	8a cf       	rjmp	.-236    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     5de:	ed 85       	ldd	r30, Y+13	; 0x0d
     5e0:	ee 23       	and	r30, r30
     5e2:	21 f0       	breq	.+8      	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
     5e4:	8e e2       	ldi	r24, 0x2E	; 46
     5e6:	89 83       	std	Y+1, r24	; 0x01
     5e8:	01 e0       	ldi	r16, 0x01	; 1
     5ea:	df cf       	rjmp	.-66     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     5ec:	e0 e0       	ldi	r30, 0x00	; 0
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	80 cf       	rjmp	.-256    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>

000005f2 <lcd_init>:
     5f2:	df 93       	push	r29
     5f4:	d4 9a       	sbi	0x1a, 4	; 26
     5f6:	d6 9a       	sbi	0x1a, 6	; 26
     5f8:	d2 e3       	ldi	r29, 0x32	; 50
     5fa:	88 e7       	ldi	r24, 0x78	; 120
     5fc:	46 de       	rcall	.-884    	; 0x28a <delay_nop>
     5fe:	d1 50       	subi	r29, 0x01	; 1
     600:	e1 f7       	brne	.-8      	; 0x5fa <lcd_init+0x8>
     602:	64 e3       	ldi	r22, 0x34	; 52
     604:	83 e4       	ldi	r24, 0x43	; 67
     606:	57 de       	rcall	.-850    	; 0x2b6 <write_lcd_f>
     608:	64 e3       	ldi	r22, 0x34	; 52
     60a:	83 e4       	ldi	r24, 0x43	; 67
     60c:	54 de       	rcall	.-856    	; 0x2b6 <write_lcd_f>
     60e:	69 e0       	ldi	r22, 0x09	; 9
     610:	83 e4       	ldi	r24, 0x43	; 67
     612:	51 de       	rcall	.-862    	; 0x2b6 <write_lcd_f>
     614:	60 e3       	ldi	r22, 0x30	; 48
     616:	83 e4       	ldi	r24, 0x43	; 67
     618:	4e de       	rcall	.-868    	; 0x2b6 <write_lcd_f>
     61a:	6c e0       	ldi	r22, 0x0C	; 12
     61c:	83 e4       	ldi	r24, 0x43	; 67
     61e:	4b de       	rcall	.-874    	; 0x2b6 <write_lcd_f>
     620:	61 e0       	ldi	r22, 0x01	; 1
     622:	83 e4       	ldi	r24, 0x43	; 67
     624:	48 de       	rcall	.-880    	; 0x2b6 <write_lcd_f>
     626:	d8 e0       	ldi	r29, 0x08	; 8
     628:	88 e7       	ldi	r24, 0x78	; 120
     62a:	2f de       	rcall	.-930    	; 0x28a <delay_nop>
     62c:	d1 50       	subi	r29, 0x01	; 1
     62e:	e1 f7       	brne	.-8      	; 0x628 <lcd_init+0x36>
     630:	67 e0       	ldi	r22, 0x07	; 7
     632:	83 e4       	ldi	r24, 0x43	; 67
     634:	df 91       	pop	r29
     636:	3f ce       	rjmp	.-898    	; 0x2b6 <write_lcd_f>

00000638 <clear_lcd>:
     638:	df 93       	push	r29
     63a:	61 e0       	ldi	r22, 0x01	; 1
     63c:	83 e4       	ldi	r24, 0x43	; 67
     63e:	3b de       	rcall	.-906    	; 0x2b6 <write_lcd_f>
     640:	d8 e0       	ldi	r29, 0x08	; 8
     642:	88 e7       	ldi	r24, 0x78	; 120
     644:	22 de       	rcall	.-956    	; 0x28a <delay_nop>
     646:	d1 50       	subi	r29, 0x01	; 1
     648:	e1 f7       	brne	.-8      	; 0x642 <clear_lcd+0xa>
     64a:	df 91       	pop	r29
     64c:	08 95       	ret

0000064e <get_ADC_Channel>:
}



u16 get_ADC_Channel(u8 channel)	
{	u16 AD_Result;
     64e:	df 93       	push	r29
	u8  i;
	
	// A/D-Wandler Initialisieren
	ADMUXA = channel;		// select Channel 
     650:	89 b9       	out	0x09, r24	; 9
	
	if(channel == 12) ADMUXB = 0x01;			// Wenn interner Temperatur-Sensor gewählt wird, muss die "Internal 1.1V Reference" selektiert sein.
     652:	8c 30       	cpi	r24, 0x0C	; 12
     654:	79 f0       	breq	.+30     	; 0x674 <get_ADC_Channel+0x26>
						   else ADMUXB = 0x00;			// Vcc als Referenz = 5V
     656:	18 b8       	out	0x08, r1	; 8
	// ADMUXB = 0x03;			// Internal 4.096V reference
	
	if(channel == 12) for(i=0; i<8; i++) delay_nop(120);		// 1.6ms (8x 0.2us) warten, bis interne Temperatur gemessen werden kann
	
	
	ADCSRA |=  (1 << ADEN) | (1 << ADSC);			// A/D-Wandler Enable, Start, Single Mode
     658:	85 b1       	in	r24, 0x05	; 5
     65a:	80 6c       	ori	r24, 0xC0	; 192
     65c:	85 b9       	out	0x05, r24	; 5
	while(ADCSRA & (1 << ADSC));							// Warten, bis Messung fertig ist.
     65e:	2e 99       	sbic	0x05, 6	; 5
     660:	fe cf       	rjmp	.-4      	; 0x65e <get_ADC_Channel+0x10>
	
	AD_Result = ADCL + (ADCH << 8);			//	ADCL zuerst lesen und dann erst ADCH !!!
     662:	26 b1       	in	r18, 0x06	; 6
     664:	87 b1       	in	r24, 0x07	; 7
	
	return(AD_Result);
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	98 2f       	mov	r25, r24
     66a:	88 27       	eor	r24, r24
}
     66c:	82 0f       	add	r24, r18
     66e:	91 1d       	adc	r25, r1
     670:	df 91       	pop	r29
     672:	08 95       	ret
	u8  i;
	
	// A/D-Wandler Initialisieren
	ADMUXA = channel;		// select Channel 
	
	if(channel == 12) ADMUXB = 0x01;			// Wenn interner Temperatur-Sensor gewählt wird, muss die "Internal 1.1V Reference" selektiert sein.
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	88 b9       	out	0x08, r24	; 8
     678:	d8 e0       	ldi	r29, 0x08	; 8
						   else ADMUXB = 0x00;			// Vcc als Referenz = 5V
	// ADMUXB = 0x01;			// Internal 1.1V Reference
	// ADMUXB = 0x02;			// Internal 2.2V Reference
	// ADMUXB = 0x03;			// Internal 4.096V reference
	
	if(channel == 12) for(i=0; i<8; i++) delay_nop(120);		// 1.6ms (8x 0.2us) warten, bis interne Temperatur gemessen werden kann
     67a:	88 e7       	ldi	r24, 0x78	; 120
     67c:	06 de       	rcall	.-1012   	; 0x28a <delay_nop>
     67e:	d1 50       	subi	r29, 0x01	; 1
     680:	e1 f7       	brne	.-8      	; 0x67a <get_ADC_Channel+0x2c>
     682:	ea cf       	rjmp	.-44     	; 0x658 <get_ADC_Channel+0xa>

00000684 <set_RGB_LED>:
}

#pragma GCC optimize 2						// Optimitation-Level nicht verstellen, weil sonst das Timing der LCD-Schnittstelle nicht mehr stimmen würde!!!

void set_RGB_LED(u16 rot,u16 gruen,u16 blau)
{
     684:	dc 01       	movw	r26, r24
	u8 i;
	u16 bit_muster;
	
	RGB_rot = rot;
     686:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <RGB_rot+0x1>
     68a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <RGB_rot>
	RGB_gruen = gruen;
     68e:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <RGB_gruen+0x1>
     692:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <RGB_gruen>
	RGB_blau = blau;
     696:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <RGB_blau+0x1>
     69a:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <RGB_blau>
	DDRA  |=  0x04;						// Port wieder als Ausgang definieren
     69e:	d2 9a       	sbi	0x1a, 2	; 26
	
	write_RGB_LCD_activ = 1;
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <write_RGB_LCD_activ>
	RGB_SHCP_0;
     6a6:	da 98       	cbi	0x1b, 2	; 27
	RGB_OE_1;
     6a8:	d8 98       	cbi	0x1b, 0	; 27
     6aa:	90 e1       	ldi	r25, 0x10	; 16
	bit_muster =  0x8000;
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e8       	ldi	r19, 0x80	; 128
     6b0:	17 c0       	rjmp	.+46     	; 0x6e0 <set_RGB_LED+0x5c>
	for(i=0; i<16; i++)
	{ if(blau  & bit_muster) RGB_DS_1; else RGB_DS_0;
     6b2:	dc 9a       	sbi	0x1b, 4	; 27
		RGB_SHCP_1; RGB_SHCP_0;
     6b4:	da 9a       	sbi	0x1b, 2	; 27
     6b6:	da 98       	cbi	0x1b, 2	; 27
		if(gruen & bit_muster) RGB_DS_1; else RGB_DS_0;
     6b8:	fb 01       	movw	r30, r22
     6ba:	e2 23       	and	r30, r18
     6bc:	f3 23       	and	r31, r19
     6be:	ef 2b       	or	r30, r31
     6c0:	e1 f0       	breq	.+56     	; 0x6fa <set_RGB_LED+0x76>
     6c2:	dc 9a       	sbi	0x1b, 4	; 27
		RGB_SHCP_1; RGB_SHCP_0;
     6c4:	da 9a       	sbi	0x1b, 2	; 27
     6c6:	da 98       	cbi	0x1b, 2	; 27
		if(rot   & bit_muster) RGB_DS_1; else RGB_DS_0;
     6c8:	fd 01       	movw	r30, r26
     6ca:	e2 23       	and	r30, r18
     6cc:	f3 23       	and	r31, r19
     6ce:	ef 2b       	or	r30, r31
     6d0:	e1 f0       	breq	.+56     	; 0x70a <set_RGB_LED+0x86>
     6d2:	dc 9a       	sbi	0x1b, 4	; 27
		RGB_SHCP_1; RGB_SHCP_0;
     6d4:	da 9a       	sbi	0x1b, 2	; 27
     6d6:	da 98       	cbi	0x1b, 2	; 27
		bit_muster >>= 1;
     6d8:	36 95       	lsr	r19
     6da:	27 95       	ror	r18
     6dc:	91 50       	subi	r25, 0x01	; 1
	
	write_RGB_LCD_activ = 1;
	RGB_SHCP_0;
	RGB_OE_1;
	bit_muster =  0x8000;
	for(i=0; i<16; i++)
     6de:	e1 f0       	breq	.+56     	; 0x718 <set_RGB_LED+0x94>
	{ if(blau  & bit_muster) RGB_DS_1; else RGB_DS_0;
     6e0:	fa 01       	movw	r30, r20
     6e2:	e2 23       	and	r30, r18
     6e4:	f3 23       	and	r31, r19
     6e6:	ef 2b       	or	r30, r31
     6e8:	21 f7       	brne	.-56     	; 0x6b2 <set_RGB_LED+0x2e>
     6ea:	dc 98       	cbi	0x1b, 4	; 27
		RGB_SHCP_1; RGB_SHCP_0;
     6ec:	da 9a       	sbi	0x1b, 2	; 27
     6ee:	da 98       	cbi	0x1b, 2	; 27
		if(gruen & bit_muster) RGB_DS_1; else RGB_DS_0;
     6f0:	fb 01       	movw	r30, r22
     6f2:	e2 23       	and	r30, r18
     6f4:	f3 23       	and	r31, r19
     6f6:	ef 2b       	or	r30, r31
     6f8:	21 f7       	brne	.-56     	; 0x6c2 <set_RGB_LED+0x3e>
     6fa:	dc 98       	cbi	0x1b, 4	; 27
		RGB_SHCP_1; RGB_SHCP_0;
     6fc:	da 9a       	sbi	0x1b, 2	; 27
     6fe:	da 98       	cbi	0x1b, 2	; 27
		if(rot   & bit_muster) RGB_DS_1; else RGB_DS_0;
     700:	fd 01       	movw	r30, r26
     702:	e2 23       	and	r30, r18
     704:	f3 23       	and	r31, r19
     706:	ef 2b       	or	r30, r31
     708:	21 f7       	brne	.-56     	; 0x6d2 <set_RGB_LED+0x4e>
     70a:	dc 98       	cbi	0x1b, 4	; 27
		RGB_SHCP_1; RGB_SHCP_0;
     70c:	da 9a       	sbi	0x1b, 2	; 27
     70e:	da 98       	cbi	0x1b, 2	; 27
		bit_muster >>= 1;
     710:	36 95       	lsr	r19
     712:	27 95       	ror	r18
     714:	91 50       	subi	r25, 0x01	; 1
	
	write_RGB_LCD_activ = 1;
	RGB_SHCP_0;
	RGB_OE_1;
	bit_muster =  0x8000;
	for(i=0; i<16; i++)
     716:	21 f7       	brne	.-56     	; 0x6e0 <set_RGB_LED+0x5c>
		RGB_SHCP_1; RGB_SHCP_0;
		if(rot   & bit_muster) RGB_DS_1; else RGB_DS_0;
		RGB_SHCP_1; RGB_SHCP_0;
		bit_muster >>= 1;
	}
	RGB_STCP_0;
     718:	d9 98       	cbi	0x1b, 1	; 27
	RGB_STCP_1;								// Daten ins "storage register" übernehmen
     71a:	d9 9a       	sbi	0x1b, 1	; 27
	write_RGB_LCD_activ = 0;
     71c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <write_RGB_LCD_activ>
     720:	08 95       	ret

00000722 <init_Mocca_Mini>:

void init_Mocca_Mini(void)  //xyz ganze Funktion
{
		// CPU-Clock auf Maximum stellen

	CLKPR	= 0x00;			// System-Takt = 8MHz
     722:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__EEPROM_REGION_LENGTH__+0x7f0073>
	//PRR 	 |= (1 << PRUSI);			// SPI
	//ACSR	 |= (1 << ACD);				// Analog Comparator
	

	// Initialisierung des ADC's
	PRR 	 &= ~(1 << PRADC);			// Stromsparmodus des ADC's ausschalten
     726:	e0 e7       	ldi	r30, 0x70	; 112
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	80 81       	ld	r24, Z
     72c:	8e 7f       	andi	r24, 0xFE	; 254
     72e:	80 83       	st	Z, r24
	ADCSRA |=  (1 << ADEN) | (1 << ADSC) | (0 << ADATE);			// A/D-Wandler Enable, Start, !Auto-Trigger
     730:	85 b1       	in	r24, 0x05	; 5
     732:	80 6c       	ori	r24, 0xC0	; 192
     734:	85 b9       	out	0x05, r24	; 5
	//ADCSRA |= (0 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);		// Clock = CPU /  64 ==> ADC_Clock = 125kHz ==> Conversen-Time = 104us  
	//ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);		// Clock = CPU / 128 ==> ADC_Clock = 125kHz ==> Conversen-Time = 208us  
	//ADCSRB |= (0 << ADTS0) | (0 << ADTS1) | (0 << ADTS2);		// Free Running mode
	
	// PWM für LED-Dimmer initialisieren
	DDRB			|= (1 << PB2);													// PB2 = Output
     736:	ba 9a       	sbi	0x17, 2	; 23
	TCCR0A		|= (1 << COM0A1) | (1 << WGM00);				// phase correct PWM mode A
     738:	80 b7       	in	r24, 0x30	; 48
     73a:	81 68       	ori	r24, 0x81	; 129
     73c:	80 bf       	out	0x30, r24	; 48
	TCCR0A		|= (1 << COM0B1) | (1 << WGM00);				// phase correct PWM mode B
     73e:	80 b7       	in	r24, 0x30	; 48
     740:	81 62       	ori	r24, 0x21	; 33
     742:	80 bf       	out	0x30, r24	; 48
//	TOCPMCOE	|=   (1 << TOCC4OE);										// Output enable TOCC4

//	TOCPMSA1	&= ~((1 << TOCC7S1) | (1 << TOCC7S0));	// 00: Output MUX: 8Bit-PWM Timer/Counter0 OC0A auf Pin PB2 - Pin5 - TOCC7 schalten
//	TOCPMCOE	|=   (1 << TOCC7OE);										// Output enable TOCC7
	
	OCR0A			 =   0;									// initial PWM pulse width A
     744:	16 be       	out	0x36, r1	; 54
	OCR0B			 =   10;								// initial PWM pulse width B
     746:	8a e0       	ldi	r24, 0x0A	; 10
     748:	8c bf       	out	0x3c, r24	; 60
	// Bei System-Takt = 1MHz gilt:
	//TCCR0B |= (0 << CS00) | (1 << CS01);		// PWM-Grundtakt = 254Hz: clock source = CLK/8, start PWM (125kHz => 8us, 8us*255 *2 = 4.08ms => 254Hz)
	//TCCR0B |= (1 << CS00) | (0 << CS01);		// PWM-Grundtakt = 1.96kHz: clock source = CLK  , start PWM (  1MHz => 1us, 1us*255 *2 = 0.51ms => 1.96kHz)
	
	// Bei System-Takt = 8MHz gilt:
	TCCR0B |= (1 << CS00) | (1 << CS01);		// PWM-Grundtakt = 245Hz: clock source = CLK/64  , start PWM ( 125kHz => 8us, 8us*255 *2 = 4.08ms => 245Hz)
     74a:	83 b7       	in	r24, 0x33	; 51
     74c:	83 60       	ori	r24, 0x03	; 3
     74e:	83 bf       	out	0x33, r24	; 51
	//TCCR0B |= (0 << CS00) | (1 << CS01);		// PWM-Grundtakt = 1.96kHz: clock source = CLK/8  , start PWM ( 1MHz =>   1us,   1us*255 *2 = 0.51ms => 1.96kHz)
	//TCCR0B |= (1 << CS00) | (0 << CS01);		// PWM-Grundtakt = 15.68kHz: clock source = CLK  , start PWM (  8MHz => 125ns, 125ns*255 *2 = 0.63.75us => 15.68kHz)
	
	// 16-Bit-Timer für 1ms-Ticker
	GTCCR  |= (1 << TSM) | (1 << PSR  );  //Timer anhalten, Prescaler Reset
     750:	83 b5       	in	r24, 0x23	; 35
     752:	81 68       	ori	r24, 0x81	; 129
     754:	83 bd       	out	0x23, r24	; 35
	TCNT1	= 0x1FF;														// 12.12.6 TCNTnH and TCNTnL  Timer/Counter
     756:	8f ef       	ldi	r24, 0xFF	; 255
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	9d bd       	out	0x2d, r25	; 45
     75c:	8c bd       	out	0x2c, r24	; 44
	TCCR1A |= (0 << COM1A1) | (0 << COM1A1);	// Normal Operation
     75e:	8f b5       	in	r24, 0x2f	; 47
     760:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (0 <<  WGM11) | (0 <<  WGM10);	// CTC-Mode
     762:	8f b5       	in	r24, 0x2f	; 47
     764:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (0 <<  WGM13) | (1 <<  WGM12);	// CTC-Mode
     766:	8e b5       	in	r24, 0x2e	; 46
     768:	88 60       	ori	r24, 0x08	; 8
     76a:	8e bd       	out	0x2e, r24	; 46
	//TCCR1B |= (0 <<   CS12) | (0 <<   CS11) | (1 <<   CS10);	// Clock select CLK/1: 1'000'000Hz ==> f = 1'000'000Hz ==> t = 1us
	TCCR1B |= (0 <<   CS12) | (1 <<   CS11) | (0 <<   CS10);	// Clock select CLK/8: 8'000'000Hz ==> f = 1'000'000Hz ==> t = 1us
     76c:	8e b5       	in	r24, 0x2e	; 46
     76e:	82 60       	ori	r24, 0x02	; 2
     770:	8e bd       	out	0x2e, r24	; 46
	TCCR1C |= (0 <<  FOC1A);					// no Output Compare
     772:	82 b5       	in	r24, 0x22	; 34
     774:	82 bd       	out	0x22, r24	; 34
	OCR1A   = 1000-1;									// 1us * 1000 = 1ms
     776:	87 ee       	ldi	r24, 0xE7	; 231
     778:	93 e0       	ldi	r25, 0x03	; 3
     77a:	9b bd       	out	0x2b, r25	; 43
     77c:	8a bd       	out	0x2a, r24	; 42
	TIMSK1 |= (1 << OCIE1A);					// Interrupt Enable
     77e:	79 9a       	sbi	0x0f, 1	; 15
	GTCCR  &= ~(1 << TSM);						// Timer starten
     780:	83 b5       	in	r24, 0x23	; 35
     782:	8f 77       	andi	r24, 0x7F	; 127
     784:	83 bd       	out	0x23, r24	; 35
	
	GIMSK  |= (1 << PCIE0);			// General Interrupt Mask Register für PCINT[7:0] any change
     786:	8b b7       	in	r24, 0x3b	; 59
     788:	80 61       	ori	r24, 0x10	; 16
     78a:	8b bf       	out	0x3b, r24	; 59
	PCMSK0 |= (1 << 2);					// Interrupt für SPI-Eingang setzen (Pin 11/PA2/PCINT2)
     78c:	92 9a       	sbi	0x12, 2	; 18

	sei();										// Global Interrupts aktivieren
     78e:	78 94       	sei
	
	// Ports als EIN- oder AUSGANG initialisieren
	
	// Ausgänge
	//PUEA  &= ~0x03;			// PORTA Bit 0-1: Pull-Up Widerstand ausschalten
	DDRA  |=  0x03;			// LED 1 und 2 auf Mocca Mini
     790:	8a b3       	in	r24, 0x1a	; 26
     792:	83 60       	ori	r24, 0x03	; 3
     794:	8a bb       	out	0x1a, r24	; 26
	PORTA &= ~0x03;			// LED 1 und 2 ausschalten
     796:	8b b3       	in	r24, 0x1b	; 27
     798:	8c 7f       	andi	r24, 0xFC	; 252
     79a:	8b bb       	out	0x1b, r24	; 27
	DDRA  |=  0x02;			// Ausgang PA.1 Pin 12:		RGB storage register clock
     79c:	d1 9a       	sbi	0x1a, 1	; 26
	
	DDRA  |=  0x04;			// Ausgang PA.2 Pin 11:		RGB shift register clock
     79e:	d2 9a       	sbi	0x1a, 2	; 26
	DDRA  |=  0x20;			// freier I/O
     7a0:	d5 9a       	sbi	0x1a, 5	; 26
	

	// Eingänge
	
	//DDRA  &= ~0x04;			// Eingang PA2 Pin 11:		Switch vom LCD-RGB-SWITCH einlesen
	DDRA  &= ~0x08;			// Eingang PA3 Pin 10:		A/D-Channel 3 Umgebungs-Temperatur
     7a2:	d3 98       	cbi	0x1a, 3	; 26
	DDRA  &= ~0x80;			// Eingang PA7 Pin  6:		A/D-Channel 7 Potentiometer
     7a4:	d7 98       	cbi	0x1a, 7	; 26
		
	/* Ausgänge für LCD werden im Treiber konfiguriert
	DDRA |= 0x10;								// Port PA4 auf Output setzen LCD-Outputs SOD
	DDRA |= 0x40;								// Port PA6 auf Output setzen LCD-Outputs SCLK	*/

	DDRA  |=  0x04;
     7a6:	d2 9a       	sbi	0x1a, 2	; 26
	DDRB  |=  0x07;			// RGB-LED
     7a8:	87 b3       	in	r24, 0x17	; 23
     7aa:	87 60       	ori	r24, 0x07	; 7
     7ac:	87 bb       	out	0x17, r24	; 23
	
	set_RGB_LED(0,0,0);
     7ae:	40 e0       	ldi	r20, 0x00	; 0
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	64 cf       	rjmp	.-312    	; 0x684 <set_RGB_LED>

000007bc <read_SWITCH>:
{
	u8  i;
	u16 bit_muster, bit_dip_nr, switch_wert;
	
	// Die korrekten Werte wieder ins RGB-Schieberegster schreiben, damit beim nächsten RGB_STCP-Puls (verursacht durch die korrekten Daten übernomen werden.
	RGB_SHCP_0;
     7bc:	da 98       	cbi	0x1b, 2	; 27
	RGB_OE_1;
     7be:	d8 98       	cbi	0x1b, 0	; 27
     7c0:	40 e1       	ldi	r20, 0x10	; 16
	bit_muster =  0x8000;
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e8       	ldi	r25, 0x80	; 128
     7c6:	1e c0       	rjmp	.+60     	; 0x804 <read_SWITCH+0x48>
	for(i=0; i<16; i++)
	{ if(RGB_blau  & bit_muster) RGB_DS_1; else RGB_DS_0;
     7c8:	dc 9a       	sbi	0x1b, 4	; 27
		RGB_SHCP_1; RGB_SHCP_0;
     7ca:	da 9a       	sbi	0x1b, 2	; 27
     7cc:	da 98       	cbi	0x1b, 2	; 27
		if(RGB_gruen & bit_muster) RGB_DS_1; else RGB_DS_0;
     7ce:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <RGB_gruen>
     7d2:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <RGB_gruen+0x1>
     7d6:	28 23       	and	r18, r24
     7d8:	39 23       	and	r19, r25
     7da:	23 2b       	or	r18, r19
     7dc:	09 f4       	brne	.+2      	; 0x7e0 <read_SWITCH+0x24>
     7de:	75 c0       	rjmp	.+234    	; 0x8ca <read_SWITCH+0x10e>
     7e0:	dc 9a       	sbi	0x1b, 4	; 27
		RGB_SHCP_1; RGB_SHCP_0;
     7e2:	da 9a       	sbi	0x1b, 2	; 27
     7e4:	da 98       	cbi	0x1b, 2	; 27
		if(RGB_rot   & bit_muster) RGB_DS_1; else RGB_DS_0;
     7e6:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <RGB_rot>
     7ea:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <RGB_rot+0x1>
     7ee:	28 23       	and	r18, r24
     7f0:	39 23       	and	r19, r25
     7f2:	23 2b       	or	r18, r19
     7f4:	89 f0       	breq	.+34     	; 0x818 <read_SWITCH+0x5c>
     7f6:	dc 9a       	sbi	0x1b, 4	; 27
		RGB_SHCP_1; RGB_SHCP_0;
     7f8:	da 9a       	sbi	0x1b, 2	; 27
     7fa:	da 98       	cbi	0x1b, 2	; 27
		bit_muster >>= 1;
     7fc:	96 95       	lsr	r25
     7fe:	87 95       	ror	r24
     800:	41 50       	subi	r20, 0x01	; 1
	
	// Die korrekten Werte wieder ins RGB-Schieberegster schreiben, damit beim nächsten RGB_STCP-Puls (verursacht durch die korrekten Daten übernomen werden.
	RGB_SHCP_0;
	RGB_OE_1;
	bit_muster =  0x8000;
	for(i=0; i<16; i++)
     802:	89 f0       	breq	.+34     	; 0x826 <read_SWITCH+0x6a>
	{ if(RGB_blau  & bit_muster) RGB_DS_1; else RGB_DS_0;
     804:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <RGB_blau>
     808:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <RGB_blau+0x1>
     80c:	28 23       	and	r18, r24
     80e:	39 23       	and	r19, r25
     810:	23 2b       	or	r18, r19
     812:	d1 f6       	brne	.-76     	; 0x7c8 <read_SWITCH+0xc>
     814:	dc 98       	cbi	0x1b, 4	; 27
     816:	d9 cf       	rjmp	.-78     	; 0x7ca <read_SWITCH+0xe>
		RGB_SHCP_1; RGB_SHCP_0;
		if(RGB_gruen & bit_muster) RGB_DS_1; else RGB_DS_0;
		RGB_SHCP_1; RGB_SHCP_0;
		if(RGB_rot   & bit_muster) RGB_DS_1; else RGB_DS_0;
     818:	dc 98       	cbi	0x1b, 4	; 27
		RGB_SHCP_1; RGB_SHCP_0;
     81a:	da 9a       	sbi	0x1b, 2	; 27
     81c:	da 98       	cbi	0x1b, 2	; 27
		bit_muster >>= 1;
     81e:	96 95       	lsr	r25
     820:	87 95       	ror	r24
     822:	41 50       	subi	r20, 0x01	; 1
	
	// Die korrekten Werte wieder ins RGB-Schieberegster schreiben, damit beim nächsten RGB_STCP-Puls (verursacht durch die korrekten Daten übernomen werden.
	RGB_SHCP_0;
	RGB_OE_1;
	bit_muster =  0x8000;
	for(i=0; i<16; i++)
     824:	79 f7       	brne	.-34     	; 0x804 <read_SWITCH+0x48>
		RGB_SHCP_1; RGB_SHCP_0;
		if(RGB_rot   & bit_muster) RGB_DS_1; else RGB_DS_0;
		RGB_SHCP_1; RGB_SHCP_0;
		bit_muster >>= 1;
	}
	RGB_STCP_0;
     826:	d9 98       	cbi	0x1b, 1	; 27
	RGB_STCP_1;								// Daten ins "storage register" übernehmen
     828:	d9 9a       	sbi	0x1b, 1	; 27
	
	
	RGB_SHCP_0;							// um Eingangskapazität des Ports zu leeren, sonst würde am Eingang anschliessend immer eine 1 gelesen.
     82a:	da 98       	cbi	0x1b, 2	; 27
	DDRA  &= ~0x04;						// Port als Eingang definieren
     82c:	d2 98       	cbi	0x1a, 2	; 26
	
	SWICH_P_Load_0;						// parallel load: paralleles Einlesen aller Eingänge (LOW-Pegel)
     82e:	d9 98       	cbi	0x1b, 1	; 27
	SWICH_P_Load_1;						// serial shift : Ab jetzt werden die einzelnen Bits seriell herausgelesen. (HIGH-Pegel)
     830:	d9 9a       	sbi	0x1b, 1	; 27
	
	switch_wert = 0;
	bit_muster = 1;
	SWITCH_CLK_0;						
     832:	dc 98       	cbi	0x1b, 4	; 27
     834:	80 e1       	ldi	r24, 0x10	; 16
	DDRA  &= ~0x04;						// Port als Eingang definieren
	
	SWICH_P_Load_0;						// parallel load: paralleles Einlesen aller Eingänge (LOW-Pegel)
	SWICH_P_Load_1;						// serial shift : Ab jetzt werden die einzelnen Bits seriell herausgelesen. (HIGH-Pegel)
	
	switch_wert = 0;
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	50 e0       	ldi	r21, 0x00	; 0
	bit_muster = 1;
     83a:	21 e0       	ldi	r18, 0x01	; 1
     83c:	30 e0       	ldi	r19, 0x00	; 0
	SWITCH_CLK_0;						
	for(i=0; i<16; i++)
	{ 
		if(SWITCH_QH) switch_wert |= bit_muster;
     83e:	ca 9b       	sbis	0x19, 2	; 25
     840:	02 c0       	rjmp	.+4      	; 0x846 <read_SWITCH+0x8a>
     842:	42 2b       	or	r20, r18
     844:	53 2b       	or	r21, r19
		bit_muster = bit_muster << 1;
     846:	22 0f       	add	r18, r18
     848:	33 1f       	adc	r19, r19
			
		SWITCH_CLK_1;
     84a:	dc 9a       	sbi	0x1b, 4	; 27
		SWITCH_CLK_0;
     84c:	dc 98       	cbi	0x1b, 4	; 27
     84e:	81 50       	subi	r24, 0x01	; 1
	SWICH_P_Load_1;						// serial shift : Ab jetzt werden die einzelnen Bits seriell herausgelesen. (HIGH-Pegel)
	
	switch_wert = 0;
	bit_muster = 1;
	SWITCH_CLK_0;						
	for(i=0; i<16; i++)
     850:	b1 f7       	brne	.-20     	; 0x83e <read_SWITCH+0x82>
		bit_muster = bit_muster << 1;
			
		SWITCH_CLK_1;
		SWITCH_CLK_0;
	}
	DDRA  |=  0x04;						// Port wieder als Ausgang definieren
     852:	d2 9a       	sbi	0x1a, 2	; 26

	DIP_Switch = 0;
     854:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <DIP_Switch+0x1>
     858:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <DIP_Switch>
     85c:	2a e0       	ldi	r18, 0x0A	; 10
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	a0 e0       	ldi	r26, 0x00	; 0
     862:	b0 e0       	ldi	r27, 0x00	; 0
	bit_muster =   1;
	bit_dip_nr = 512;
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	72 e0       	ldi	r23, 0x02	; 2
		SWITCH_CLK_0;
	}
	DDRA  |=  0x04;						// Port wieder als Ausgang definieren

	DIP_Switch = 0;
	bit_muster =   1;
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	90 e0       	ldi	r25, 0x00	; 0
	bit_dip_nr = 512;
	for(i=0; i<10; i++)
	{ if(switch_wert & bit_muster) DIP_Switch |= bit_dip_nr;
     86c:	fa 01       	movw	r30, r20
     86e:	e8 23       	and	r30, r24
     870:	f9 23       	and	r31, r25
     872:	ef 2b       	or	r30, r31
     874:	19 f0       	breq	.+6      	; 0x87c <read_SWITCH+0xc0>
     876:	a6 2b       	or	r26, r22
     878:	b7 2b       	or	r27, r23
     87a:	31 e0       	ldi	r19, 0x01	; 1
		bit_muster <<= 1;
     87c:	88 0f       	add	r24, r24
     87e:	99 1f       	adc	r25, r25
		bit_dip_nr >>= 1;
     880:	76 95       	lsr	r23
     882:	67 95       	ror	r22
     884:	21 50       	subi	r18, 0x01	; 1
	DDRA  |=  0x04;						// Port wieder als Ausgang definieren

	DIP_Switch = 0;
	bit_muster =   1;
	bit_dip_nr = 512;
	for(i=0; i<10; i++)
     886:	91 f7       	brne	.-28     	; 0x86c <read_SWITCH+0xb0>
     888:	31 11       	cpse	r19, r1
     88a:	3a c0       	rjmp	.+116    	; 0x900 <read_SWITCH+0x144>
	{ if(switch_wert & bit_muster) DIP_Switch |= bit_dip_nr;
		bit_muster <<= 1;
		bit_dip_nr >>= 1;
	}
	if(switch_wert & 1024) Taste_1 = 1; else Taste_1 = 0;
     88c:	52 ff       	sbrs	r21, 2
     88e:	1f c0       	rjmp	.+62     	; 0x8ce <read_SWITCH+0x112>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <Taste_1+0x1>
     898:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Taste_1>
	if(switch_wert & 2048) Taste_2 = 1; else Taste_2 = 0;
     89c:	53 ff       	sbrs	r21, 3
     89e:	1d c0       	rjmp	.+58     	; 0x8da <read_SWITCH+0x11e>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <Taste_2+0x1>
     8a8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <Taste_2>
	if(switch_wert & 4096) Taste_3 = 1; else Taste_3 = 0;
     8ac:	54 ff       	sbrs	r21, 4
     8ae:	1b c0       	rjmp	.+54     	; 0x8e6 <read_SWITCH+0x12a>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <Taste_3+0x1>
     8b8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Taste_3>
	if(switch_wert & 8192) Taste_4 = 1; else Taste_4 = 0;
     8bc:	55 fd       	sbrc	r21, 5
     8be:	19 c0       	rjmp	.+50     	; 0x8f2 <read_SWITCH+0x136>
     8c0:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <Taste_4+0x1>
     8c4:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <Taste_4>
     8c8:	08 95       	ret
	RGB_OE_1;
	bit_muster =  0x8000;
	for(i=0; i<16; i++)
	{ if(RGB_blau  & bit_muster) RGB_DS_1; else RGB_DS_0;
		RGB_SHCP_1; RGB_SHCP_0;
		if(RGB_gruen & bit_muster) RGB_DS_1; else RGB_DS_0;
     8ca:	dc 98       	cbi	0x1b, 4	; 27
     8cc:	8a cf       	rjmp	.-236    	; 0x7e2 <read_SWITCH+0x26>
	for(i=0; i<10; i++)
	{ if(switch_wert & bit_muster) DIP_Switch |= bit_dip_nr;
		bit_muster <<= 1;
		bit_dip_nr >>= 1;
	}
	if(switch_wert & 1024) Taste_1 = 1; else Taste_1 = 0;
     8ce:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <Taste_1+0x1>
     8d2:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <Taste_1>
	if(switch_wert & 2048) Taste_2 = 1; else Taste_2 = 0;
     8d6:	53 fd       	sbrc	r21, 3
     8d8:	e3 cf       	rjmp	.-58     	; 0x8a0 <read_SWITCH+0xe4>
     8da:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <Taste_2+0x1>
     8de:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <Taste_2>
	if(switch_wert & 4096) Taste_3 = 1; else Taste_3 = 0;
     8e2:	54 fd       	sbrc	r21, 4
     8e4:	e5 cf       	rjmp	.-54     	; 0x8b0 <read_SWITCH+0xf4>
     8e6:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <Taste_3+0x1>
     8ea:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <Taste_3>
	if(switch_wert & 8192) Taste_4 = 1; else Taste_4 = 0;
     8ee:	55 ff       	sbrs	r21, 5
     8f0:	e7 cf       	rjmp	.-50     	; 0x8c0 <read_SWITCH+0x104>
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <Taste_4+0x1>
     8fa:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <Taste_4>
     8fe:	08 95       	ret
     900:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <DIP_Switch+0x1>
     904:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <DIP_Switch>
     908:	c1 cf       	rjmp	.-126    	; 0x88c <read_SWITCH+0xd0>

0000090a <__vector_2>:
#pragma GCC optimize 0


// Interrupt-Funktion, die auslöst, wenn SPI-Eingang sich verändert (Pin 11/PA2/PCINT2)
ISR (PCINT0_vect) // Interrupt für Inputs PCINT[7:0]
{
     90a:	1f 92       	push	r1
     90c:	0f 92       	push	r0
     90e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
     912:	0f 92       	push	r0
     914:	11 24       	eor	r1, r1
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
}
     91e:	00 00       	nop
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	0f 90       	pop	r0
     926:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
     92a:	0f 90       	pop	r0
     92c:	1f 90       	pop	r1
     92e:	18 95       	reti

00000930 <__vector_6>:


ISR (TIMER1_COMPA_vect) // Dieser Timer-Interrupt löst im 1ms-Takt aus.
{	
     930:	1f 92       	push	r1
     932:	0f 92       	push	r0
     934:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
     938:	0f 92       	push	r0
     93a:	11 24       	eor	r1, r1
     93c:	2f 93       	push	r18
     93e:	3f 93       	push	r19
     940:	4f 93       	push	r20
     942:	5f 93       	push	r21
     944:	6f 93       	push	r22
     946:	7f 93       	push	r23
     948:	8f 93       	push	r24
     94a:	9f 93       	push	r25
     94c:	af 93       	push	r26
     94e:	bf 93       	push	r27
     950:	ef 93       	push	r30
     952:	ff 93       	push	r31
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	cd b7       	in	r28, 0x3d	; 61
     95a:	de b7       	in	r29, 0x3e	; 62
	
	tick_1ms++;
     95c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <tick_1ms>
     960:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <tick_1ms+0x1>
     964:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <tick_1ms+0x2>
     968:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <tick_1ms+0x3>
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	a1 1d       	adc	r26, r1
     970:	b1 1d       	adc	r27, r1
     972:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <tick_1ms>
     976:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <tick_1ms+0x1>
     97a:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <tick_1ms+0x2>
     97e:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <tick_1ms+0x3>
	
	if(tick_1ms_cnt > 0) tick_1ms_cnt--;										// Wird für 1ms-Tick benötigt
     982:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
     986:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
     98a:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <__data_end+0x2>
     98e:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <__data_end+0x3>
     992:	89 2b       	or	r24, r25
     994:	8a 2b       	or	r24, r26
     996:	8b 2b       	or	r24, r27
     998:	99 f0       	breq	.+38     	; 0x9c0 <__vector_6+0x90>
     99a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
     99e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
     9a2:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <__data_end+0x2>
     9a6:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <__data_end+0x3>
     9aa:	01 97       	sbiw	r24, 0x01	; 1
     9ac:	a1 09       	sbc	r26, r1
     9ae:	b1 09       	sbc	r27, r1
     9b0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
     9b4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
     9b8:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <__data_end+0x2>
     9bc:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <__data_end+0x3>
	if(LCD_Refresh_Time_cnt > 0) LCD_Refresh_Time_cnt--;
     9c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <LCD_Refresh_Time_cnt>
     9c4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <LCD_Refresh_Time_cnt+0x1>
     9c8:	89 2b       	or	r24, r25
     9ca:	49 f0       	breq	.+18     	; 0x9de <__vector_6+0xae>
     9cc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <LCD_Refresh_Time_cnt>
     9d0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <LCD_Refresh_Time_cnt+0x1>
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <LCD_Refresh_Time_cnt+0x1>
     9da:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <LCD_Refresh_Time_cnt>
	
	if (write_RGB_LCD_activ == 0) read_SWITCH();		// liesst alle DIP-Switch, Tasten und Optionen-Jumper ein und speichert die Zustaände in globalen Variablen ab.
     9de:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <write_RGB_LCD_activ>
     9e2:	88 23       	and	r24, r24
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <__vector_6+0xb8>
     9e6:	ea de       	rcall	.-556    	; 0x7bc <read_SWITCH>
	
}
     9e8:	00 00       	nop
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	ff 91       	pop	r31
     9f0:	ef 91       	pop	r30
     9f2:	bf 91       	pop	r27
     9f4:	af 91       	pop	r26
     9f6:	9f 91       	pop	r25
     9f8:	8f 91       	pop	r24
     9fa:	7f 91       	pop	r23
     9fc:	6f 91       	pop	r22
     9fe:	5f 91       	pop	r21
     a00:	4f 91       	pop	r20
     a02:	3f 91       	pop	r19
     a04:	2f 91       	pop	r18
     a06:	0f 90       	pop	r0
     a08:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
     a0c:	0f 90       	pop	r0
     a0e:	1f 90       	pop	r1
     a10:	18 95       	reti

00000a12 <crate_code>:

u16 Kongruenz_generator(u8 seed)
{
	u16 rand_value = (0xDA*seed+0xCD)%0x0FDA;
	return rand_value;
}
     a12:	cf 92       	push	r12
     a14:	ef 92       	push	r14
     a16:	0f 93       	push	r16
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	00 d0       	rcall	.+0      	; 0xa1e <crate_code+0xc>
     a1e:	1f 92       	push	r1
     a20:	cd b7       	in	r28, 0x3d	; 61
     a22:	de b7       	in	r29, 0x3e	; 62
     a24:	09 de       	rcall	.-1006   	; 0x638 <clear_lcd>
     a26:	8c e3       	ldi	r24, 0x3C	; 60
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	ac 01       	movw	r20, r24
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	96 dc       	rcall	.-1748   	; 0x35e <write_text>
     a32:	81 e5       	ldi	r24, 0x51	; 81
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	ac 01       	movw	r20, r24
     a38:	60 e0       	ldi	r22, 0x00	; 0
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	90 dc       	rcall	.-1760   	; 0x35e <write_text>
     a3e:	8e e5       	ldi	r24, 0x5E	; 94
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	ac 01       	movw	r20, r24
     a44:	62 e1       	ldi	r22, 0x12	; 18
     a46:	83 e0       	ldi	r24, 0x03	; 3
     a48:	8a dc       	rcall	.-1772   	; 0x35e <write_text>
     a4a:	19 82       	std	Y+1, r1	; 0x01
     a4c:	1a 82       	std	Y+2, r1	; 0x02
     a4e:	1b 82       	std	Y+3, r1	; 0x03
     a50:	89 81       	ldd	r24, Y+1	; 0x01
     a52:	88 2f       	mov	r24, r24
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	a0 e0       	ldi	r26, 0x00	; 0
     a58:	b0 e0       	ldi	r27, 0x00	; 0
     a5a:	c1 2c       	mov	r12, r1
     a5c:	e1 2c       	mov	r14, r1
     a5e:	02 e0       	ldi	r16, 0x02	; 2
     a60:	9c 01       	movw	r18, r24
     a62:	ad 01       	movw	r20, r26
     a64:	6a 81       	ldd	r22, Y+2	; 0x02
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	b6 dc       	rcall	.-1684   	; 0x3d6 <write_zahl>
     a6a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Taste_4>
     a6e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Taste_4+0x1>
     a72:	01 97       	sbiw	r24, 0x01	; 1
     a74:	89 f5       	brne	.+98     	; 0xad8 <crate_code+0xc6>
     a76:	8a 81       	ldd	r24, Y+2	; 0x02
     a78:	8d 5f       	subi	r24, 0xFD	; 253
     a7a:	8a 83       	std	Y+2, r24	; 0x02
     a7c:	8b 81       	ldd	r24, Y+3	; 0x03
     a7e:	88 2f       	mov	r24, r24
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	81 5f       	subi	r24, 0xF1	; 241
     a84:	9e 4f       	sbci	r25, 0xFE	; 254
     a86:	29 81       	ldd	r18, Y+1	; 0x01
     a88:	fc 01       	movw	r30, r24
     a8a:	20 83       	st	Z, r18
     a8c:	8b 81       	ldd	r24, Y+3	; 0x03
     a8e:	8f 5f       	subi	r24, 0xFF	; 255
     a90:	8b 83       	std	Y+3, r24	; 0x03
     a92:	19 82       	std	Y+1, r1	; 0x01
     a94:	8b 81       	ldd	r24, Y+3	; 0x03
     a96:	83 30       	cpi	r24, 0x03	; 3
     a98:	08 f0       	brcs	.+2      	; 0xa9c <crate_code+0x8a>
     a9a:	5f c0       	rjmp	.+190    	; 0xb5a <crate_code+0x148>
     a9c:	89 81       	ldd	r24, Y+1	; 0x01
     a9e:	88 2f       	mov	r24, r24
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	a0 e0       	ldi	r26, 0x00	; 0
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	c1 2c       	mov	r12, r1
     aa8:	e1 2c       	mov	r14, r1
     aaa:	02 e0       	ldi	r16, 0x02	; 2
     aac:	9c 01       	movw	r18, r24
     aae:	ad 01       	movw	r20, r26
     ab0:	6a 81       	ldd	r22, Y+2	; 0x02
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	90 dc       	rcall	.-1760   	; 0x3d6 <write_zahl>
     ab6:	81 e6       	ldi	r24, 0x61	; 97
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	ac 01       	movw	r20, r24
     abc:	6a e0       	ldi	r22, 0x0A	; 10
     abe:	82 e0       	ldi	r24, 0x02	; 2
     ac0:	4e dc       	rcall	.-1892   	; 0x35e <write_text>
     ac2:	64 ef       	ldi	r22, 0xF4	; 244
     ac4:	71 e0       	ldi	r23, 0x01	; 1
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	9f db       	rcall	.-2242   	; 0x20a <wait_1ms>
     acc:	89 e6       	ldi	r24, 0x69	; 105
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	ac 01       	movw	r20, r24
     ad2:	6a e0       	ldi	r22, 0x0A	; 10
     ad4:	82 e0       	ldi	r24, 0x02	; 2
     ad6:	43 dc       	rcall	.-1914   	; 0x35e <write_text>
     ad8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <Taste_3>
     adc:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <Taste_3+0x1>
     ae0:	01 97       	sbiw	r24, 0x01	; 1
     ae2:	c9 f4       	brne	.+50     	; 0xb16 <crate_code+0x104>
     ae4:	89 81       	ldd	r24, Y+1	; 0x01
     ae6:	8f 5f       	subi	r24, 0xFF	; 255
     ae8:	89 83       	std	Y+1, r24	; 0x01
     aea:	89 81       	ldd	r24, Y+1	; 0x01
     aec:	80 31       	cpi	r24, 0x10	; 16
     aee:	08 f0       	brcs	.+2      	; 0xaf2 <crate_code+0xe0>
     af0:	19 82       	std	Y+1, r1	; 0x01
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	88 2f       	mov	r24, r24
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	a0 e0       	ldi	r26, 0x00	; 0
     afa:	b0 e0       	ldi	r27, 0x00	; 0
     afc:	c1 2c       	mov	r12, r1
     afe:	e1 2c       	mov	r14, r1
     b00:	02 e0       	ldi	r16, 0x02	; 2
     b02:	9c 01       	movw	r18, r24
     b04:	ad 01       	movw	r20, r26
     b06:	6a 81       	ldd	r22, Y+2	; 0x02
     b08:	82 e0       	ldi	r24, 0x02	; 2
     b0a:	65 dc       	rcall	.-1846   	; 0x3d6 <write_zahl>
     b0c:	64 ef       	ldi	r22, 0xF4	; 244
     b0e:	71 e0       	ldi	r23, 0x01	; 1
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	7a db       	rcall	.-2316   	; 0x20a <wait_1ms>
     b16:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Taste_1>
     b1a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Taste_1+0x1>
     b1e:	01 97       	sbiw	r24, 0x01	; 1
     b20:	09 f0       	breq	.+2      	; 0xb24 <crate_code+0x112>
     b22:	a3 cf       	rjmp	.-186    	; 0xa6a <crate_code+0x58>
     b24:	89 81       	ldd	r24, Y+1	; 0x01
     b26:	81 50       	subi	r24, 0x01	; 1
     b28:	89 83       	std	Y+1, r24	; 0x01
     b2a:	89 81       	ldd	r24, Y+1	; 0x01
     b2c:	80 31       	cpi	r24, 0x10	; 16
     b2e:	10 f0       	brcs	.+4      	; 0xb34 <crate_code+0x122>
     b30:	8f e0       	ldi	r24, 0x0F	; 15
     b32:	89 83       	std	Y+1, r24	; 0x01
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	88 2f       	mov	r24, r24
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	c1 2c       	mov	r12, r1
     b40:	e1 2c       	mov	r14, r1
     b42:	02 e0       	ldi	r16, 0x02	; 2
     b44:	9c 01       	movw	r18, r24
     b46:	ad 01       	movw	r20, r26
     b48:	6a 81       	ldd	r22, Y+2	; 0x02
     b4a:	82 e0       	ldi	r24, 0x02	; 2
     b4c:	44 dc       	rcall	.-1912   	; 0x3d6 <write_zahl>
     b4e:	64 ef       	ldi	r22, 0xF4	; 244
     b50:	71 e0       	ldi	r23, 0x01	; 1
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	59 db       	rcall	.-2382   	; 0x20a <wait_1ms>
     b58:	88 cf       	rjmp	.-240    	; 0xa6a <crate_code+0x58>
     b5a:	00 00       	nop
     b5c:	6d dd       	rcall	.-1318   	; 0x638 <clear_lcd>
     b5e:	81 e7       	ldi	r24, 0x71	; 113
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	ac 01       	movw	r20, r24
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	fa db       	rcall	.-2060   	; 0x35e <write_text>
     b6a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <code.1813>
     b6e:	88 2f       	mov	r24, r24
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	a0 e0       	ldi	r26, 0x00	; 0
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	c1 2c       	mov	r12, r1
     b78:	e1 2c       	mov	r14, r1
     b7a:	02 e0       	ldi	r16, 0x02	; 2
     b7c:	9c 01       	movw	r18, r24
     b7e:	ad 01       	movw	r20, r26
     b80:	66 e0       	ldi	r22, 0x06	; 6
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	28 dc       	rcall	.-1968   	; 0x3d6 <write_zahl>
     b86:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <code.1813+0x1>
     b8a:	88 2f       	mov	r24, r24
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	a0 e0       	ldi	r26, 0x00	; 0
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	c1 2c       	mov	r12, r1
     b94:	e1 2c       	mov	r14, r1
     b96:	02 e0       	ldi	r16, 0x02	; 2
     b98:	9c 01       	movw	r18, r24
     b9a:	ad 01       	movw	r20, r26
     b9c:	6a e0       	ldi	r22, 0x0A	; 10
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	1a dc       	rcall	.-1996   	; 0x3d6 <write_zahl>
     ba2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <code.1813+0x2>
     ba6:	88 2f       	mov	r24, r24
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	a0 e0       	ldi	r26, 0x00	; 0
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	c1 2c       	mov	r12, r1
     bb0:	e1 2c       	mov	r14, r1
     bb2:	02 e0       	ldi	r16, 0x02	; 2
     bb4:	9c 01       	movw	r18, r24
     bb6:	ad 01       	movw	r20, r26
     bb8:	6e e0       	ldi	r22, 0x0E	; 14
     bba:	82 e0       	ldi	r24, 0x02	; 2
     bbc:	0c dc       	rcall	.-2024   	; 0x3d6 <write_zahl>
     bbe:	8f e0       	ldi	r24, 0x0F	; 15
     bc0:	91 e0       	ldi	r25, 0x01	; 1
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	0f 91       	pop	r16
     bce:	ef 90       	pop	r14
     bd0:	cf 90       	pop	r12
     bd2:	08 95       	ret

00000bd4 <start_game>:
     bd4:	cf 92       	push	r12
     bd6:	ef 92       	push	r14
     bd8:	0f 93       	push	r16
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	2d 97       	sbiw	r28, 0x0d	; 13
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	f8 94       	cli
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	cd bf       	out	0x3d, r28	; 61
     bee:	9d 87       	std	Y+13, r25	; 0x0d
     bf0:	8c 87       	std	Y+12, r24	; 0x0c
     bf2:	22 dd       	rcall	.-1468   	; 0x638 <clear_lcd>
     bf4:	87 e0       	ldi	r24, 0x07	; 7
     bf6:	2b dd       	rcall	.-1450   	; 0x64e <get_ADC_Channel>
     bf8:	99 87       	std	Y+9, r25	; 0x09
     bfa:	88 87       	std	Y+8, r24	; 0x08
     bfc:	88 85       	ldd	r24, Y+8	; 0x08
     bfe:	99 85       	ldd	r25, Y+9	; 0x09
     c00:	00 24       	eor	r0, r0
     c02:	88 0f       	add	r24, r24
     c04:	99 1f       	adc	r25, r25
     c06:	00 1c       	adc	r0, r0
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	00 1c       	adc	r0, r0
     c0e:	89 2f       	mov	r24, r25
     c10:	90 2d       	mov	r25, r0
     c12:	99 87       	std	Y+9, r25	; 0x09
     c14:	88 87       	std	Y+8, r24	; 0x08
     c16:	87 e0       	ldi	r24, 0x07	; 7
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9a 83       	std	Y+2, r25	; 0x02
     c1c:	89 83       	std	Y+1, r24	; 0x01
     c1e:	1c 82       	std	Y+4, r1	; 0x04
     c20:	1b 82       	std	Y+3, r1	; 0x03
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	9a 81       	ldd	r25, Y+2	; 0x02
     c26:	40 e0       	ldi	r20, 0x00	; 0
     c28:	50 e0       	ldi	r21, 0x00	; 0
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	2a dd       	rcall	.-1452   	; 0x684 <set_RGB_LED>
     c30:	1d 82       	std	Y+5, r1	; 0x05
     c32:	88 e0       	ldi	r24, 0x08	; 8
     c34:	8e 83       	std	Y+6, r24	; 0x06
     c36:	86 e8       	ldi	r24, 0x86	; 134
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	ac 01       	movw	r20, r24
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	83 e0       	ldi	r24, 0x03	; 3
     c40:	8e db       	rcall	.-2276   	; 0x35e <write_text>
     c42:	8b e9       	ldi	r24, 0x9B	; 155
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	ac 01       	movw	r20, r24
     c48:	62 e0       	ldi	r22, 0x02	; 2
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	88 db       	rcall	.-2288   	; 0x35e <write_text>
     c4e:	95 c0       	rjmp	.+298    	; 0xd7a <start_game+0x1a6>
     c50:	1f 82       	std	Y+7, r1	; 0x07
     c52:	8f c0       	rjmp	.+286    	; 0xd72 <start_game+0x19e>
     c54:	87 e0       	ldi	r24, 0x07	; 7
     c56:	fb dc       	rcall	.-1546   	; 0x64e <get_ADC_Channel>
     c58:	9b 87       	std	Y+11, r25	; 0x0b
     c5a:	8a 87       	std	Y+10, r24	; 0x0a
     c5c:	8a 85       	ldd	r24, Y+10	; 0x0a
     c5e:	9b 85       	ldd	r25, Y+11	; 0x0b
     c60:	00 24       	eor	r0, r0
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	00 1c       	adc	r0, r0
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	00 1c       	adc	r0, r0
     c6e:	89 2f       	mov	r24, r25
     c70:	90 2d       	mov	r25, r0
     c72:	9b 87       	std	Y+11, r25	; 0x0b
     c74:	8a 87       	std	Y+10, r24	; 0x0a
     c76:	8d 81       	ldd	r24, Y+5	; 0x05
     c78:	88 2f       	mov	r24, r24
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	2c 85       	ldd	r18, Y+12	; 0x0c
     c7e:	3d 85       	ldd	r19, Y+13	; 0x0d
     c80:	82 0f       	add	r24, r18
     c82:	93 1f       	adc	r25, r19
     c84:	fc 01       	movw	r30, r24
     c86:	80 81       	ld	r24, Z
     c88:	28 2f       	mov	r18, r24
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	8a 85       	ldd	r24, Y+10	; 0x0a
     c8e:	9b 85       	ldd	r25, Y+11	; 0x0b
     c90:	28 17       	cp	r18, r24
     c92:	39 07       	cpc	r19, r25
     c94:	09 f0       	breq	.+2      	; 0xc98 <start_game+0xc4>
     c96:	46 c0       	rjmp	.+140    	; 0xd24 <start_game+0x150>
     c98:	40 e0       	ldi	r20, 0x00	; 0
     c9a:	50 e0       	ldi	r21, 0x00	; 0
     c9c:	67 e0       	ldi	r22, 0x07	; 7
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	ef dc       	rcall	.-1570   	; 0x684 <set_RGB_LED>
     ca6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Taste_4>
     caa:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Taste_4+0x1>
     cae:	01 97       	sbiw	r24, 0x01	; 1
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <start_game+0xe0>
     cb2:	40 c0       	rjmp	.+128    	; 0xd34 <start_game+0x160>
     cb4:	8b 81       	ldd	r24, Y+3	; 0x03
     cb6:	9c 81       	ldd	r25, Y+4	; 0x04
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	9c 83       	std	Y+4, r25	; 0x04
     cbe:	8b 83       	std	Y+3, r24	; 0x03
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	9c 81       	ldd	r25, Y+4	; 0x04
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	9c 83       	std	Y+4, r25	; 0x04
     cc8:	8b 83       	std	Y+3, r24	; 0x03
     cca:	27 e0       	ldi	r18, 0x07	; 7
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	9c 81       	ldd	r25, Y+4	; 0x04
     cd2:	a9 01       	movw	r20, r18
     cd4:	48 1b       	sub	r20, r24
     cd6:	59 0b       	sbc	r21, r25
     cd8:	ca 01       	movw	r24, r20
     cda:	9a 83       	std	Y+2, r25	; 0x02
     cdc:	89 83       	std	Y+1, r24	; 0x01
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	8f 83       	std	Y+7, r24	; 0x07
     ce2:	8d 81       	ldd	r24, Y+5	; 0x05
     ce4:	88 2f       	mov	r24, r24
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	2c 85       	ldd	r18, Y+12	; 0x0c
     cea:	3d 85       	ldd	r19, Y+13	; 0x0d
     cec:	82 0f       	add	r24, r18
     cee:	93 1f       	adc	r25, r19
     cf0:	fc 01       	movw	r30, r24
     cf2:	80 81       	ld	r24, Z
     cf4:	88 2f       	mov	r24, r24
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	a0 e0       	ldi	r26, 0x00	; 0
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	c1 2c       	mov	r12, r1
     cfe:	e1 2c       	mov	r14, r1
     d00:	02 e0       	ldi	r16, 0x02	; 2
     d02:	9c 01       	movw	r18, r24
     d04:	ad 01       	movw	r20, r26
     d06:	6e 81       	ldd	r22, Y+6	; 0x06
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	65 db       	rcall	.-2358   	; 0x3d6 <write_zahl>
     d0c:	8e 81       	ldd	r24, Y+6	; 0x06
     d0e:	8d 5f       	subi	r24, 0xFD	; 253
     d10:	8e 83       	std	Y+6, r24	; 0x06
     d12:	8d 81       	ldd	r24, Y+5	; 0x05
     d14:	8f 5f       	subi	r24, 0xFF	; 255
     d16:	8d 83       	std	Y+5, r24	; 0x05
     d18:	64 ef       	ldi	r22, 0xF4	; 244
     d1a:	71 e0       	ldi	r23, 0x01	; 1
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	74 da       	rcall	.-2840   	; 0x20a <wait_1ms>
     d22:	08 c0       	rjmp	.+16     	; 0xd34 <start_game+0x160>
     d24:	2b 81       	ldd	r18, Y+3	; 0x03
     d26:	3c 81       	ldd	r19, Y+4	; 0x04
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	9a 81       	ldd	r25, Y+2	; 0x02
     d2c:	40 e0       	ldi	r20, 0x00	; 0
     d2e:	50 e0       	ldi	r21, 0x00	; 0
     d30:	b9 01       	movw	r22, r18
     d32:	a8 dc       	rcall	.-1712   	; 0x684 <set_RGB_LED>
     d34:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Taste_4>
     d38:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Taste_4+0x1>
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	c9 f4       	brne	.+50     	; 0xd72 <start_game+0x19e>
     d40:	8d 81       	ldd	r24, Y+5	; 0x05
     d42:	88 2f       	mov	r24, r24
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	2c 85       	ldd	r18, Y+12	; 0x0c
     d48:	3d 85       	ldd	r19, Y+13	; 0x0d
     d4a:	82 0f       	add	r24, r18
     d4c:	93 1f       	adc	r25, r19
     d4e:	fc 01       	movw	r30, r24
     d50:	80 81       	ld	r24, Z
     d52:	28 2f       	mov	r18, r24
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	8a 85       	ldd	r24, Y+10	; 0x0a
     d58:	9b 85       	ldd	r25, Y+11	; 0x0b
     d5a:	28 17       	cp	r18, r24
     d5c:	39 07       	cpc	r19, r25
     d5e:	49 f0       	breq	.+18     	; 0xd72 <start_game+0x19e>
     d60:	40 e0       	ldi	r20, 0x00	; 0
     d62:	50 e0       	ldi	r21, 0x00	; 0
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	8b dc       	rcall	.-1770   	; 0x684 <set_RGB_LED>
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	10 c0       	rjmp	.+32     	; 0xd92 <start_game+0x1be>
     d72:	8f 81       	ldd	r24, Y+7	; 0x07
     d74:	88 23       	and	r24, r24
     d76:	09 f4       	brne	.+2      	; 0xd7a <start_game+0x1a6>
     d78:	6d cf       	rjmp	.-294    	; 0xc54 <start_game+0x80>
     d7a:	8d 81       	ldd	r24, Y+5	; 0x05
     d7c:	83 30       	cpi	r24, 0x03	; 3
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <start_game+0x1ae>
     d80:	67 cf       	rjmp	.-306    	; 0xc50 <start_game+0x7c>
     d82:	40 e0       	ldi	r20, 0x00	; 0
     d84:	50 e0       	ldi	r21, 0x00	; 0
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	7a dc       	rcall	.-1804   	; 0x684 <set_RGB_LED>
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	2d 96       	adiw	r28, 0x0d	; 13
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	0f 91       	pop	r16
     da4:	ef 90       	pop	r14
     da6:	cf 90       	pop	r12
     da8:	08 95       	ret

00000daa <code_cracker_game>:
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	00 d0       	rcall	.+0      	; 0xdb0 <code_cracker_game+0x6>
     db0:	1f 92       	push	r1
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	40 dc       	rcall	.-1920   	; 0x638 <clear_lcd>
     db8:	8c ea       	ldi	r24, 0xAC	; 172
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	ac 01       	movw	r20, r24
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	cd da       	rcall	.-2662   	; 0x35e <write_text>
     dc4:	8e eb       	ldi	r24, 0xBE	; 190
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	ac 01       	movw	r20, r24
     dca:	6d e0       	ldi	r22, 0x0D	; 13
     dcc:	83 e0       	ldi	r24, 0x03	; 3
     dce:	c7 da       	rcall	.-2674   	; 0x35e <write_text>
     dd0:	64 ef       	ldi	r22, 0xF4	; 244
     dd2:	71 e0       	ldi	r23, 0x01	; 1
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	18 da       	rcall	.-3024   	; 0x20a <wait_1ms>
     dda:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Taste_1>
     dde:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Taste_1+0x1>
     de2:	01 97       	sbiw	r24, 0x01	; 1
     de4:	a9 f4       	brne	.+42     	; 0xe10 <code_cracker_game+0x66>
     de6:	15 de       	rcall	.-982    	; 0xa12 <crate_code>
     de8:	9a 83       	std	Y+2, r25	; 0x02
     dea:	89 83       	std	Y+1, r24	; 0x01
     dec:	25 dc       	rcall	.-1974   	; 0x638 <clear_lcd>
     dee:	86 ec       	ldi	r24, 0xC6	; 198
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	ac 01       	movw	r20, r24
     df4:	60 e0       	ldi	r22, 0x00	; 0
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	b2 da       	rcall	.-2716   	; 0x35e <write_text>
     dfa:	88 ed       	ldi	r24, 0xD8	; 216
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	ac 01       	movw	r20, r24
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	83 e0       	ldi	r24, 0x03	; 3
     e04:	ac da       	rcall	.-2728   	; 0x35e <write_text>
     e06:	64 ef       	ldi	r22, 0xF4	; 244
     e08:	71 e0       	ldi	r23, 0x01	; 1
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	fd d9       	rcall	.-3078   	; 0x20a <wait_1ms>
     e10:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Taste_2>
     e14:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Taste_2+0x1>
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	d1 f5       	brne	.+116    	; 0xe90 <code_cracker_game+0xe6>
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	9a 81       	ldd	r25, Y+2	; 0x02
     e20:	d9 de       	rcall	.-590    	; 0xbd4 <start_game>
     e22:	8b 83       	std	Y+3, r24	; 0x03
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	d1 f4       	brne	.+52     	; 0xe5e <code_cracker_game+0xb4>
     e2a:	06 dc       	rcall	.-2036   	; 0x638 <clear_lcd>
     e2c:	8d ee       	ldi	r24, 0xED	; 237
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	ac 01       	movw	r20, r24
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	93 da       	rcall	.-2778   	; 0x35e <write_text>
     e38:	60 e1       	ldi	r22, 0x10	; 16
     e3a:	77 e2       	ldi	r23, 0x27	; 39
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	e4 d9       	rcall	.-3128   	; 0x20a <wait_1ms>
     e42:	fa db       	rcall	.-2060   	; 0x638 <clear_lcd>
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	ac 01       	movw	r20, r24
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	87 da       	rcall	.-2802   	; 0x35e <write_text>
     e50:	83 e1       	ldi	r24, 0x13	; 19
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	ac 01       	movw	r20, r24
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	83 e0       	ldi	r24, 0x03	; 3
     e5a:	81 da       	rcall	.-2814   	; 0x35e <write_text>
     e5c:	19 c0       	rjmp	.+50     	; 0xe90 <code_cracker_game+0xe6>
     e5e:	ec db       	rcall	.-2088   	; 0x638 <clear_lcd>
     e60:	88 e2       	ldi	r24, 0x28	; 40
     e62:	91 e0       	ldi	r25, 0x01	; 1
     e64:	ac 01       	movw	r20, r24
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	79 da       	rcall	.-2830   	; 0x35e <write_text>
     e6c:	60 e1       	ldi	r22, 0x10	; 16
     e6e:	77 e2       	ldi	r23, 0x27	; 39
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	ca d9       	rcall	.-3180   	; 0x20a <wait_1ms>
     e76:	e0 db       	rcall	.-2112   	; 0x638 <clear_lcd>
     e78:	8c e3       	ldi	r24, 0x3C	; 60
     e7a:	91 e0       	ldi	r25, 0x01	; 1
     e7c:	ac 01       	movw	r20, r24
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	6d da       	rcall	.-2854   	; 0x35e <write_text>
     e84:	8e e4       	ldi	r24, 0x4E	; 78
     e86:	91 e0       	ldi	r25, 0x01	; 1
     e88:	ac 01       	movw	r20, r24
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	83 e0       	ldi	r24, 0x03	; 3
     e8e:	67 da       	rcall	.-2866   	; 0x35e <write_text>
     e90:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Taste_4>
     e94:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Taste_4+0x1>
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	09 f0       	breq	.+2      	; 0xe9e <code_cracker_game+0xf4>
     e9c:	9e cf       	rjmp	.-196    	; 0xdda <code_cracker_game+0x30>
     e9e:	cc db       	rcall	.-2152   	; 0x638 <clear_lcd>
     ea0:	64 e6       	ldi	r22, 0x64	; 100
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	b0 d9       	rcall	.-3232   	; 0x20a <wait_1ms>
     eaa:	00 00       	nop
     eac:	00 00       	nop
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	08 95       	ret

00000eba <start_fighter_game>:

void start_fighter_game()
{
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	ed 97       	sbiw	r28, 0x3d	; 61
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
	clear_lcd();
     ece:	b4 db       	rcall	.-2200   	; 0x638 <clear_lcd>

	u16 life_points = 0x001F;
     ed0:	8f e1       	ldi	r24, 0x1F	; 31
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	89 83       	std	Y+1, r24	; 0x01
	u16 losted_points = 0;
     ed8:	1e 86       	std	Y+14, r1	; 0x0e
     eda:	1d 86       	std	Y+13, r1	; 0x0d

	//player vars
	u8 player_x_pos = 3;
     edc:	83 e0       	ldi	r24, 0x03	; 3
     ede:	8f 87       	std	Y+15, r24	; 0x0f
	u8 player_y_pos = 1;
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	8b 83       	std	Y+3, r24	; 0x03
	u8 player_save_time = 0;
     ee4:	1c 82       	std	Y+4, r1	; 0x04
	u8 cool_down = 5;
     ee6:	85 e0       	ldi	r24, 0x05	; 5
     ee8:	8d 83       	std	Y+5, r24	; 0x05

	//target vars
	u8 respawn = 0;
     eea:	1e 82       	std	Y+6, r1	; 0x06
	u8 target_y_pos = 15;
     eec:	8f e0       	ldi	r24, 0x0F	; 15
     eee:	8f 83       	std	Y+7, r24	; 0x07
	u8 target_x_pos = 19;
     ef0:	83 e1       	ldi	r24, 0x13	; 19
     ef2:	88 8b       	std	Y+16, r24	; 0x10
	u8 move_cool_down = 5;
     ef4:	85 e0       	ldi	r24, 0x05	; 5
     ef6:	88 87       	std	Y+8, r24	; 0x08
	u8 target_y_poses[20];
	for (u8 j = 0;j<20;j++)
     ef8:	19 86       	std	Y+9, r1	; 0x09
     efa:	0e c0       	rjmp	.+28     	; 0xf18 <start_fighter_game+0x5e>
	{
		target_y_poses[j] = 15;
     efc:	89 85       	ldd	r24, Y+9	; 0x09
     efe:	88 2f       	mov	r24, r24
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	9e 01       	movw	r18, r28
     f04:	2a 5e       	subi	r18, 0xEA	; 234
     f06:	3f 4f       	sbci	r19, 0xFF	; 255
     f08:	82 0f       	add	r24, r18
     f0a:	93 1f       	adc	r25, r19
     f0c:	2f e0       	ldi	r18, 0x0F	; 15
     f0e:	fc 01       	movw	r30, r24
     f10:	20 83       	st	Z, r18
	u8 respawn = 0;
	u8 target_y_pos = 15;
	u8 target_x_pos = 19;
	u8 move_cool_down = 5;
	u8 target_y_poses[20];
	for (u8 j = 0;j<20;j++)
     f12:	89 85       	ldd	r24, Y+9	; 0x09
     f14:	8f 5f       	subi	r24, 0xFF	; 255
     f16:	89 87       	std	Y+9, r24	; 0x09
     f18:	89 85       	ldd	r24, Y+9	; 0x09
     f1a:	84 31       	cpi	r24, 0x14	; 20
     f1c:	78 f3       	brcs	.-34     	; 0xefc <start_fighter_game+0x42>
	{
		target_y_poses[j] = 15;
	}
	u8 target_x_poses[20];
	for (u8 j = 0;j<20;j++)
     f1e:	1a 86       	std	Y+10, r1	; 0x0a
     f20:	0e c0       	rjmp	.+28     	; 0xf3e <start_fighter_game+0x84>
	{
		target_x_poses[j] = 19;
     f22:	8a 85       	ldd	r24, Y+10	; 0x0a
     f24:	88 2f       	mov	r24, r24
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	9e 01       	movw	r18, r28
     f2a:	26 5d       	subi	r18, 0xD6	; 214
     f2c:	3f 4f       	sbci	r19, 0xFF	; 255
     f2e:	82 0f       	add	r24, r18
     f30:	93 1f       	adc	r25, r19
     f32:	23 e1       	ldi	r18, 0x13	; 19
     f34:	fc 01       	movw	r30, r24
     f36:	20 83       	st	Z, r18
	for (u8 j = 0;j<20;j++)
	{
		target_y_poses[j] = 15;
	}
	u8 target_x_poses[20];
	for (u8 j = 0;j<20;j++)
     f38:	8a 85       	ldd	r24, Y+10	; 0x0a
     f3a:	8f 5f       	subi	r24, 0xFF	; 255
     f3c:	8a 87       	std	Y+10, r24	; 0x0a
     f3e:	8a 85       	ldd	r24, Y+10	; 0x0a
     f40:	84 31       	cpi	r24, 0x14	; 20
     f42:	78 f3       	brcs	.-34     	; 0xf22 <start_fighter_game+0x68>
	{
		target_x_poses[j] = 19;
	}

	//other game vars
	u8 seed = 333;
     f44:	8d e4       	ldi	r24, 0x4D	; 77
     f46:	89 8b       	std	Y+17, r24	; 0x11
	u16 fps = 60;
     f48:	8c e3       	ldi	r24, 0x3C	; 60
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	9b 8b       	std	Y+19, r25	; 0x13
     f4e:	8a 8b       	std	Y+18, r24	; 0x12

	set_RGB_LED(losted_points,0,life_points);
     f50:	29 81       	ldd	r18, Y+1	; 0x01
     f52:	3a 81       	ldd	r19, Y+2	; 0x02
     f54:	8d 85       	ldd	r24, Y+13	; 0x0d
     f56:	9e 85       	ldd	r25, Y+14	; 0x0e
     f58:	a9 01       	movw	r20, r18
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	92 db       	rcall	.-2268   	; 0x684 <set_RGB_LED>

	while (life_points>0)
     f60:	71 c1       	rjmp	.+738    	; 0x1244 <start_fighter_game+0x38a>
	{
		//create a new enemy
		if (respawn<1)
     f62:	8e 81       	ldd	r24, Y+6	; 0x06
     f64:	88 23       	and	r24, r24
     f66:	09 f0       	breq	.+2      	; 0xf6a <start_fighter_game+0xb0>
     f68:	45 c0       	rjmp	.+138    	; 0xff4 <start_fighter_game+0x13a>
		{
			srand((seed*target_y_pos)&0xFFFF);
     f6a:	89 89       	ldd	r24, Y+17	; 0x11
     f6c:	88 2f       	mov	r24, r24
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	2f 81       	ldd	r18, Y+7	; 0x07
     f72:	22 2f       	mov	r18, r18
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	b9 01       	movw	r22, r18
     f78:	b6 d1       	rcall	.+876    	; 0x12e6 <__mulhi3>
     f7a:	36 d2       	rcall	.+1132   	; 0x13e8 <srand>
			u16 random_value = rand()&0x000E;
     f7c:	31 d2       	rcall	.+1122   	; 0x13e0 <rand>
     f7e:	8e 70       	andi	r24, 0x0E	; 14
     f80:	99 27       	eor	r25, r25
     f82:	9d 8b       	std	Y+21, r25	; 0x15
     f84:	8c 8b       	std	Y+20, r24	; 0x14
			target_y_pos = random_value>>1;
     f86:	8c 89       	ldd	r24, Y+20	; 0x14
     f88:	9d 89       	ldd	r25, Y+21	; 0x15
     f8a:	96 95       	lsr	r25
     f8c:	87 95       	ror	r24
     f8e:	8f 83       	std	Y+7, r24	; 0x07
			if (target_y_pos > 3)
     f90:	8f 81       	ldd	r24, Y+7	; 0x07
     f92:	84 30       	cpi	r24, 0x04	; 4
     f94:	10 f0       	brcs	.+4      	; 0xf9a <start_fighter_game+0xe0>
			{
				target_y_pos = 2;
     f96:	82 e0       	ldi	r24, 0x02	; 2
     f98:	8f 83       	std	Y+7, r24	; 0x07
			}

			for (u8 j = 0;j<20;j++)
     f9a:	1b 86       	std	Y+11, r1	; 0x0b
     f9c:	26 c0       	rjmp	.+76     	; 0xfea <start_fighter_game+0x130>
			{
				if (target_y_poses[j] == 15)
     f9e:	8b 85       	ldd	r24, Y+11	; 0x0b
     fa0:	88 2f       	mov	r24, r24
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	9e 01       	movw	r18, r28
     fa6:	2a 5e       	subi	r18, 0xEA	; 234
     fa8:	3f 4f       	sbci	r19, 0xFF	; 255
     faa:	82 0f       	add	r24, r18
     fac:	93 1f       	adc	r25, r19
     fae:	fc 01       	movw	r30, r24
     fb0:	80 81       	ld	r24, Z
     fb2:	8f 30       	cpi	r24, 0x0F	; 15
     fb4:	b9 f4       	brne	.+46     	; 0xfe4 <start_fighter_game+0x12a>
				{
					target_y_poses[j] = target_y_pos;
     fb6:	8b 85       	ldd	r24, Y+11	; 0x0b
     fb8:	88 2f       	mov	r24, r24
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	9e 01       	movw	r18, r28
     fbe:	2a 5e       	subi	r18, 0xEA	; 234
     fc0:	3f 4f       	sbci	r19, 0xFF	; 255
     fc2:	82 0f       	add	r24, r18
     fc4:	93 1f       	adc	r25, r19
     fc6:	2f 81       	ldd	r18, Y+7	; 0x07
     fc8:	fc 01       	movw	r30, r24
     fca:	20 83       	st	Z, r18
					target_x_poses[j] = target_x_pos;
     fcc:	8b 85       	ldd	r24, Y+11	; 0x0b
     fce:	88 2f       	mov	r24, r24
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	9e 01       	movw	r18, r28
     fd4:	26 5d       	subi	r18, 0xD6	; 214
     fd6:	3f 4f       	sbci	r19, 0xFF	; 255
     fd8:	82 0f       	add	r24, r18
     fda:	93 1f       	adc	r25, r19
     fdc:	28 89       	ldd	r18, Y+16	; 0x10
     fde:	fc 01       	movw	r30, r24
     fe0:	20 83       	st	Z, r18
					break;
     fe2:	06 c0       	rjmp	.+12     	; 0xff0 <start_fighter_game+0x136>
			if (target_y_pos > 3)
			{
				target_y_pos = 2;
			}

			for (u8 j = 0;j<20;j++)
     fe4:	8b 85       	ldd	r24, Y+11	; 0x0b
     fe6:	8f 5f       	subi	r24, 0xFF	; 255
     fe8:	8b 87       	std	Y+11, r24	; 0x0b
     fea:	8b 85       	ldd	r24, Y+11	; 0x0b
     fec:	84 31       	cpi	r24, 0x14	; 20
     fee:	b8 f2       	brcs	.-82     	; 0xf9e <start_fighter_game+0xe4>
					target_x_poses[j] = target_x_pos;
					break;
				}
			}

			respawn = 20;
     ff0:	84 e1       	ldi	r24, 0x14	; 20
     ff2:	8e 83       	std	Y+6, r24	; 0x06
		}
		//move enemy
		if(move_cool_down == 0)
     ff4:	88 85       	ldd	r24, Y+8	; 0x08
     ff6:	88 23       	and	r24, r24
     ff8:	09 f0       	breq	.+2      	; 0xffc <start_fighter_game+0x142>
     ffa:	d0 c0       	rjmp	.+416    	; 0x119c <start_fighter_game+0x2e2>
		{
			for (u8 i = 0; i<20;i++)
     ffc:	1c 86       	std	Y+12, r1	; 0x0c
     ffe:	c8 c0       	rjmp	.+400    	; 0x1190 <start_fighter_game+0x2d6>
			{
				if (target_y_poses[i]<4)
    1000:	8c 85       	ldd	r24, Y+12	; 0x0c
    1002:	88 2f       	mov	r24, r24
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	9e 01       	movw	r18, r28
    1008:	2a 5e       	subi	r18, 0xEA	; 234
    100a:	3f 4f       	sbci	r19, 0xFF	; 255
    100c:	82 0f       	add	r24, r18
    100e:	93 1f       	adc	r25, r19
    1010:	fc 01       	movw	r30, r24
    1012:	80 81       	ld	r24, Z
    1014:	84 30       	cpi	r24, 0x04	; 4
    1016:	08 f0       	brcs	.+2      	; 0x101a <start_fighter_game+0x160>
    1018:	46 c0       	rjmp	.+140    	; 0x10a6 <start_fighter_game+0x1ec>
				{
					write_text(target_y_poses[i],target_x_poses[i],PSTR(" "));
    101a:	43 e6       	ldi	r20, 0x63	; 99
    101c:	51 e0       	ldi	r21, 0x01	; 1
    101e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1020:	88 2f       	mov	r24, r24
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	9e 01       	movw	r18, r28
    1026:	26 5d       	subi	r18, 0xD6	; 214
    1028:	3f 4f       	sbci	r19, 0xFF	; 255
    102a:	82 0f       	add	r24, r18
    102c:	93 1f       	adc	r25, r19
    102e:	fc 01       	movw	r30, r24
    1030:	60 81       	ld	r22, Z
    1032:	8c 85       	ldd	r24, Y+12	; 0x0c
    1034:	88 2f       	mov	r24, r24
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	9e 01       	movw	r18, r28
    103a:	2a 5e       	subi	r18, 0xEA	; 234
    103c:	3f 4f       	sbci	r19, 0xFF	; 255
    103e:	82 0f       	add	r24, r18
    1040:	93 1f       	adc	r25, r19
    1042:	fc 01       	movw	r30, r24
    1044:	80 81       	ld	r24, Z
    1046:	8b d9       	rcall	.-3306   	; 0x35e <write_text>
					target_x_poses[i] = target_x_poses[i]-1;
    1048:	8c 85       	ldd	r24, Y+12	; 0x0c
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1050:	22 2f       	mov	r18, r18
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	ae 01       	movw	r20, r28
    1056:	46 5d       	subi	r20, 0xD6	; 214
    1058:	5f 4f       	sbci	r21, 0xFF	; 255
    105a:	24 0f       	add	r18, r20
    105c:	35 1f       	adc	r19, r21
    105e:	f9 01       	movw	r30, r18
    1060:	20 81       	ld	r18, Z
    1062:	4f ef       	ldi	r20, 0xFF	; 255
    1064:	42 0f       	add	r20, r18
    1066:	9e 01       	movw	r18, r28
    1068:	26 5d       	subi	r18, 0xD6	; 214
    106a:	3f 4f       	sbci	r19, 0xFF	; 255
    106c:	82 0f       	add	r24, r18
    106e:	93 1f       	adc	r25, r19
    1070:	fc 01       	movw	r30, r24
    1072:	40 83       	st	Z, r20
					write_text(target_y_poses[i],target_x_poses[i],PSTR("\x11"""));
    1074:	45 e6       	ldi	r20, 0x65	; 101
    1076:	51 e0       	ldi	r21, 0x01	; 1
    1078:	8c 85       	ldd	r24, Y+12	; 0x0c
    107a:	88 2f       	mov	r24, r24
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	9e 01       	movw	r18, r28
    1080:	26 5d       	subi	r18, 0xD6	; 214
    1082:	3f 4f       	sbci	r19, 0xFF	; 255
    1084:	82 0f       	add	r24, r18
    1086:	93 1f       	adc	r25, r19
    1088:	fc 01       	movw	r30, r24
    108a:	60 81       	ld	r22, Z
    108c:	8c 85       	ldd	r24, Y+12	; 0x0c
    108e:	88 2f       	mov	r24, r24
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	9e 01       	movw	r18, r28
    1094:	2a 5e       	subi	r18, 0xEA	; 234
    1096:	3f 4f       	sbci	r19, 0xFF	; 255
    1098:	82 0f       	add	r24, r18
    109a:	93 1f       	adc	r25, r19
    109c:	fc 01       	movw	r30, r24
    109e:	80 81       	ld	r24, Z
    10a0:	5e d9       	rcall	.-3396   	; 0x35e <write_text>
					move_cool_down = 5;
    10a2:	85 e0       	ldi	r24, 0x05	; 5
    10a4:	88 87       	std	Y+8, r24	; 0x08
				}
				if (target_x_poses[i]<=1)
    10a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	9e 01       	movw	r18, r28
    10ae:	26 5d       	subi	r18, 0xD6	; 214
    10b0:	3f 4f       	sbci	r19, 0xFF	; 255
    10b2:	82 0f       	add	r24, r18
    10b4:	93 1f       	adc	r25, r19
    10b6:	fc 01       	movw	r30, r24
    10b8:	80 81       	ld	r24, Z
    10ba:	82 30       	cpi	r24, 0x02	; 2
    10bc:	10 f5       	brcc	.+68     	; 0x1102 <start_fighter_game+0x248>
				{
					write_text(target_y_poses[i],target_x_poses[i],PSTR(" "));
    10be:	47 e6       	ldi	r20, 0x67	; 103
    10c0:	51 e0       	ldi	r21, 0x01	; 1
    10c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    10c4:	88 2f       	mov	r24, r24
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	9e 01       	movw	r18, r28
    10ca:	26 5d       	subi	r18, 0xD6	; 214
    10cc:	3f 4f       	sbci	r19, 0xFF	; 255
    10ce:	82 0f       	add	r24, r18
    10d0:	93 1f       	adc	r25, r19
    10d2:	fc 01       	movw	r30, r24
    10d4:	60 81       	ld	r22, Z
    10d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    10d8:	88 2f       	mov	r24, r24
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	9e 01       	movw	r18, r28
    10de:	2a 5e       	subi	r18, 0xEA	; 234
    10e0:	3f 4f       	sbci	r19, 0xFF	; 255
    10e2:	82 0f       	add	r24, r18
    10e4:	93 1f       	adc	r25, r19
    10e6:	fc 01       	movw	r30, r24
    10e8:	80 81       	ld	r24, Z
    10ea:	39 d9       	rcall	.-3470   	; 0x35e <write_text>
					target_y_poses[i] = 15;
    10ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    10ee:	88 2f       	mov	r24, r24
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	9e 01       	movw	r18, r28
    10f4:	2a 5e       	subi	r18, 0xEA	; 234
    10f6:	3f 4f       	sbci	r19, 0xFF	; 255
    10f8:	82 0f       	add	r24, r18
    10fa:	93 1f       	adc	r25, r19
    10fc:	2f e0       	ldi	r18, 0x0F	; 15
    10fe:	fc 01       	movw	r30, r24
    1100:	20 83       	st	Z, r18
				}
				//damage und display life points leds
				if (target_x_poses[i] == player_x_pos && target_y_poses[i] == player_y_pos && player_save_time==0)
    1102:	8c 85       	ldd	r24, Y+12	; 0x0c
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	9e 01       	movw	r18, r28
    110a:	26 5d       	subi	r18, 0xD6	; 214
    110c:	3f 4f       	sbci	r19, 0xFF	; 255
    110e:	82 0f       	add	r24, r18
    1110:	93 1f       	adc	r25, r19
    1112:	fc 01       	movw	r30, r24
    1114:	90 81       	ld	r25, Z
    1116:	8f 85       	ldd	r24, Y+15	; 0x0f
    1118:	98 17       	cp	r25, r24
    111a:	b9 f5       	brne	.+110    	; 0x118a <start_fighter_game+0x2d0>
    111c:	8c 85       	ldd	r24, Y+12	; 0x0c
    111e:	88 2f       	mov	r24, r24
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	9e 01       	movw	r18, r28
    1124:	2a 5e       	subi	r18, 0xEA	; 234
    1126:	3f 4f       	sbci	r19, 0xFF	; 255
    1128:	82 0f       	add	r24, r18
    112a:	93 1f       	adc	r25, r19
    112c:	fc 01       	movw	r30, r24
    112e:	90 81       	ld	r25, Z
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	98 17       	cp	r25, r24
    1134:	51 f5       	brne	.+84     	; 0x118a <start_fighter_game+0x2d0>
    1136:	8c 81       	ldd	r24, Y+4	; 0x04
    1138:	88 23       	and	r24, r24
    113a:	39 f5       	brne	.+78     	; 0x118a <start_fighter_game+0x2d0>
				{
					write_text(player_y_pos,player_x_pos-1,PSTR(" \xB2"""));
    113c:	89 e6       	ldi	r24, 0x69	; 105
    113e:	91 e0       	ldi	r25, 0x01	; 1
    1140:	2f 85       	ldd	r18, Y+15	; 0x0f
    1142:	21 50       	subi	r18, 0x01	; 1
    1144:	ac 01       	movw	r20, r24
    1146:	62 2f       	mov	r22, r18
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	09 d9       	rcall	.-3566   	; 0x35e <write_text>
					life_points = life_points>>1;
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	9a 81       	ldd	r25, Y+2	; 0x02
    1150:	96 95       	lsr	r25
    1152:	87 95       	ror	r24
    1154:	9a 83       	std	Y+2, r25	; 0x02
    1156:	89 83       	std	Y+1, r24	; 0x01
					losted_points = 0x001F-life_points;
    1158:	2f e1       	ldi	r18, 0x1F	; 31
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	a9 01       	movw	r20, r18
    1162:	48 1b       	sub	r20, r24
    1164:	59 0b       	sbc	r21, r25
    1166:	ca 01       	movw	r24, r20
    1168:	9e 87       	std	Y+14, r25	; 0x0e
    116a:	8d 87       	std	Y+13, r24	; 0x0d
					set_RGB_LED(losted_points,0,life_points);
    116c:	29 81       	ldd	r18, Y+1	; 0x01
    116e:	3a 81       	ldd	r19, Y+2	; 0x02
    1170:	8d 85       	ldd	r24, Y+13	; 0x0d
    1172:	9e 85       	ldd	r25, Y+14	; 0x0e
    1174:	a9 01       	movw	r20, r18
    1176:	60 e0       	ldi	r22, 0x00	; 0
    1178:	70 e0       	ldi	r23, 0x00	; 0
    117a:	84 da       	rcall	.-2808   	; 0x684 <set_RGB_LED>
					player_save_time = 20;
    117c:	84 e1       	ldi	r24, 0x14	; 20
    117e:	8c 83       	std	Y+4, r24	; 0x04
					wait_1ms(150);
    1180:	66 e9       	ldi	r22, 0x96	; 150
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	40 d8       	rcall	.-3968   	; 0x20a <wait_1ms>
			respawn = 20;
		}
		//move enemy
		if(move_cool_down == 0)
		{
			for (u8 i = 0; i<20;i++)
    118a:	8c 85       	ldd	r24, Y+12	; 0x0c
    118c:	8f 5f       	subi	r24, 0xFF	; 255
    118e:	8c 87       	std	Y+12, r24	; 0x0c
    1190:	8c 85       	ldd	r24, Y+12	; 0x0c
    1192:	84 31       	cpi	r24, 0x14	; 20
    1194:	08 f4       	brcc	.+2      	; 0x1198 <start_fighter_game+0x2de>
    1196:	34 cf       	rjmp	.-408    	; 0x1000 <start_fighter_game+0x146>
					set_RGB_LED(losted_points,0,life_points);
					player_save_time = 20;
					wait_1ms(150);
				}
			}
			move_cool_down = 5;
    1198:	85 e0       	ldi	r24, 0x05	; 5
    119a:	88 87       	std	Y+8, r24	; 0x08
		}

		//display the player
		write_text(player_y_pos,player_x_pos,PSTR("\x10"""));
    119c:	8c e6       	ldi	r24, 0x6C	; 108
    119e:	91 e0       	ldi	r25, 0x01	; 1
    11a0:	ac 01       	movw	r20, r24
    11a2:	6f 85       	ldd	r22, Y+15	; 0x0f
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	db d8       	rcall	.-3658   	; 0x35e <write_text>

		//move the player one up
		if (Taste_3 == 1 && cool_down==0)
    11a8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <Taste_3>
    11ac:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <Taste_3+0x1>
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	99 f4       	brne	.+38     	; 0x11da <start_fighter_game+0x320>
    11b4:	8d 81       	ldd	r24, Y+5	; 0x05
    11b6:	88 23       	and	r24, r24
    11b8:	81 f4       	brne	.+32     	; 0x11da <start_fighter_game+0x320>
		{
			write_text(player_y_pos,player_x_pos,PSTR(" "));
    11ba:	8e e6       	ldi	r24, 0x6E	; 110
    11bc:	91 e0       	ldi	r25, 0x01	; 1
    11be:	ac 01       	movw	r20, r24
    11c0:	6f 85       	ldd	r22, Y+15	; 0x0f
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	cc d8       	rcall	.-3688   	; 0x35e <write_text>
			player_y_pos--;
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	81 50       	subi	r24, 0x01	; 1
    11ca:	8b 83       	std	Y+3, r24	; 0x03

			if (player_y_pos>4)
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	85 30       	cpi	r24, 0x05	; 5
    11d0:	10 f0       	brcs	.+4      	; 0x11d6 <start_fighter_game+0x31c>
			{
				player_y_pos = 3;
    11d2:	83 e0       	ldi	r24, 0x03	; 3
    11d4:	8b 83       	std	Y+3, r24	; 0x03
			}
			cool_down = 5;
    11d6:	85 e0       	ldi	r24, 0x05	; 5
    11d8:	8d 83       	std	Y+5, r24	; 0x05
		}
		//move the player one down
		if (Taste_4 == 1 && cool_down==0)
    11da:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Taste_4>
    11de:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Taste_4+0x1>
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	91 f4       	brne	.+36     	; 0x120a <start_fighter_game+0x350>
    11e6:	8d 81       	ldd	r24, Y+5	; 0x05
    11e8:	88 23       	and	r24, r24
    11ea:	79 f4       	brne	.+30     	; 0x120a <start_fighter_game+0x350>
		{
			write_text(player_y_pos,player_x_pos,PSTR(" "));
    11ec:	80 e7       	ldi	r24, 0x70	; 112
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	ac 01       	movw	r20, r24
    11f2:	6f 85       	ldd	r22, Y+15	; 0x0f
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	b3 d8       	rcall	.-3738   	; 0x35e <write_text>
			player_y_pos++;
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	8f 5f       	subi	r24, 0xFF	; 255
    11fc:	8b 83       	std	Y+3, r24	; 0x03

			if (player_y_pos>4)
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	85 30       	cpi	r24, 0x05	; 5
    1202:	08 f0       	brcs	.+2      	; 0x1206 <start_fighter_game+0x34c>
			{
				player_y_pos = 0;
    1204:	1b 82       	std	Y+3, r1	; 0x03
			}
			cool_down = 5;
    1206:	85 e0       	ldi	r24, 0x05	; 5
    1208:	8d 83       	std	Y+5, r24	; 0x05
		}
		//controll speed limiter
		if (cool_down>0)
    120a:	8d 81       	ldd	r24, Y+5	; 0x05
    120c:	88 23       	and	r24, r24
    120e:	19 f0       	breq	.+6      	; 0x1216 <start_fighter_game+0x35c>
		{
			cool_down--;
    1210:	8d 81       	ldd	r24, Y+5	; 0x05
    1212:	81 50       	subi	r24, 0x01	; 1
    1214:	8d 83       	std	Y+5, r24	; 0x05
		}
		//enemy move speed limiter
		if (move_cool_down>0)
    1216:	88 85       	ldd	r24, Y+8	; 0x08
    1218:	88 23       	and	r24, r24
    121a:	19 f0       	breq	.+6      	; 0x1222 <start_fighter_game+0x368>
		{
			move_cool_down--;
    121c:	88 85       	ldd	r24, Y+8	; 0x08
    121e:	81 50       	subi	r24, 0x01	; 1
    1220:	88 87       	std	Y+8, r24	; 0x08
		}
		//player save time after a collision 
		if (player_save_time>0)
    1222:	8c 81       	ldd	r24, Y+4	; 0x04
    1224:	88 23       	and	r24, r24
    1226:	19 f0       	breq	.+6      	; 0x122e <start_fighter_game+0x374>
		{
			player_save_time--;
    1228:	8c 81       	ldd	r24, Y+4	; 0x04
    122a:	81 50       	subi	r24, 0x01	; 1
    122c:	8c 83       	std	Y+4, r24	; 0x04
		}
		respawn--;
    122e:	8e 81       	ldd	r24, Y+6	; 0x06
    1230:	81 50       	subi	r24, 0x01	; 1
    1232:	8e 83       	std	Y+6, r24	; 0x06
		wait_1ms(fps);
    1234:	8a 89       	ldd	r24, Y+18	; 0x12
    1236:	9b 89       	ldd	r25, Y+19	; 0x13
    1238:	cc 01       	movw	r24, r24
    123a:	a0 e0       	ldi	r26, 0x00	; 0
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	bc 01       	movw	r22, r24
    1240:	cd 01       	movw	r24, r26
    1242:	e3 d7       	rcall	.+4038   	; 0x220a <__TEXT_REGION_LENGTH__+0x20a>
	u8 seed = 333;
	u16 fps = 60;

	set_RGB_LED(losted_points,0,life_points);

	while (life_points>0)
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	9a 81       	ldd	r25, Y+2	; 0x02
    1248:	89 2b       	or	r24, r25
    124a:	09 f0       	breq	.+2      	; 0x124e <start_fighter_game+0x394>
    124c:	8a ce       	rjmp	.-748    	; 0xf62 <start_fighter_game+0xa8>
			player_save_time--;
		}
		respawn--;
		wait_1ms(fps);
	}
}
    124e:	00 00       	nop
    1250:	ed 96       	adiw	r28, 0x3d	; 61
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	cd bf       	out	0x3d, r28	; 61
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	08 95       	ret

00001262 <main>:


 int main (void){
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62

	// Definition von Variablen, die nur im "main" bekannt sind.
	

	init_Mocca_Mini();
    126a:	5b da       	rcall	.-2890   	; 0x722 <init_Mocca_Mini>
	lcd_init();
    126c:	c2 d9       	rcall	.-3196   	; 0x5f2 <lcd_init>

	write_text(0,0,PSTR("\x11"" code cracker "));
    126e:	82 e7       	ldi	r24, 0x72	; 114
    1270:	91 e0       	ldi	r25, 0x01	; 1
    1272:	ac 01       	movw	r20, r24
    1274:	60 e0       	ldi	r22, 0x00	; 0
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	72 d8       	rcall	.-3868   	; 0x35e <write_text>
	write_text(3,0,PSTR("\x11"" fighter game "));
    127a:	82 e8       	ldi	r24, 0x82	; 130
    127c:	91 e0       	ldi	r25, 0x01	; 1
    127e:	ac 01       	movw	r20, r24
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	83 e0       	ldi	r24, 0x03	; 3
    1284:	6c d8       	rcall	.-3880   	; 0x35e <write_text>

	while (1)
	{
		if (Taste_1 == 1)
    1286:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Taste_1>
    128a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Taste_1+0x1>
    128e:	01 97       	sbiw	r24, 0x01	; 1
    1290:	71 f4       	brne	.+28     	; 0x12ae <main+0x4c>
		{
			code_cracker_game();
    1292:	8b dd       	rcall	.-1258   	; 0xdaa <code_cracker_game>
			clear_lcd();
    1294:	d1 d9       	rcall	.-3166   	; 0x638 <clear_lcd>
			write_text(0,0,PSTR("\x11"" code cracker "));
    1296:	82 e9       	ldi	r24, 0x92	; 146
    1298:	91 e0       	ldi	r25, 0x01	; 1
    129a:	ac 01       	movw	r20, r24
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	5e d8       	rcall	.-3908   	; 0x35e <write_text>
			write_text(3,0,PSTR("\x11"" fighter game "));
    12a2:	82 ea       	ldi	r24, 0xA2	; 162
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	ac 01       	movw	r20, r24
    12a8:	60 e0       	ldi	r22, 0x00	; 0
    12aa:	83 e0       	ldi	r24, 0x03	; 3
    12ac:	58 d8       	rcall	.-3920   	; 0x35e <write_text>
		}
		if (Taste_2 == 1)
    12ae:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Taste_2>
    12b2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Taste_2+0x1>
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	31 f7       	brne	.-52     	; 0x1286 <main+0x24>
		{
			start_fighter_game();
    12ba:	ff dd       	rcall	.-1026   	; 0xeba <start_fighter_game>
			clear_lcd();
    12bc:	bd d9       	rcall	.-3206   	; 0x638 <clear_lcd>
			write_text(0,0,PSTR("\x11"" code cracker "));
    12be:	82 eb       	ldi	r24, 0xB2	; 178
    12c0:	91 e0       	ldi	r25, 0x01	; 1
    12c2:	ac 01       	movw	r20, r24
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	4a d8       	rcall	.-3948   	; 0x35e <write_text>
			write_text(3,0,PSTR("\x11"" fighter game "));
    12ca:	82 ec       	ldi	r24, 0xC2	; 194
    12cc:	91 e0       	ldi	r25, 0x01	; 1
    12ce:	ac 01       	movw	r20, r24
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	83 e0       	ldi	r24, 0x03	; 3
    12d4:	44 d8       	rcall	.-3960   	; 0x35e <write_text>
			set_RGB_LED(0,0,0);
    12d6:	40 e0       	ldi	r20, 0x00	; 0
    12d8:	50 e0       	ldi	r21, 0x00	; 0
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	d0 d9       	rcall	.-3168   	; 0x684 <set_RGB_LED>
		}
	}
    12e4:	d0 cf       	rjmp	.-96     	; 0x1286 <main+0x24>

000012e6 <__mulhi3>:
    12e6:	00 24       	eor	r0, r0
    12e8:	55 27       	eor	r21, r21
    12ea:	04 c0       	rjmp	.+8      	; 0x12f4 <__mulhi3+0xe>
    12ec:	08 0e       	add	r0, r24
    12ee:	59 1f       	adc	r21, r25
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	29 f0       	breq	.+10     	; 0x1302 <__mulhi3+0x1c>
    12f8:	76 95       	lsr	r23
    12fa:	67 95       	ror	r22
    12fc:	b8 f3       	brcs	.-18     	; 0x12ec <__mulhi3+0x6>
    12fe:	71 05       	cpc	r23, r1
    1300:	b9 f7       	brne	.-18     	; 0x12f0 <__mulhi3+0xa>
    1302:	80 2d       	mov	r24, r0
    1304:	95 2f       	mov	r25, r21
    1306:	08 95       	ret

00001308 <__udivmodsi4>:
    1308:	a1 e2       	ldi	r26, 0x21	; 33
    130a:	1a 2e       	mov	r1, r26
    130c:	aa 1b       	sub	r26, r26
    130e:	bb 1b       	sub	r27, r27
    1310:	fd 01       	movw	r30, r26
    1312:	0d c0       	rjmp	.+26     	; 0x132e <__udivmodsi4_ep>

00001314 <__udivmodsi4_loop>:
    1314:	aa 1f       	adc	r26, r26
    1316:	bb 1f       	adc	r27, r27
    1318:	ee 1f       	adc	r30, r30
    131a:	ff 1f       	adc	r31, r31
    131c:	a2 17       	cp	r26, r18
    131e:	b3 07       	cpc	r27, r19
    1320:	e4 07       	cpc	r30, r20
    1322:	f5 07       	cpc	r31, r21
    1324:	20 f0       	brcs	.+8      	; 0x132e <__udivmodsi4_ep>
    1326:	a2 1b       	sub	r26, r18
    1328:	b3 0b       	sbc	r27, r19
    132a:	e4 0b       	sbc	r30, r20
    132c:	f5 0b       	sbc	r31, r21

0000132e <__udivmodsi4_ep>:
    132e:	66 1f       	adc	r22, r22
    1330:	77 1f       	adc	r23, r23
    1332:	88 1f       	adc	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	1a 94       	dec	r1
    1338:	69 f7       	brne	.-38     	; 0x1314 <__udivmodsi4_loop>
    133a:	60 95       	com	r22
    133c:	70 95       	com	r23
    133e:	80 95       	com	r24
    1340:	90 95       	com	r25
    1342:	9b 01       	movw	r18, r22
    1344:	ac 01       	movw	r20, r24
    1346:	bd 01       	movw	r22, r26
    1348:	cf 01       	movw	r24, r30
    134a:	08 95       	ret

0000134c <do_rand>:
    134c:	8f 92       	push	r8
    134e:	9f 92       	push	r9
    1350:	af 92       	push	r10
    1352:	bf 92       	push	r11
    1354:	cf 92       	push	r12
    1356:	df 92       	push	r13
    1358:	ef 92       	push	r14
    135a:	ff 92       	push	r15
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	ec 01       	movw	r28, r24
    1362:	68 81       	ld	r22, Y
    1364:	79 81       	ldd	r23, Y+1	; 0x01
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	9b 81       	ldd	r25, Y+3	; 0x03
    136a:	61 15       	cp	r22, r1
    136c:	71 05       	cpc	r23, r1
    136e:	81 05       	cpc	r24, r1
    1370:	91 05       	cpc	r25, r1
    1372:	21 f4       	brne	.+8      	; 0x137c <do_rand+0x30>
    1374:	64 e2       	ldi	r22, 0x24	; 36
    1376:	79 ed       	ldi	r23, 0xD9	; 217
    1378:	8b e5       	ldi	r24, 0x5B	; 91
    137a:	97 e0       	ldi	r25, 0x07	; 7
    137c:	2d e1       	ldi	r18, 0x1D	; 29
    137e:	33 ef       	ldi	r19, 0xF3	; 243
    1380:	41 e0       	ldi	r20, 0x01	; 1
    1382:	50 e0       	ldi	r21, 0x00	; 0
    1384:	55 d0       	rcall	.+170    	; 0x1430 <__divmodsi4>
    1386:	49 01       	movw	r8, r18
    1388:	5a 01       	movw	r10, r20
    138a:	27 ea       	ldi	r18, 0xA7	; 167
    138c:	31 e4       	ldi	r19, 0x41	; 65
    138e:	40 e0       	ldi	r20, 0x00	; 0
    1390:	50 e0       	ldi	r21, 0x00	; 0
    1392:	35 d0       	rcall	.+106    	; 0x13fe <__mulsi3>
    1394:	6b 01       	movw	r12, r22
    1396:	7c 01       	movw	r14, r24
    1398:	2c ee       	ldi	r18, 0xEC	; 236
    139a:	34 ef       	ldi	r19, 0xF4	; 244
    139c:	4f ef       	ldi	r20, 0xFF	; 255
    139e:	5f ef       	ldi	r21, 0xFF	; 255
    13a0:	c5 01       	movw	r24, r10
    13a2:	b4 01       	movw	r22, r8
    13a4:	2c d0       	rcall	.+88     	; 0x13fe <__mulsi3>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	8c 0d       	add	r24, r12
    13ac:	9d 1d       	adc	r25, r13
    13ae:	ae 1d       	adc	r26, r14
    13b0:	bf 1d       	adc	r27, r15
    13b2:	b7 ff       	sbrs	r27, 7
    13b4:	03 c0       	rjmp	.+6      	; 0x13bc <do_rand+0x70>
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	a1 09       	sbc	r26, r1
    13ba:	b0 48       	sbci	r27, 0x80	; 128
    13bc:	88 83       	st	Y, r24
    13be:	99 83       	std	Y+1, r25	; 0x01
    13c0:	aa 83       	std	Y+2, r26	; 0x02
    13c2:	bb 83       	std	Y+3, r27	; 0x03
    13c4:	9f 77       	andi	r25, 0x7F	; 127
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	ff 90       	pop	r15
    13cc:	ef 90       	pop	r14
    13ce:	df 90       	pop	r13
    13d0:	cf 90       	pop	r12
    13d2:	bf 90       	pop	r11
    13d4:	af 90       	pop	r10
    13d6:	9f 90       	pop	r9
    13d8:	8f 90       	pop	r8
    13da:	08 95       	ret

000013dc <rand_r>:
    13dc:	b7 df       	rcall	.-146    	; 0x134c <do_rand>
    13de:	08 95       	ret

000013e0 <rand>:
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	91 e0       	ldi	r25, 0x01	; 1
    13e4:	b3 df       	rcall	.-154    	; 0x134c <do_rand>
    13e6:	08 95       	ret

000013e8 <srand>:
    13e8:	a0 e0       	ldi	r26, 0x00	; 0
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    13f0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    13f4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    13f8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    13fc:	08 95       	ret

000013fe <__mulsi3>:
    13fe:	ee 27       	eor	r30, r30
    1400:	ff 27       	eor	r31, r31

00001402 <__mulsi3_helper>:
    1402:	aa 27       	eor	r26, r26
    1404:	bb 27       	eor	r27, r27
    1406:	08 c0       	rjmp	.+16     	; 0x1418 <__mulsi3_helper+0x16>
    1408:	a2 0f       	add	r26, r18
    140a:	b3 1f       	adc	r27, r19
    140c:	e4 1f       	adc	r30, r20
    140e:	f5 1f       	adc	r31, r21
    1410:	22 0f       	add	r18, r18
    1412:	33 1f       	adc	r19, r19
    1414:	44 1f       	adc	r20, r20
    1416:	55 1f       	adc	r21, r21
    1418:	96 95       	lsr	r25
    141a:	87 95       	ror	r24
    141c:	77 95       	ror	r23
    141e:	67 95       	ror	r22
    1420:	98 f3       	brcs	.-26     	; 0x1408 <__mulsi3_helper+0x6>
    1422:	70 40       	sbci	r23, 0x00	; 0
    1424:	a9 f7       	brne	.-22     	; 0x1410 <__mulsi3_helper+0xe>
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	99 f7       	brne	.-26     	; 0x1410 <__mulsi3_helper+0xe>
    142a:	bd 01       	movw	r22, r26
    142c:	cf 01       	movw	r24, r30
    142e:	08 95       	ret

00001430 <__divmodsi4>:
    1430:	05 2e       	mov	r0, r21
    1432:	97 fb       	bst	r25, 7
    1434:	16 f4       	brtc	.+4      	; 0x143a <__divmodsi4+0xa>
    1436:	00 94       	com	r0
    1438:	0f d0       	rcall	.+30     	; 0x1458 <__negsi2>
    143a:	57 fd       	sbrc	r21, 7
    143c:	05 d0       	rcall	.+10     	; 0x1448 <__divmodsi4_neg2>
    143e:	64 df       	rcall	.-312    	; 0x1308 <__udivmodsi4>
    1440:	07 fc       	sbrc	r0, 7
    1442:	02 d0       	rcall	.+4      	; 0x1448 <__divmodsi4_neg2>
    1444:	46 f4       	brtc	.+16     	; 0x1456 <__divmodsi4_exit>
    1446:	08 c0       	rjmp	.+16     	; 0x1458 <__negsi2>

00001448 <__divmodsi4_neg2>:
    1448:	50 95       	com	r21
    144a:	40 95       	com	r20
    144c:	30 95       	com	r19
    144e:	21 95       	neg	r18
    1450:	3f 4f       	sbci	r19, 0xFF	; 255
    1452:	4f 4f       	sbci	r20, 0xFF	; 255
    1454:	5f 4f       	sbci	r21, 0xFF	; 255

00001456 <__divmodsi4_exit>:
    1456:	08 95       	ret

00001458 <__negsi2>:
    1458:	90 95       	com	r25
    145a:	80 95       	com	r24
    145c:	70 95       	com	r23
    145e:	61 95       	neg	r22
    1460:	7f 4f       	sbci	r23, 0xFF	; 255
    1462:	8f 4f       	sbci	r24, 0xFF	; 255
    1464:	9f 4f       	sbci	r25, 0xFF	; 255
    1466:	08 95       	ret

00001468 <_exit>:
    1468:	f8 94       	cli

0000146a <__stop_program>:
    146a:	ff cf       	rjmp	.-2      	; 0x146a <__stop_program>
