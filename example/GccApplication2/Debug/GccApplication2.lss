
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000008d4  00000968  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800102  00800102  0000096a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000096a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000099a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000059c  00000000  00000000  00000a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d3  00000000  00000000  00000fae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002da  00000000  00000000  00001181  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000218  00000000  00000000  0000145c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b4  00000000  00000000  00001674  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000431  00000000  00000000  00001a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00001e59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	39 c0       	rjmp	.+114    	; 0x74 <__ctors_end>
   2:	53 c0       	rjmp	.+166    	; 0xaa <__bad_interrupt>
   4:	2c c2       	rjmp	.+1112   	; 0x45e <__vector_2>
   6:	51 c0       	rjmp	.+162    	; 0xaa <__bad_interrupt>
   8:	50 c0       	rjmp	.+160    	; 0xaa <__bad_interrupt>
   a:	4f c0       	rjmp	.+158    	; 0xaa <__bad_interrupt>
   c:	3a c2       	rjmp	.+1140   	; 0x482 <__vector_6>
   e:	4d c0       	rjmp	.+154    	; 0xaa <__bad_interrupt>
  10:	4c c0       	rjmp	.+152    	; 0xaa <__bad_interrupt>
  12:	4b c0       	rjmp	.+150    	; 0xaa <__bad_interrupt>
  14:	4a c0       	rjmp	.+148    	; 0xaa <__bad_interrupt>
  16:	49 c0       	rjmp	.+146    	; 0xaa <__bad_interrupt>
  18:	48 c0       	rjmp	.+144    	; 0xaa <__bad_interrupt>
  1a:	47 c0       	rjmp	.+142    	; 0xaa <__bad_interrupt>
  1c:	46 c0       	rjmp	.+140    	; 0xaa <__bad_interrupt>
  1e:	45 c0       	rjmp	.+138    	; 0xaa <__bad_interrupt>
  20:	44 c0       	rjmp	.+136    	; 0xaa <__bad_interrupt>
  22:	43 c0       	rjmp	.+134    	; 0xaa <__bad_interrupt>
  24:	42 c0       	rjmp	.+132    	; 0xaa <__bad_interrupt>
  26:	41 c0       	rjmp	.+130    	; 0xaa <__bad_interrupt>
  28:	40 c0       	rjmp	.+128    	; 0xaa <__bad_interrupt>
  2a:	3f c0       	rjmp	.+126    	; 0xaa <__bad_interrupt>
  2c:	3e c0       	rjmp	.+124    	; 0xaa <__bad_interrupt>
  2e:	3d c0       	rjmp	.+122    	; 0xaa <__bad_interrupt>
  30:	3c c0       	rjmp	.+120    	; 0xaa <__bad_interrupt>
  32:	3b c0       	rjmp	.+118    	; 0xaa <__bad_interrupt>
  34:	3a c0       	rjmp	.+116    	; 0xaa <__bad_interrupt>
  36:	39 c0       	rjmp	.+114    	; 0xaa <__bad_interrupt>
  38:	38 c0       	rjmp	.+112    	; 0xaa <__bad_interrupt>
  3a:	37 c0       	rjmp	.+110    	; 0xaa <__bad_interrupt>

0000003c <__trampolines_end>:
  3c:	41 54       	subi	r20, 0x41	; 65
  3e:	4d 45       	sbci	r20, 0x5D	; 93
  40:	4c 20       	and	r4, r12
  42:	41 54       	subi	r20, 0x41	; 65
  44:	54 49       	sbci	r21, 0x94	; 148
  46:	4e 59       	subi	r20, 0x9E	; 158
  48:	38 34       	cpi	r19, 0x48	; 72
  4a:	31 20       	and	r3, r1
  4c:	56 31       	cpi	r21, 0x16	; 22
  4e:	2e 30       	cpi	r18, 0x0E	; 14
	...

00000051 <__c.1761>:
  51:	41 54 4d 45 4c 20 41 54 54 49 4e 59 38 34 31 20     ATMEL ATTINY841 
  61:	56 31 2e 30 00                                      V1.0.

00000066 <string.1758>:
  66:	68 65 6c 6c 6f 20 77 6f 72 6c 64 21 00 00           hello world!..

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d2 e0       	ldi	r29, 0x02	; 2
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	e4 ed       	ldi	r30, 0xD4	; 212
  88:	f8 e0       	ldi	r31, 0x08	; 8
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a2 30       	cpi	r26, 0x02	; 2
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	a2 e0       	ldi	r26, 0x02	; 2
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	ac 30       	cpi	r26, 0x0C	; 12
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	8c d2       	rcall	.+1304   	; 0x5c0 <main>
  a8:	13 c4       	rjmp	.+2086   	; 0x8d0 <_exit>

000000aa <__bad_interrupt>:
  aa:	aa cf       	rjmp	.-172    	; 0x0 <__vectors>

000000ac <delay_nop>:
	while(tick_1ms_cnt != 0);
}

void delay_nop(u8 time)				// time = 1 ==> Delay = 2.08us
															// time > 1 ==> Delay = time * 0.62us
{ u8 i;
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	00 d0       	rcall	.+0      	; 0xb2 <delay_nop+0x6>
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	8a 83       	std	Y+2, r24	; 0x02
	for(i=0; i<time; i++) __asm__ __volatile__ ("nop");
  b8:	19 82       	std	Y+1, r1	; 0x01
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <delay_nop+0x18>
  bc:	00 00       	nop
  be:	89 81       	ldd	r24, Y+1	; 0x01
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	89 83       	std	Y+1, r24	; 0x01
  c4:	99 81       	ldd	r25, Y+1	; 0x01
  c6:	8a 81       	ldd	r24, Y+2	; 0x02
  c8:	98 17       	cp	r25, r24
  ca:	c0 f3       	brcs	.-16     	; 0xbc <delay_nop+0x10>
}
  cc:	0f 90       	pop	r0
  ce:	0f 90       	pop	r0
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <write_lcd_f>:
	
	// LCD: EDIP204	
	//Manche Befehle müssen mehrfach ausgeführt werden, damit die minimale Pulslänge von xxx ns eingehalten wird. (bei 8MHz)

	//Synchronisierung: Clock-Signal 5x toggeln
	LCD_SOD_1;																			// Während nachfolgend 5 Synch-Bits gesendet werden muss SOD = 1 sein.
  d6:	dc 9a       	sbi	0x1b, 4	; 27
	LCD_SCLK_0;LCD_SCLK_0; LCD_SCLK_1;LCD_SCLK_1;		// Pulsbreite je 500ns (Keine Schleife verwenden, da sonst Laufzeit unnötig grösser wird.)
  d8:	de 98       	cbi	0x1b, 6	; 27
  da:	de 98       	cbi	0x1b, 6	; 27
  dc:	de 9a       	sbi	0x1b, 6	; 27
  de:	de 9a       	sbi	0x1b, 6	; 27
	LCD_SCLK_0;LCD_SCLK_0; LCD_SCLK_1;LCD_SCLK_1;
  e0:	de 98       	cbi	0x1b, 6	; 27
  e2:	de 98       	cbi	0x1b, 6	; 27
  e4:	de 9a       	sbi	0x1b, 6	; 27
  e6:	de 9a       	sbi	0x1b, 6	; 27
	LCD_SCLK_0;LCD_SCLK_0; LCD_SCLK_1;LCD_SCLK_1;
  e8:	de 98       	cbi	0x1b, 6	; 27
  ea:	de 98       	cbi	0x1b, 6	; 27
  ec:	de 9a       	sbi	0x1b, 6	; 27
  ee:	de 9a       	sbi	0x1b, 6	; 27
	LCD_SCLK_0;LCD_SCLK_0; LCD_SCLK_1;LCD_SCLK_1;
  f0:	de 98       	cbi	0x1b, 6	; 27
  f2:	de 98       	cbi	0x1b, 6	; 27
  f4:	de 9a       	sbi	0x1b, 6	; 27
  f6:	de 9a       	sbi	0x1b, 6	; 27
	LCD_SCLK_0;LCD_SCLK_0; LCD_SCLK_1;
  f8:	de 98       	cbi	0x1b, 6	; 27
  fa:	de 98       	cbi	0x1b, 6	; 27
  fc:	de 9a       	sbi	0x1b, 6	; 27
	
	//R/W: 1=Read, 0=Write
	LCD_SOD_0;																									// R/W = 0
  fe:	dc 98       	cbi	0x1b, 4	; 27
	LCD_SCLK_0;LCD_SCLK_0; LCD_SCLK_1;													// R/W-Bit senden
 100:	de 98       	cbi	0x1b, 6	; 27
 102:	de 98       	cbi	0x1b, 6	; 27
 104:	de 9a       	sbi	0x1b, 6	; 27
	
	//RS Register Selection: 0=Command, 1=Data
	if (rs == 'C') LCD_SOD_0; else LCD_SOD_1; 
 106:	83 34       	cpi	r24, 0x43	; 67
 108:	99 f1       	breq	.+102    	; 0x170 <write_lcd_f+0x9a>
 10a:	dc 9a       	sbi	0x1b, 4	; 27
	LCD_SCLK_0;LCD_SCLK_0; LCD_SCLK_1;													// RS-Bit senden
 10c:	de 98       	cbi	0x1b, 6	; 27
 10e:	de 98       	cbi	0x1b, 6	; 27
 110:	de 9a       	sbi	0x1b, 6	; 27

	//End-Marke 0
	LCD_SOD_0;
 112:	dc 98       	cbi	0x1b, 4	; 27
	LCD_SCLK_0;LCD_SCLK_0; LCD_SCLK_1;													// END-Bit senden
 114:	de 98       	cbi	0x1b, 6	; 27
 116:	de 98       	cbi	0x1b, 6	; 27
 118:	de 9a       	sbi	0x1b, 6	; 27
 11a:	84 e0       	ldi	r24, 0x04	; 4
	
	for (i = 0; i < 4; i++)																			// Daten-Bit 0-3 senden
	{ LCD_SCLK_0;
 11c:	de 98       	cbi	0x1b, 6	; 27
		if (wert & 0x01) LCD_SOD_1; else LCD_SOD_0;
 11e:	60 ff       	sbrs	r22, 0
 120:	25 c0       	rjmp	.+74     	; 0x16c <write_lcd_f+0x96>
 122:	dc 9a       	sbi	0x1b, 4	; 27
		wert = wert >> 1;
 124:	66 95       	lsr	r22
		LCD_SCLK_0;	LCD_SCLK_1;
 126:	de 98       	cbi	0x1b, 6	; 27
 128:	de 9a       	sbi	0x1b, 6	; 27
 12a:	81 50       	subi	r24, 0x01	; 1

	//End-Marke 0
	LCD_SOD_0;
	LCD_SCLK_0;LCD_SCLK_0; LCD_SCLK_1;													// END-Bit senden
	
	for (i = 0; i < 4; i++)																			// Daten-Bit 0-3 senden
 12c:	b9 f7       	brne	.-18     	; 0x11c <write_lcd_f+0x46>
		if (wert & 0x01) LCD_SOD_1; else LCD_SOD_0;
		wert = wert >> 1;
		LCD_SCLK_0;	LCD_SCLK_1;
	}

	LCD_SOD_0;																									// 4x "0" senden
 12e:	dc 98       	cbi	0x1b, 4	; 27
 130:	84 e0       	ldi	r24, 0x04	; 4
	for (i = 0; i < 4; i++) {LCD_SCLK_0;LCD_SCLK_0; LCD_SCLK_1;}
 132:	de 98       	cbi	0x1b, 6	; 27
 134:	de 98       	cbi	0x1b, 6	; 27
 136:	de 9a       	sbi	0x1b, 6	; 27
 138:	81 50       	subi	r24, 0x01	; 1
 13a:	d9 f7       	brne	.-10     	; 0x132 <write_lcd_f+0x5c>
 13c:	84 e0       	ldi	r24, 0x04	; 4
	
	for (i = 0; i < 4; i++)																			// Daten-Bit 4-7 senden
	{ LCD_SCLK_0;
 13e:	de 98       	cbi	0x1b, 6	; 27
		if (wert & 0x01) LCD_SOD_1; else LCD_SOD_0;
 140:	60 ff       	sbrs	r22, 0
 142:	12 c0       	rjmp	.+36     	; 0x168 <write_lcd_f+0x92>
 144:	dc 9a       	sbi	0x1b, 4	; 27
		wert = wert >> 1;
 146:	66 95       	lsr	r22
		LCD_SCLK_0;	LCD_SCLK_1;
 148:	de 98       	cbi	0x1b, 6	; 27
 14a:	de 9a       	sbi	0x1b, 6	; 27
 14c:	81 50       	subi	r24, 0x01	; 1
	}

	LCD_SOD_0;																									// 4x "0" senden
	for (i = 0; i < 4; i++) {LCD_SCLK_0;LCD_SCLK_0; LCD_SCLK_1;}
	
	for (i = 0; i < 4; i++)																			// Daten-Bit 4-7 senden
 14e:	b9 f7       	brne	.-18     	; 0x13e <write_lcd_f+0x68>
		if (wert & 0x01) LCD_SOD_1; else LCD_SOD_0;
		wert = wert >> 1;
		LCD_SCLK_0;	LCD_SCLK_1;
	}

	LCD_SOD_0;																									// 4x "0" senden
 150:	dc 98       	cbi	0x1b, 4	; 27
 152:	84 e0       	ldi	r24, 0x04	; 4
	for (i = 0; i < 4; i++)	{LCD_SCLK_0;LCD_SCLK_0; LCD_SCLK_1;}
 154:	de 98       	cbi	0x1b, 6	; 27
 156:	de 98       	cbi	0x1b, 6	; 27
 158:	de 9a       	sbi	0x1b, 6	; 27
 15a:	81 50       	subi	r24, 0x01	; 1
 15c:	d9 f7       	brne	.-10     	; 0x154 <write_lcd_f+0x7e>
 15e:	84 e1       	ldi	r24, 0x14	; 20

	// Write-Befehl auf 50us verlängern, damit minimale Execution-Time 39us/43us eingehalten ist.
	for (i = 0; i < 20; i++) LCD_SOD_1;
 160:	dc 9a       	sbi	0x1b, 4	; 27
 162:	81 50       	subi	r24, 0x01	; 1
 164:	e9 f7       	brne	.-6      	; 0x160 <write_lcd_f+0x8a>
}
 166:	08 95       	ret
	LCD_SOD_0;																									// 4x "0" senden
	for (i = 0; i < 4; i++) {LCD_SCLK_0;LCD_SCLK_0; LCD_SCLK_1;}
	
	for (i = 0; i < 4; i++)																			// Daten-Bit 4-7 senden
	{ LCD_SCLK_0;
		if (wert & 0x01) LCD_SOD_1; else LCD_SOD_0;
 168:	dc 98       	cbi	0x1b, 4	; 27
 16a:	ed cf       	rjmp	.-38     	; 0x146 <write_lcd_f+0x70>
	LCD_SOD_0;
	LCD_SCLK_0;LCD_SCLK_0; LCD_SCLK_1;													// END-Bit senden
	
	for (i = 0; i < 4; i++)																			// Daten-Bit 0-3 senden
	{ LCD_SCLK_0;
		if (wert & 0x01) LCD_SOD_1; else LCD_SOD_0;
 16c:	dc 98       	cbi	0x1b, 4	; 27
 16e:	da cf       	rjmp	.-76     	; 0x124 <write_lcd_f+0x4e>
	//R/W: 1=Read, 0=Write
	LCD_SOD_0;																									// R/W = 0
	LCD_SCLK_0;LCD_SCLK_0; LCD_SCLK_1;													// R/W-Bit senden
	
	//RS Register Selection: 0=Command, 1=Data
	if (rs == 'C') LCD_SOD_0; else LCD_SOD_1; 
 170:	dc 98       	cbi	0x1b, 4	; 27
 172:	cc cf       	rjmp	.-104    	; 0x10c <write_lcd_f+0x36>

00000174 <write_text>:
  y_pos:   Zeile-Nummer (0..3)
  x_pos:   Spalte-Nummer (0..19) (Zeichenposition auf Zeile)
  str_ptr: Adresse des zu schreibenden Textes
***********************************************************************************/
void write_text(u8 y_pos, u8 x_pos, const char* str_ptr)
{	u8 wert, str_p = 0;
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	df 93       	push	r29
 17a:	8a 01       	movw	r16, r20
	
	x_pos += y_pos * 0x20;																					// Position auf LCD berechnen 4x20 Zeichen
 17c:	82 95       	swap	r24
 17e:	88 0f       	add	r24, r24
 180:	80 7e       	andi	r24, 0xE0	; 224
 182:	86 0f       	add	r24, r22
	write_lcd_f ('C',x_pos | 0x80);																	// LCD-Cursor auf gewünsschte Adresse setzen = Position auf LCD
 184:	80 68       	ori	r24, 0x80	; 128
 186:	68 2f       	mov	r22, r24
 188:	83 e4       	ldi	r24, 0x43	; 67
 18a:	a5 df       	rcall	.-182    	; 0xd6 <write_lcd_f>
	wert = pgm_read_byte(&str_ptr[str_p++]);
 18c:	f8 01       	movw	r30, r16
 18e:	64 91       	lpm	r22, Z
	while(wert != 0)
 190:	66 23       	and	r22, r22
 192:	69 f0       	breq	.+26     	; 0x1ae <write_text+0x3a>
void write_text(u8 y_pos, u8 x_pos, const char* str_ptr)
{	u8 wert, str_p = 0;
	
	x_pos += y_pos * 0x20;																					// Position auf LCD berechnen 4x20 Zeichen
	write_lcd_f ('C',x_pos | 0x80);																	// LCD-Cursor auf gewünsschte Adresse setzen = Position auf LCD
	wert = pgm_read_byte(&str_ptr[str_p++]);
 194:	d1 e0       	ldi	r29, 0x01	; 1
 196:	01 c0       	rjmp	.+2      	; 0x19a <write_text+0x26>
	while(wert != 0)
	{	write_lcd_f ('D',wert);																				// Daten in obige Adresse schreiben
		wert = pgm_read_byte(&str_ptr[str_p++]);
 198:	d8 2f       	mov	r29, r24
	
	x_pos += y_pos * 0x20;																					// Position auf LCD berechnen 4x20 Zeichen
	write_lcd_f ('C',x_pos | 0x80);																	// LCD-Cursor auf gewünsschte Adresse setzen = Position auf LCD
	wert = pgm_read_byte(&str_ptr[str_p++]);
	while(wert != 0)
	{	write_lcd_f ('D',wert);																				// Daten in obige Adresse schreiben
 19a:	84 e4       	ldi	r24, 0x44	; 68
 19c:	9c df       	rcall	.-200    	; 0xd6 <write_lcd_f>
		wert = pgm_read_byte(&str_ptr[str_p++]);
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	8d 0f       	add	r24, r29
 1a2:	f8 01       	movw	r30, r16
 1a4:	ed 0f       	add	r30, r29
 1a6:	f1 1d       	adc	r31, r1
 1a8:	64 91       	lpm	r22, Z
{	u8 wert, str_p = 0;
	
	x_pos += y_pos * 0x20;																					// Position auf LCD berechnen 4x20 Zeichen
	write_lcd_f ('C',x_pos | 0x80);																	// LCD-Cursor auf gewünsschte Adresse setzen = Position auf LCD
	wert = pgm_read_byte(&str_ptr[str_p++]);
	while(wert != 0)
 1aa:	61 11       	cpse	r22, r1
 1ac:	f5 cf       	rjmp	.-22     	; 0x198 <write_text+0x24>
	{	write_lcd_f ('D',wert);																				// Daten in obige Adresse schreiben
		wert = pgm_read_byte(&str_ptr[str_p++]);
	}
}
 1ae:	df 91       	pop	r29
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	08 95       	ret

000001b6 <write_text_ram>:
* y_pos:   Zeile-Nummer (0..3)
* x_pos:   Spalte-Nummer (0..19) (Zeichenposition auf Zeile)
* str_ptr: Adresse des zu schreibenden Textes
\**********************************************************************************/
void write_text_ram(u8 y_pos, u8 x_pos, const char* str_ptr)
{	u8 str_p = 0;
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	df 93       	push	r29
 1bc:	8a 01       	movw	r16, r20
	
	x_pos += y_pos * 0x20;																					// Position auf LCD berechnen 4x20 Zeichen
 1be:	82 95       	swap	r24
 1c0:	88 0f       	add	r24, r24
 1c2:	80 7e       	andi	r24, 0xE0	; 224
 1c4:	86 0f       	add	r24, r22
	write_lcd_f ('C',x_pos | 0x80);																	// LCD-Cursor auf gewünsschte Adresse setzen = Position auf LCD
 1c6:	80 68       	ori	r24, 0x80	; 128
 1c8:	68 2f       	mov	r22, r24
 1ca:	83 e4       	ldi	r24, 0x43	; 67
 1cc:	84 df       	rcall	.-248    	; 0xd6 <write_lcd_f>
	while (str_ptr[str_p]) write_lcd_f ('D',str_ptr[str_p++]);			// Daten in obige Adresse schreiben
 1ce:	f8 01       	movw	r30, r16
 1d0:	60 81       	ld	r22, Z
 1d2:	66 23       	and	r22, r22
 1d4:	51 f0       	breq	.+20     	; 0x1ea <write_text_ram+0x34>
* y_pos:   Zeile-Nummer (0..3)
* x_pos:   Spalte-Nummer (0..19) (Zeichenposition auf Zeile)
* str_ptr: Adresse des zu schreibenden Textes
\**********************************************************************************/
void write_text_ram(u8 y_pos, u8 x_pos, const char* str_ptr)
{	u8 str_p = 0;
 1d6:	d0 e0       	ldi	r29, 0x00	; 0
	
	x_pos += y_pos * 0x20;																					// Position auf LCD berechnen 4x20 Zeichen
	write_lcd_f ('C',x_pos | 0x80);																	// LCD-Cursor auf gewünsschte Adresse setzen = Position auf LCD
	while (str_ptr[str_p]) write_lcd_f ('D',str_ptr[str_p++]);			// Daten in obige Adresse schreiben
 1d8:	df 5f       	subi	r29, 0xFF	; 255
 1da:	84 e4       	ldi	r24, 0x44	; 68
 1dc:	7c df       	rcall	.-264    	; 0xd6 <write_lcd_f>
 1de:	f8 01       	movw	r30, r16
 1e0:	ed 0f       	add	r30, r29
 1e2:	f1 1d       	adc	r31, r1
 1e4:	60 81       	ld	r22, Z
 1e6:	61 11       	cpse	r22, r1
 1e8:	f7 cf       	rjmp	.-18     	; 0x1d8 <write_text_ram+0x22>
}
 1ea:	df 91       	pop	r29
 1ec:	1f 91       	pop	r17
 1ee:	0f 91       	pop	r16
 1f0:	08 95       	ret

000001f2 <write_zahl>:
*         2 = vor der zweitletzten Ziffer das Komma setzen (Zahl=Zahl/100)
*         3 = vor der drittletzten Ziffer das Komma setzen (Zahl=Zahl/1'000)
*         9 = vor der viertletzten Ziffer das Komma setzen (Zahl=Zahl/10'000)
\**********************************************************************************/
void write_zahl(u8 x_pos, u8 y_pos, u32 zahl_v, u8 s_vk, u8 s_nk, u8 komma)
{
 1f2:	2f 92       	push	r2
 1f4:	3f 92       	push	r3
 1f6:	4f 92       	push	r4
 1f8:	5f 92       	push	r5
 1fa:	6f 92       	push	r6
 1fc:	7f 92       	push	r7
 1fe:	8f 92       	push	r8
 200:	9f 92       	push	r9
 202:	af 92       	push	r10
 204:	bf 92       	push	r11
 206:	cf 92       	push	r12
 208:	df 92       	push	r13
 20a:	ef 92       	push	r14
 20c:	ff 92       	push	r15
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
 21a:	63 97       	sbiw	r28, 0x13	; 19
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	f8 94       	cli
 220:	de bf       	out	0x3e, r29	; 62
 222:	0f be       	out	0x3f, r0	; 63
 224:	cd bf       	out	0x3d, r28	; 61
 226:	8a 8b       	std	Y+18, r24	; 0x12
 228:	6b 8b       	std	Y+19, r22	; 0x13
 22a:	49 01       	movw	r8, r18
 22c:	5a 01       	movw	r10, r20
 22e:	c8 8a       	std	Y+16, r12	; 0x10
	u8		i, pos, pos_t, nullen_loeschen = 1;

	//Umwandlung in die einzelnen Stellen-Zahlen 1er, 10er, 100er, ... 1'000'000'000er
	//zahl_v = 1234567890;

	if(s_vk >= 100) 
 230:	04 36       	cpi	r16, 0x64	; 100
 232:	08 f4       	brcc	.+2      	; 0x236 <write_zahl+0x44>
 234:	eb c0       	rjmp	.+470    	; 0x40c <__stack+0x10d>
	{ s_vk -= 100;
 236:	04 56       	subi	r16, 0x64	; 100
		nullen_loeschen = 0;
 238:	19 8a       	std	Y+17, r1	; 0x11
 23a:	0d 87       	std	Y+13, r16	; 0x0d
 23c:	0b 30       	cpi	r16, 0x0B	; 11
 23e:	10 f0       	brcs	.+4      	; 0x244 <write_zahl+0x52>
 240:	9a e0       	ldi	r25, 0x0A	; 10
 242:	9d 87       	std	Y+13, r25	; 0x0d
 244:	2e 2c       	mov	r2, r14
 246:	e8 89       	ldd	r30, Y+16	; 0x10
 248:	ee 15       	cp	r30, r14
 24a:	08 f4       	brcc	.+2      	; 0x24e <write_zahl+0x5c>
 24c:	2e 2e       	mov	r2, r30
	}
	if(s_vk > 10) s_vk = 10;
	
	if (s_nk > komma) s_nk = komma;									// unmöglicher Fall: mehr Nachkommastellen als Komma überhaupt geschoben werden 
	if (s_vk + s_nk > 10) s_nk = 10 - s_vk;					// unsinniger  Fall: zu viele Stellen
 24e:	9d 85       	ldd	r25, Y+13	; 0x0d
 250:	89 2f       	mov	r24, r25
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	9f 87       	std	Y+15, r25	; 0x0f
 256:	8e 87       	std	Y+14, r24	; 0x0e
 258:	82 0d       	add	r24, r2
 25a:	91 1d       	adc	r25, r1
 25c:	0b 97       	sbiw	r24, 0x0b	; 11
 25e:	24 f0       	brlt	.+8      	; 0x268 <write_zahl+0x76>
 260:	7a e0       	ldi	r23, 0x0A	; 10
 262:	27 2e       	mov	r2, r23
 264:	ed 85       	ldd	r30, Y+13	; 0x0d
 266:	2e 1a       	sub	r2, r30
	
	zehner		= 10;
	send_buffer[11] = (zahl_v % 10) + 48;
 268:	c5 01       	movw	r24, r10
 26a:	b4 01       	movw	r22, r8
 26c:	2a e0       	ldi	r18, 0x0A	; 10
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	50 e0       	ldi	r21, 0x00	; 0
 274:	0b d3       	rcall	.+1558   	; 0x88c <__udivmodsi4>
 276:	60 5d       	subi	r22, 0xD0	; 208
 278:	6c 87       	std	Y+12, r22	; 0x0c
	i = 10;
 27a:	4a e0       	ldi	r20, 0x0A	; 10
 27c:	34 2e       	mov	r3, r20
	if(s_vk > 10) s_vk = 10;
	
	if (s_nk > komma) s_nk = komma;									// unmöglicher Fall: mehr Nachkommastellen als Komma überhaupt geschoben werden 
	if (s_vk + s_nk > 10) s_nk = 10 - s_vk;					// unsinniger  Fall: zu viele Stellen
	
	zehner		= 10;
 27e:	5a e0       	ldi	r21, 0x0A	; 10
 280:	c5 2e       	mov	r12, r21
 282:	d1 2c       	mov	r13, r1
 284:	e1 2c       	mov	r14, r1
 286:	f1 2c       	mov	r15, r1
	send_buffer[11] = (zahl_v % 10) + 48;
	i = 10;
	do
	{ send_buffer[i] = ( (zahl_v / zehner) % 10) + 48;
 288:	6a e0       	ldi	r22, 0x0A	; 10
 28a:	46 2e       	mov	r4, r22
 28c:	51 2c       	mov	r5, r1
 28e:	61 2c       	mov	r6, r1
 290:	71 2c       	mov	r7, r1
 292:	01 e0       	ldi	r16, 0x01	; 1
 294:	10 e0       	ldi	r17, 0x00	; 0
 296:	0c 0f       	add	r16, r28
 298:	1d 1f       	adc	r17, r29
 29a:	03 0d       	add	r16, r3
 29c:	11 1d       	adc	r17, r1
 29e:	c5 01       	movw	r24, r10
 2a0:	b4 01       	movw	r22, r8
 2a2:	a7 01       	movw	r20, r14
 2a4:	96 01       	movw	r18, r12
 2a6:	f2 d2       	rcall	.+1508   	; 0x88c <__udivmodsi4>
 2a8:	ca 01       	movw	r24, r20
 2aa:	b9 01       	movw	r22, r18
 2ac:	a3 01       	movw	r20, r6
 2ae:	92 01       	movw	r18, r4
 2b0:	ed d2       	rcall	.+1498   	; 0x88c <__udivmodsi4>
 2b2:	60 5d       	subi	r22, 0xD0	; 208
 2b4:	f8 01       	movw	r30, r16
 2b6:	60 83       	st	Z, r22
		zehner *= 10;
 2b8:	d7 01       	movw	r26, r14
 2ba:	c6 01       	movw	r24, r12
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	aa 1f       	adc	r26, r26
 2c2:	bb 1f       	adc	r27, r27
 2c4:	6c 01       	movw	r12, r24
 2c6:	7d 01       	movw	r14, r26
 2c8:	cc 0c       	add	r12, r12
 2ca:	dd 1c       	adc	r13, r13
 2cc:	ee 1c       	adc	r14, r14
 2ce:	ff 1c       	adc	r15, r15
 2d0:	cc 0c       	add	r12, r12
 2d2:	dd 1c       	adc	r13, r13
 2d4:	ee 1c       	adc	r14, r14
 2d6:	ff 1c       	adc	r15, r15
 2d8:	c8 0e       	add	r12, r24
 2da:	d9 1e       	adc	r13, r25
 2dc:	ea 1e       	adc	r14, r26
 2de:	fb 1e       	adc	r15, r27
	} while(i--);
 2e0:	3a 94       	dec	r3
 2e2:	ff ef       	ldi	r31, 0xFF	; 255
 2e4:	3f 12       	cpse	r3, r31
 2e6:	d5 cf       	rjmp	.-86     	; 0x292 <write_zahl+0xa0>

	//Vor-Kommastellen kopieren
	pos = 0;
	pos_t = 12-komma-s_vk;
 2e8:	2c e0       	ldi	r18, 0x0C	; 12
 2ea:	88 89       	ldd	r24, Y+16	; 0x10
 2ec:	28 1b       	sub	r18, r24
 2ee:	82 2f       	mov	r24, r18
 2f0:	9d 85       	ldd	r25, Y+13	; 0x0d
 2f2:	89 1b       	sub	r24, r25
	//if(s_vk == 0) pos_t
	for (i = 0; i < s_vk; i++)
 2f4:	99 23       	and	r25, r25
 2f6:	09 f4       	brne	.+2      	; 0x2fa <write_zahl+0x108>
 2f8:	8c c0       	rjmp	.+280    	; 0x412 <__stack+0x113>
 2fa:	fe 01       	movw	r30, r28
 2fc:	31 96       	adiw	r30, 0x01	; 1
 2fe:	01 c0       	rjmp	.+2      	; 0x302 <__stack+0x3>
	{ send_buffer[pos++] = send_buffer[pos_t++];
 300:	89 2f       	mov	r24, r25
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	98 0f       	add	r25, r24
 306:	a1 e0       	ldi	r26, 0x01	; 1
 308:	b0 e0       	ldi	r27, 0x00	; 0
 30a:	ac 0f       	add	r26, r28
 30c:	bd 1f       	adc	r27, r29
 30e:	a8 0f       	add	r26, r24
 310:	b1 1d       	adc	r27, r1
 312:	8c 91       	ld	r24, X
 314:	81 93       	st	Z+, r24

	//Vor-Kommastellen kopieren
	pos = 0;
	pos_t = 12-komma-s_vk;
	//if(s_vk == 0) pos_t
	for (i = 0; i < s_vk; i++)
 316:	92 13       	cpse	r25, r18
 318:	f3 cf       	rjmp	.-26     	; 0x300 <__stack+0x1>
 31a:	8e 85       	ldd	r24, Y+14	; 0x0e
 31c:	9f 85       	ldd	r25, Y+15	; 0x0f
	{ send_buffer[pos++] = send_buffer[pos_t++];
	}
	if (s_nk > 0)
 31e:	22 20       	and	r2, r2
 320:	39 f1       	breq	.+78     	; 0x370 <__stack+0x71>
	{ send_buffer[pos++] = '.';
 322:	6d 85       	ldd	r22, Y+13	; 0x0d
 324:	6f 5f       	subi	r22, 0xFF	; 255
 326:	e1 e0       	ldi	r30, 0x01	; 1
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	ec 0f       	add	r30, r28
 32c:	fd 1f       	adc	r31, r29
 32e:	e8 0f       	add	r30, r24
 330:	f9 1f       	adc	r31, r25
 332:	8e e2       	ldi	r24, 0x2E	; 46
 334:	80 83       	st	Z, r24
 336:	52 2d       	mov	r21, r2
 338:	52 0f       	add	r21, r18
 33a:	96 2f       	mov	r25, r22
 33c:	02 c0       	rjmp	.+4      	; 0x342 <__stack+0x43>

		//Nach-Kommastellen kopieren
		pos_t = 12-komma;
		for (i = 0; i < s_nk; i++) send_buffer[pos++] = send_buffer[pos_t++];
 33e:	23 2f       	mov	r18, r19
 340:	94 2f       	mov	r25, r20
 342:	41 e0       	ldi	r20, 0x01	; 1
 344:	49 0f       	add	r20, r25
 346:	31 e0       	ldi	r19, 0x01	; 1
 348:	32 0f       	add	r19, r18
 34a:	e1 e0       	ldi	r30, 0x01	; 1
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	ec 0f       	add	r30, r28
 350:	fd 1f       	adc	r31, r29
 352:	e2 0f       	add	r30, r18
 354:	f1 1d       	adc	r31, r1
 356:	20 81       	ld	r18, Z
 358:	e1 e0       	ldi	r30, 0x01	; 1
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	ec 0f       	add	r30, r28
 35e:	fd 1f       	adc	r31, r29
 360:	e9 0f       	add	r30, r25
 362:	f1 1d       	adc	r31, r1
 364:	20 83       	st	Z, r18
 366:	35 13       	cpse	r19, r21
 368:	ea cf       	rjmp	.-44     	; 0x33e <__stack+0x3f>
 36a:	26 0e       	add	r2, r22
 36c:	82 2d       	mov	r24, r2
 36e:	90 e0       	ldi	r25, 0x00	; 0
	}
	send_buffer[pos] = 0;    //Endmarke des Strings setzen
 370:	e1 e0       	ldi	r30, 0x01	; 1
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	ec 0f       	add	r30, r28
 376:	fd 1f       	adc	r31, r29
 378:	e8 0f       	add	r30, r24
 37a:	f9 1f       	adc	r31, r25
 37c:	10 82       	st	Z, r1

	if(nullen_loeschen)
 37e:	e9 89       	ldd	r30, Y+17	; 0x11
 380:	ee 23       	and	r30, r30
 382:	29 f1       	breq	.+74     	; 0x3ce <__stack+0xcf>
	{ //Vorangehende Nullen löschen		(xyz)
	  i = 0;
	  while ((send_buffer[i] == 48) && (i < s_vk-1)) send_buffer[i++] = 32;
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	80 33       	cpi	r24, 0x30	; 48
 388:	11 f5       	brne	.+68     	; 0x3ce <__stack+0xcf>
 38a:	2e 85       	ldd	r18, Y+14	; 0x0e
 38c:	3f 85       	ldd	r19, Y+15	; 0x0f
 38e:	21 50       	subi	r18, 0x01	; 1
 390:	31 09       	sbc	r19, r1
 392:	12 16       	cp	r1, r18
 394:	13 06       	cpc	r1, r19
 396:	dc f4       	brge	.+54     	; 0x3ce <__stack+0xcf>
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	40 e0       	ldi	r20, 0x00	; 0
 39e:	60 e2       	ldi	r22, 0x20	; 32
 3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <__stack+0xa9>
 3a2:	82 17       	cp	r24, r18
 3a4:	93 07       	cpc	r25, r19
 3a6:	9c f4       	brge	.+38     	; 0x3ce <__stack+0xcf>
 3a8:	4f 5f       	subi	r20, 0xFF	; 255
 3aa:	e1 e0       	ldi	r30, 0x01	; 1
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	ec 0f       	add	r30, r28
 3b0:	fd 1f       	adc	r31, r29
 3b2:	e8 0f       	add	r30, r24
 3b4:	f9 1f       	adc	r31, r25
 3b6:	60 83       	st	Z, r22
 3b8:	84 2f       	mov	r24, r20
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	e1 e0       	ldi	r30, 0x01	; 1
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	ec 0f       	add	r30, r28
 3c2:	fd 1f       	adc	r31, r29
 3c4:	e8 0f       	add	r30, r24
 3c6:	f9 1f       	adc	r31, r25
 3c8:	50 81       	ld	r21, Z
 3ca:	50 33       	cpi	r21, 0x30	; 48
 3cc:	51 f3       	breq	.-44     	; 0x3a2 <__stack+0xa3>
	}
	
	write_text_ram(x_pos, y_pos, send_buffer);
 3ce:	ae 01       	movw	r20, r28
 3d0:	4f 5f       	subi	r20, 0xFF	; 255
 3d2:	5f 4f       	sbci	r21, 0xFF	; 255
 3d4:	6b 89       	ldd	r22, Y+19	; 0x13
 3d6:	8a 89       	ldd	r24, Y+18	; 0x12
 3d8:	ee de       	rcall	.-548    	; 0x1b6 <write_text_ram>
}
 3da:	63 96       	adiw	r28, 0x13	; 19
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	f8 94       	cli
 3e0:	de bf       	out	0x3e, r29	; 62
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	cd bf       	out	0x3d, r28	; 61
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	1f 91       	pop	r17
 3ec:	0f 91       	pop	r16
 3ee:	ff 90       	pop	r15
 3f0:	ef 90       	pop	r14
 3f2:	df 90       	pop	r13
 3f4:	cf 90       	pop	r12
 3f6:	bf 90       	pop	r11
 3f8:	af 90       	pop	r10
 3fa:	9f 90       	pop	r9
 3fc:	8f 90       	pop	r8
 3fe:	7f 90       	pop	r7
 400:	6f 90       	pop	r6
 402:	5f 90       	pop	r5
 404:	4f 90       	pop	r4
 406:	3f 90       	pop	r3
 408:	2f 90       	pop	r2
 40a:	08 95       	ret
\**********************************************************************************/
void write_zahl(u8 x_pos, u8 y_pos, u32 zahl_v, u8 s_vk, u8 s_nk, u8 komma)
{
	u32		zehner;
	char	send_buffer[12];
	u8		i, pos, pos_t, nullen_loeschen = 1;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	89 8b       	std	Y+17, r24	; 0x11
 410:	14 cf       	rjmp	.-472    	; 0x23a <write_zahl+0x48>

	//Vor-Kommastellen kopieren
	pos = 0;
	pos_t = 12-komma-s_vk;
	//if(s_vk == 0) pos_t
	for (i = 0; i < s_vk; i++)
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	83 cf       	rjmp	.-250    	; 0x31e <__stack+0x1f>

00000418 <lcd_init>:
*
* Initialisierung des integrierten LCD-Displays
\**********************************************************************************/

void lcd_init(void)
{	u8 i;
 418:	df 93       	push	r29
	
	DDRA |= 0x10;													// Port PA4 auf Output setzen LCD-Outputs SOD
 41a:	d4 9a       	sbi	0x1a, 4	; 26
	DDRA |= 0x40;													// Port PA6 auf Output setzen LCD-Outputs SCLK
 41c:	d6 9a       	sbi	0x1a, 6	; 26
 41e:	d2 e3       	ldi	r29, 0x32	; 50

	for(i=0; i<50; i++) delay_nop(120);   // 10ms (50x 0.2us) warten, bis LCD gestartet ist (Power-Up)
 420:	88 e7       	ldi	r24, 0x78	; 120
 422:	44 de       	rcall	.-888    	; 0xac <delay_nop>
 424:	d1 50       	subi	r29, 0x01	; 1
 426:	e1 f7       	brne	.-8      	; 0x420 <lcd_init+0x8>
	
	write_lcd_f('C',0x34);								// set 8-Bit-Interface RE = 1
 428:	64 e3       	ldi	r22, 0x34	; 52
 42a:	83 e4       	ldi	r24, 0x43	; 67
 42c:	54 de       	rcall	.-856    	; 0xd6 <write_lcd_f>
	write_lcd_f('C',0x34);								// Nochmals, denn einige LCD starten sonst nicht korrekt.
 42e:	64 e3       	ldi	r22, 0x34	; 52
 430:	83 e4       	ldi	r24, 0x43	; 67
 432:	51 de       	rcall	.-862    	; 0xd6 <write_lcd_f>
	write_lcd_f('C',0x09);								// 4-Zeilen-Modus, 5-Dot Font-Breite
 434:	69 e0       	ldi	r22, 0x09	; 9
 436:	83 e4       	ldi	r24, 0x43	; 67
 438:	4e de       	rcall	.-868    	; 0xd6 <write_lcd_f>
	write_lcd_f('C',0x30);								// set 8-Bit-Interface RE = 0
 43a:	60 e3       	ldi	r22, 0x30	; 48
 43c:	83 e4       	ldi	r24, 0x43	; 67
 43e:	4b de       	rcall	.-874    	; 0xd6 <write_lcd_f>
	write_lcd_f('C',0x0C);								// Display ON, Cursor OFF
 440:	6c e0       	ldi	r22, 0x0C	; 12
 442:	83 e4       	ldi	r24, 0x43	; 67
 444:	48 de       	rcall	.-880    	; 0xd6 <write_lcd_f>
	write_lcd_f('C',0x01);								// Clear Display
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	83 e4       	ldi	r24, 0x43	; 67
 44a:	45 de       	rcall	.-886    	; 0xd6 <write_lcd_f>
 44c:	d8 e0       	ldi	r29, 0x08	; 8
	for(i=0; i<8; i++) delay_nop(120);		// 1.6ms (8x 0.2us) warten, bis LCD gelöscht ist 
 44e:	88 e7       	ldi	r24, 0x78	; 120
 450:	2d de       	rcall	.-934    	; 0xac <delay_nop>
 452:	d1 50       	subi	r29, 0x01	; 1
 454:	e1 f7       	brne	.-8      	; 0x44e <lcd_init+0x36>
	
	write_lcd_f('C',0x07);								// Entry Mode
 456:	67 e0       	ldi	r22, 0x07	; 7
 458:	83 e4       	ldi	r24, 0x43	; 67
}
 45a:	df 91       	pop	r29
	write_lcd_f('C',0x30);								// set 8-Bit-Interface RE = 0
	write_lcd_f('C',0x0C);								// Display ON, Cursor OFF
	write_lcd_f('C',0x01);								// Clear Display
	for(i=0; i<8; i++) delay_nop(120);		// 1.6ms (8x 0.2us) warten, bis LCD gelöscht ist 
	
	write_lcd_f('C',0x07);								// Entry Mode
 45c:	3c ce       	rjmp	.-904    	; 0xd6 <write_lcd_f>

0000045e <__vector_2>:
}


// Interrupt-Funktion, die auslöst, wenn SPI-Eingang sich verändert (Pin 11/PA2/PCINT2)
ISR (PCINT0_vect) // Interrupt für Inputs PCINT[7:0]
{
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	00 90 5f 00 	lds	r0, 0x005F
 466:	0f 92       	push	r0
 468:	11 24       	eor	r1, r1
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
}
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	0f 90       	pop	r0
 478:	00 92 5f 00 	sts	0x005F, r0
 47c:	0f 90       	pop	r0
 47e:	1f 90       	pop	r1
 480:	18 95       	reti

00000482 <__vector_6>:

ISR (TIMER1_COMPA_vect) // Dieser Timer-Interrupt löst im 1ms-Takt aus.
{	
 482:	1f 92       	push	r1
 484:	0f 92       	push	r0
 486:	00 90 5f 00 	lds	r0, 0x005F
 48a:	0f 92       	push	r0
 48c:	11 24       	eor	r1, r1
 48e:	2f 93       	push	r18
 490:	3f 93       	push	r19
 492:	5f 93       	push	r21
 494:	6f 93       	push	r22
 496:	7f 93       	push	r23
 498:	8f 93       	push	r24
 49a:	9f 93       	push	r25
 49c:	af 93       	push	r26
 49e:	bf 93       	push	r27
 4a0:	ef 93       	push	r30
 4a2:	ff 93       	push	r31
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	00 d0       	rcall	.+0      	; 0x4aa <__vector_6+0x28>
 4aa:	00 d0       	rcall	.+0      	; 0x4ac <__vector_6+0x2a>
 4ac:	cd b7       	in	r28, 0x3d	; 61
 4ae:	de b7       	in	r29, 0x3e	; 62

	
	tick_1ms++;
 4b0:	80 91 08 01 	lds	r24, 0x0108
 4b4:	90 91 09 01 	lds	r25, 0x0109
 4b8:	a0 91 0a 01 	lds	r26, 0x010A
 4bc:	b0 91 0b 01 	lds	r27, 0x010B
 4c0:	01 96       	adiw	r24, 0x01	; 1
 4c2:	a1 1d       	adc	r26, r1
 4c4:	b1 1d       	adc	r27, r1
 4c6:	80 93 08 01 	sts	0x0108, r24
 4ca:	90 93 09 01 	sts	0x0109, r25
 4ce:	a0 93 0a 01 	sts	0x010A, r26
 4d2:	b0 93 0b 01 	sts	0x010B, r27
	//PINA |= 0x01;
	
	if(tick_1ms_cnt > 0) tick_1ms_cnt--;										// Wird für 1ms-Tick benötigt
 4d6:	80 91 04 01 	lds	r24, 0x0104
 4da:	90 91 05 01 	lds	r25, 0x0105
 4de:	a0 91 06 01 	lds	r26, 0x0106
 4e2:	b0 91 07 01 	lds	r27, 0x0107
 4e6:	00 97       	sbiw	r24, 0x00	; 0
 4e8:	a1 05       	cpc	r26, r1
 4ea:	b1 05       	cpc	r27, r1
 4ec:	99 f0       	breq	.+38     	; 0x514 <__vector_6+0x92>
 4ee:	80 91 04 01 	lds	r24, 0x0104
 4f2:	90 91 05 01 	lds	r25, 0x0105
 4f6:	a0 91 06 01 	lds	r26, 0x0106
 4fa:	b0 91 07 01 	lds	r27, 0x0107
 4fe:	01 97       	sbiw	r24, 0x01	; 1
 500:	a1 09       	sbc	r26, r1
 502:	b1 09       	sbc	r27, r1
 504:	80 93 04 01 	sts	0x0104, r24
 508:	90 93 05 01 	sts	0x0105, r25
 50c:	a0 93 06 01 	sts	0x0106, r26
 510:	b0 93 07 01 	sts	0x0107, r27
	if(LCD_Refresh_Time_cnt > 0) LCD_Refresh_Time_cnt--;
 514:	80 91 00 01 	lds	r24, 0x0100
 518:	90 91 01 01 	lds	r25, 0x0101
 51c:	00 97       	sbiw	r24, 0x00	; 0
 51e:	49 f0       	breq	.+18     	; 0x532 <__vector_6+0xb0>
 520:	80 91 00 01 	lds	r24, 0x0100
 524:	90 91 01 01 	lds	r25, 0x0101
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	90 93 01 01 	sts	0x0101, r25
 52e:	80 93 00 01 	sts	0x0100, r24
	else
	{	ADC_Messung();
		ADC_Mess_Time_cnt = ADC_Mess_Time;
	}*/

	LED_onBoard_Time++;
 532:	80 91 02 01 	lds	r24, 0x0102
 536:	90 91 03 01 	lds	r25, 0x0103
 53a:	01 96       	adiw	r24, 0x01	; 1
 53c:	90 93 03 01 	sts	0x0103, r25
 540:	80 93 02 01 	sts	0x0102, r24
	if (LED_onBoard_Time % LED_onBorad_Time_Takt ==                   0)	LED_1_ON;
 544:	80 91 02 01 	lds	r24, 0x0102
 548:	90 91 03 01 	lds	r25, 0x0103
 54c:	28 ee       	ldi	r18, 0xE8	; 232
 54e:	33 e0       	ldi	r19, 0x03	; 3
 550:	b9 01       	movw	r22, r18
 552:	88 d1       	rcall	.+784    	; 0x864 <__udivmodhi4>
 554:	00 97       	sbiw	r24, 0x00	; 0
 556:	49 f4       	brne	.+18     	; 0x56a <__vector_6+0xe8>
 558:	8b e3       	ldi	r24, 0x3B	; 59
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	2b e3       	ldi	r18, 0x3B	; 59
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	f9 01       	movw	r30, r18
 562:	20 81       	ld	r18, Z
 564:	21 60       	ori	r18, 0x01	; 1
 566:	fc 01       	movw	r30, r24
 568:	20 83       	st	Z, r18
	if (LED_onBoard_Time % LED_onBorad_Time_Takt == LED_onBorad_Time_ON)	LED_1_OFF;
 56a:	80 91 02 01 	lds	r24, 0x0102
 56e:	90 91 03 01 	lds	r25, 0x0103
 572:	28 ee       	ldi	r18, 0xE8	; 232
 574:	33 e0       	ldi	r19, 0x03	; 3
 576:	b9 01       	movw	r22, r18
 578:	75 d1       	rcall	.+746    	; 0x864 <__udivmodhi4>
 57a:	82 33       	cpi	r24, 0x32	; 50
 57c:	91 05       	cpc	r25, r1
 57e:	49 f4       	brne	.+18     	; 0x592 <__vector_6+0x110>
 580:	8b e3       	ldi	r24, 0x3B	; 59
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	2b e3       	ldi	r18, 0x3B	; 59
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	f9 01       	movw	r30, r18
 58a:	20 81       	ld	r18, Z
 58c:	2e 7f       	andi	r18, 0xFE	; 254
 58e:	fc 01       	movw	r30, r24
 590:	20 83       	st	Z, r18

}
 592:	0f 90       	pop	r0
 594:	0f 90       	pop	r0
 596:	0f 90       	pop	r0
 598:	0f 90       	pop	r0
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	ff 91       	pop	r31
 5a0:	ef 91       	pop	r30
 5a2:	bf 91       	pop	r27
 5a4:	af 91       	pop	r26
 5a6:	9f 91       	pop	r25
 5a8:	8f 91       	pop	r24
 5aa:	7f 91       	pop	r23
 5ac:	6f 91       	pop	r22
 5ae:	5f 91       	pop	r21
 5b0:	3f 91       	pop	r19
 5b2:	2f 91       	pop	r18
 5b4:	0f 90       	pop	r0
 5b6:	00 92 5f 00 	sts	0x005F, r0
 5ba:	0f 90       	pop	r0
 5bc:	1f 90       	pop	r1
 5be:	18 95       	reti

000005c0 <main>:

int main (void)
{
 5c0:	cf 92       	push	r12
 5c2:	ef 92       	push	r14
 5c4:	0f 93       	push	r16
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	00 d0       	rcall	.+0      	; 0x5cc <main+0xc>
 5cc:	cd b7       	in	r28, 0x3d	; 61
 5ce:	de b7       	in	r29, 0x3e	; 62
					
 static char const string[] PROGMEM = {"hello world!"};

	// CPU-Clock auf Maximum stellen

	CLKPR	= 0x00;			// System-Takt = 8MHz
 5d0:	83 e7       	ldi	r24, 0x73	; 115
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	fc 01       	movw	r30, r24
 5d6:	10 82       	st	Z, r1
	//ACSR	 |= (1 << ACD);				// Analog Comparator
	
	
	
	// PWM für LED-Dimmer initialisieren
	DDRB			|= (1 << PB2);						// PB2 = Output
 5d8:	87 e3       	ldi	r24, 0x37	; 55
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	27 e3       	ldi	r18, 0x37	; 55
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	f9 01       	movw	r30, r18
 5e2:	20 81       	ld	r18, Z
 5e4:	24 60       	ori	r18, 0x04	; 4
 5e6:	fc 01       	movw	r30, r24
 5e8:	20 83       	st	Z, r18
	TCCR0A		|= (1 << COM0A1) | (1 << WGM00);				// phase correct PWM mode
 5ea:	80 e5       	ldi	r24, 0x50	; 80
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	20 e5       	ldi	r18, 0x50	; 80
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	f9 01       	movw	r30, r18
 5f4:	20 81       	ld	r18, Z
 5f6:	21 68       	ori	r18, 0x81	; 129
 5f8:	fc 01       	movw	r30, r24
 5fa:	20 83       	st	Z, r18
	
	// Ausgangs-Multiplexer einstellen
	TOCPMSA1	&= ~((1 << TOCC7S1) | (1 << TOCC7S0));	// Output MUX: OC0A auf Pin TOCC7 schalten
 5fc:	88 e6       	ldi	r24, 0x68	; 104
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	28 e6       	ldi	r18, 0x68	; 104
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	f9 01       	movw	r30, r18
 606:	20 81       	ld	r18, Z
 608:	2f 73       	andi	r18, 0x3F	; 63
 60a:	fc 01       	movw	r30, r24
 60c:	20 83       	st	Z, r18
	TOCPMCOE	|=   (1 << TOCC7OE);										// Output enable TOCC7
 60e:	86 e6       	ldi	r24, 0x66	; 102
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	26 e6       	ldi	r18, 0x66	; 102
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	f9 01       	movw	r30, r18
 618:	20 81       	ld	r18, Z
 61a:	20 68       	ori	r18, 0x80	; 128
 61c:	fc 01       	movw	r30, r24
 61e:	20 83       	st	Z, r18
	
	OCR0A			 =   0;								// initial PWM pulse width
 620:	86 e5       	ldi	r24, 0x56	; 86
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	fc 01       	movw	r30, r24
 626:	10 82       	st	Z, r1
	// Bei System-Takt = 1MHz gilt:
	//TCCR0B |= (0 << CS00) | (1 << CS01);		// PWM-Grundtakt = 254Hz: clock source = CLK/8, start PWM (125kHz => 8us, 8us*255 *2 = 4.08ms => 254Hz)
	//TCCR0B |= (1 << CS00) | (0 << CS01);		// PWM-Grundtakt = 1.96kHz: clock source = CLK  , start PWM (  1MHz => 1us, 1us*255 *2 = 0.51ms => 1.96kHz)
	
	// Bei System-Takt = 8MHz gilt:
	TCCR0B |= (1 << CS00) | (1 << CS01);		// PWM-Grundtakt = 245Hz: clock source = CLK/64  , start PWM ( 125kHz => 8us, 8us*255 *2 = 4.08ms => 245Hz)
 628:	83 e5       	ldi	r24, 0x53	; 83
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	23 e5       	ldi	r18, 0x53	; 83
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	f9 01       	movw	r30, r18
 632:	20 81       	ld	r18, Z
 634:	23 60       	ori	r18, 0x03	; 3
 636:	fc 01       	movw	r30, r24
 638:	20 83       	st	Z, r18
	//TCCR0B |= (0 << CS00) | (1 << CS01);		// PWM-Grundtakt = 1.96kHz: clock source = CLK/8  , start PWM ( 1MHz =>   1us,   1us*255 *2 = 0.51ms => 1.96kHz)
	//TCCR0B |= (1 << CS00) | (0 << CS01);		// PWM-Grundtakt = 15.68kHz: clock source = CLK  , start PWM (  8MHz => 125ns, 125ns*255 *2 = 0.63.75us => 15.68kHz)
	
	// 16-Bit-Timer für 1ms-Ticker
	GTCCR  |= (1 << TSM) | (1 << PSR  );  //Timer anhalten, Prescaler Reset
 63a:	83 e4       	ldi	r24, 0x43	; 67
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	23 e4       	ldi	r18, 0x43	; 67
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	f9 01       	movw	r30, r18
 644:	20 81       	ld	r18, Z
 646:	21 68       	ori	r18, 0x81	; 129
 648:	fc 01       	movw	r30, r24
 64a:	20 83       	st	Z, r18
	TCNT1	= 0x1FF;
 64c:	8c e4       	ldi	r24, 0x4C	; 76
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	2f ef       	ldi	r18, 0xFF	; 255
 652:	31 e0       	ldi	r19, 0x01	; 1
 654:	fc 01       	movw	r30, r24
 656:	31 83       	std	Z+1, r19	; 0x01
 658:	20 83       	st	Z, r18
	TCCR1A |= (0 << COM1A1) | (0 << COM1A1);	// Normal Operation
 65a:	8f e4       	ldi	r24, 0x4F	; 79
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	2f e4       	ldi	r18, 0x4F	; 79
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	f9 01       	movw	r30, r18
 664:	20 81       	ld	r18, Z
 666:	fc 01       	movw	r30, r24
 668:	20 83       	st	Z, r18
	TCCR1A |= (0 <<  WGM11) | (0 <<  WGM10);	// CTC-Mode
 66a:	8f e4       	ldi	r24, 0x4F	; 79
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	2f e4       	ldi	r18, 0x4F	; 79
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	f9 01       	movw	r30, r18
 674:	20 81       	ld	r18, Z
 676:	fc 01       	movw	r30, r24
 678:	20 83       	st	Z, r18
	TCCR1B |= (0 <<  WGM13) | (1 <<  WGM12);	// CTC-Mode
 67a:	8e e4       	ldi	r24, 0x4E	; 78
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	2e e4       	ldi	r18, 0x4E	; 78
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	f9 01       	movw	r30, r18
 684:	20 81       	ld	r18, Z
 686:	28 60       	ori	r18, 0x08	; 8
 688:	fc 01       	movw	r30, r24
 68a:	20 83       	st	Z, r18
	//TCCR1B |= (0 <<   CS12) | (0 <<   CS11) | (1 <<   CS10);	// Clock select CLK/1: 1'000'000Hz ==> f = 1'000'000Hz ==> t = 1us
	TCCR1B |= (0 <<   CS12) | (1 <<   CS11) | (0 <<   CS10);	// Clock select CLK/8: 8'000'000Hz ==> f = 1'000'000Hz ==> t = 1us
 68c:	8e e4       	ldi	r24, 0x4E	; 78
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	2e e4       	ldi	r18, 0x4E	; 78
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	f9 01       	movw	r30, r18
 696:	20 81       	ld	r18, Z
 698:	22 60       	ori	r18, 0x02	; 2
 69a:	fc 01       	movw	r30, r24
 69c:	20 83       	st	Z, r18
	TCCR1C |= (0 <<  FOC1A);					// no Output Compare
 69e:	82 e4       	ldi	r24, 0x42	; 66
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	22 e4       	ldi	r18, 0x42	; 66
 6a4:	30 e0       	ldi	r19, 0x00	; 0
 6a6:	f9 01       	movw	r30, r18
 6a8:	20 81       	ld	r18, Z
 6aa:	fc 01       	movw	r30, r24
 6ac:	20 83       	st	Z, r18
	OCR1A   = 1000-1;							// 1us * 1000 = 1ms
 6ae:	8a e4       	ldi	r24, 0x4A	; 74
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	27 ee       	ldi	r18, 0xE7	; 231
 6b4:	33 e0       	ldi	r19, 0x03	; 3
 6b6:	fc 01       	movw	r30, r24
 6b8:	31 83       	std	Z+1, r19	; 0x01
 6ba:	20 83       	st	Z, r18
	TIMSK1 |= (1 << OCIE1A);					// Interrupt Enable
 6bc:	8f e2       	ldi	r24, 0x2F	; 47
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	2f e2       	ldi	r18, 0x2F	; 47
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	f9 01       	movw	r30, r18
 6c6:	20 81       	ld	r18, Z
 6c8:	22 60       	ori	r18, 0x02	; 2
 6ca:	fc 01       	movw	r30, r24
 6cc:	20 83       	st	Z, r18
	GTCCR  &= ~(1 << TSM);						// Timer starten
 6ce:	83 e4       	ldi	r24, 0x43	; 67
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	23 e4       	ldi	r18, 0x43	; 67
 6d4:	30 e0       	ldi	r19, 0x00	; 0
 6d6:	f9 01       	movw	r30, r18
 6d8:	20 81       	ld	r18, Z
 6da:	2f 77       	andi	r18, 0x7F	; 127
 6dc:	fc 01       	movw	r30, r24
 6de:	20 83       	st	Z, r18
	
	GIMSK  |= (1 << PCIE0);			// General Interrupt Mask Register für PCINT[7:0] any change
 6e0:	8b e5       	ldi	r24, 0x5B	; 91
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	2b e5       	ldi	r18, 0x5B	; 91
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	f9 01       	movw	r30, r18
 6ea:	20 81       	ld	r18, Z
 6ec:	20 61       	ori	r18, 0x10	; 16
 6ee:	fc 01       	movw	r30, r24
 6f0:	20 83       	st	Z, r18
	PCMSK0 |= (1 << 2);					// Interrupt für SPI-Eingang setzen (Pin 11/PA2/PCINT2)
 6f2:	82 e3       	ldi	r24, 0x32	; 50
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	22 e3       	ldi	r18, 0x32	; 50
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	f9 01       	movw	r30, r18
 6fc:	20 81       	ld	r18, Z
 6fe:	24 60       	ori	r18, 0x04	; 4
 700:	fc 01       	movw	r30, r24
 702:	20 83       	st	Z, r18
	
	sei();										// Global Interrupts aktivieren
 704:	78 94       	sei
	
	// Ports initialisieren
	
	// Outputs
	PUEA  &= ~0x03;			// PORTA Bit 0-1: Pull-Up Widerstand ausschalten
 706:	83 e6       	ldi	r24, 0x63	; 99
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	23 e6       	ldi	r18, 0x63	; 99
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	f9 01       	movw	r30, r18
 710:	20 81       	ld	r18, Z
 712:	2c 7f       	andi	r18, 0xFC	; 252
 714:	fc 01       	movw	r30, r24
 716:	20 83       	st	Z, r18
	DDRA  |=  0x03;			//								als Ausgang konfigurieren = LED 1 und 2 auf Print
 718:	8a e3       	ldi	r24, 0x3A	; 58
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	2a e3       	ldi	r18, 0x3A	; 58
 71e:	30 e0       	ldi	r19, 0x00	; 0
 720:	f9 01       	movw	r30, r18
 722:	20 81       	ld	r18, Z
 724:	23 60       	ori	r18, 0x03	; 3
 726:	fc 01       	movw	r30, r24
 728:	20 83       	st	Z, r18
	PORTA &= ~0x03;			//								LED's ausschalten
 72a:	8b e3       	ldi	r24, 0x3B	; 59
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	2b e3       	ldi	r18, 0x3B	; 59
 730:	30 e0       	ldi	r19, 0x00	; 0
 732:	f9 01       	movw	r30, r18
 734:	20 81       	ld	r18, Z
 736:	2c 7f       	andi	r18, 0xFC	; 252
 738:	fc 01       	movw	r30, r24
 73a:	20 83       	st	Z, r18

	DDRA  &= ~0x80;			// Eingang:		A/D-Channel 7 als Mess-Eingang
 73c:	8a e3       	ldi	r24, 0x3A	; 58
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	2a e3       	ldi	r18, 0x3A	; 58
 742:	30 e0       	ldi	r19, 0x00	; 0
 744:	f9 01       	movw	r30, r18
 746:	20 81       	ld	r18, Z
 748:	2f 77       	andi	r18, 0x7F	; 127
 74a:	fc 01       	movw	r30, r24
 74c:	20 83       	st	Z, r18
		
	DDRA  |=  0x08;			// SPI_OUT
 74e:	8a e3       	ldi	r24, 0x3A	; 58
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	2a e3       	ldi	r18, 0x3A	; 58
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	f9 01       	movw	r30, r18
 758:	20 81       	ld	r18, Z
 75a:	28 60       	ori	r18, 0x08	; 8
 75c:	fc 01       	movw	r30, r24
 75e:	20 83       	st	Z, r18
	PORTA &= ~0x08;
 760:	8b e3       	ldi	r24, 0x3B	; 59
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	2b e3       	ldi	r18, 0x3B	; 59
 766:	30 e0       	ldi	r19, 0x00	; 0
 768:	f9 01       	movw	r30, r18
 76a:	20 81       	ld	r18, Z
 76c:	27 7f       	andi	r18, 0xF7	; 247
 76e:	fc 01       	movw	r30, r24
 770:	20 83       	st	Z, r18
	//LED_ROT = 1;
	
	// Inputs
	//DDRA  &= ~0x01;			// PA.0 Taste
	
	lcd_init();
 772:	52 de       	rcall	.-860    	; 0x418 <lcd_init>
	
	write_text(1,0, PSTR("ATMEL ATTINY841 V1.0"));
 774:	8c e3       	ldi	r24, 0x3C	; 60
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	ac 01       	movw	r20, r24
 77a:	60 e0       	ldi	r22, 0x00	; 0
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	fa dc       	rcall	.-1548   	; 0x174 <write_text>
	
	// A/D-Wandler Initialisieren
	// A/D-Wandler misst am Kanal 7 PA7 die Spannung des Ultraschall-Pegelsensors
	ADMUXA = 0x07;			// select Channel 7 = PA7 Pin 6 
 780:	89 e2       	ldi	r24, 0x29	; 41
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	27 e0       	ldi	r18, 0x07	; 7
 786:	fc 01       	movw	r30, r24
 788:	20 83       	st	Z, r18
	ADMUXB = 0x00;			// Vcc als Referenz = 5V
 78a:	88 e2       	ldi	r24, 0x28	; 40
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	fc 01       	movw	r30, r24
 790:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);			// A/D-Wandler Enable, Start, Auto-Trigger
 792:	85 e2       	ldi	r24, 0x25	; 37
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	25 e2       	ldi	r18, 0x25	; 37
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	f9 01       	movw	r30, r18
 79c:	20 81       	ld	r18, Z
 79e:	20 6e       	ori	r18, 0xE0	; 224
 7a0:	fc 01       	movw	r30, r24
 7a2:	20 83       	st	Z, r18
	//ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (0 << ADPS2);	// Clock = CPU /  8 ==> ADC_Clock =   1MHz ==> Conversen-Time =  13us  (13 Cycles pro Messung)
	ADCSRA |= (0 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);		// Clock = CPU / 64 ==> ADC_Clock = 125kHz ==> Conversen-Time = 104us  (13 Cycles pro Messung)
 7a4:	85 e2       	ldi	r24, 0x25	; 37
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	25 e2       	ldi	r18, 0x25	; 37
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	f9 01       	movw	r30, r18
 7ae:	20 81       	ld	r18, Z
 7b0:	26 60       	ori	r18, 0x06	; 6
 7b2:	fc 01       	movw	r30, r24
 7b4:	20 83       	st	Z, r18
	ADCSRB |= (0 << ADTS0) | (0 << ADTS1) | (0 << ADTS2);		// Free Running mode
 7b6:	84 e2       	ldi	r24, 0x24	; 36
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	24 e2       	ldi	r18, 0x24	; 36
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	f9 01       	movw	r30, r18
 7c0:	20 81       	ld	r18, Z
 7c2:	fc 01       	movw	r30, r24
 7c4:	20 83       	st	Z, r18
	
	zahl_1 = 0;
 7c6:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		
		if(LCD_Refresh_Time_cnt == 0)
 7c8:	80 91 00 01 	lds	r24, 0x0100
 7cc:	90 91 01 01 	lds	r25, 0x0101
 7d0:	00 97       	sbiw	r24, 0x00	; 0
 7d2:	d9 f5       	brne	.+118    	; 0x84a <main+0x28a>
		{	LCD_Refresh_Time_cnt = 200;
 7d4:	88 ec       	ldi	r24, 0xC8	; 200
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	90 93 01 01 	sts	0x0101, r25
 7dc:	80 93 00 01 	sts	0x0100, r24
			
		lcd_init();
 7e0:	1b de       	rcall	.-970    	; 0x418 <lcd_init>
		write_text(0,0, PSTR("ATMEL ATTINY841 V1.0"));		
 7e2:	81 e5       	ldi	r24, 0x51	; 81
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	ac 01       	movw	r20, r24
 7e8:	60 e0       	ldi	r22, 0x00	; 0
 7ea:	80 e0       	ldi	r24, 0x00	; 0
 7ec:	c3 dc       	rcall	.-1658   	; 0x174 <write_text>
		
		write_text(1,0,string);
 7ee:	46 e6       	ldi	r20, 0x66	; 102
 7f0:	50 e0       	ldi	r21, 0x00	; 0
 7f2:	60 e0       	ldi	r22, 0x00	; 0
 7f4:	81 e0       	ldi	r24, 0x01	; 1
 7f6:	be dc       	rcall	.-1668   	; 0x174 <write_text>
		write_zahl(3, 0,tick_1ms,108,1,3);	
 7f8:	80 91 08 01 	lds	r24, 0x0108
 7fc:	90 91 09 01 	lds	r25, 0x0109
 800:	a0 91 0a 01 	lds	r26, 0x010A
 804:	b0 91 0b 01 	lds	r27, 0x010B
 808:	0f 2e       	mov	r0, r31
 80a:	f3 e0       	ldi	r31, 0x03	; 3
 80c:	cf 2e       	mov	r12, r31
 80e:	f0 2d       	mov	r31, r0
 810:	ee 24       	eor	r14, r14
 812:	e3 94       	inc	r14
 814:	0c e6       	ldi	r16, 0x6C	; 108
 816:	9c 01       	movw	r18, r24
 818:	ad 01       	movw	r20, r26
 81a:	60 e0       	ldi	r22, 0x00	; 0
 81c:	83 e0       	ldi	r24, 0x03	; 3
 81e:	e9 dc       	rcall	.-1582   	; 0x1f2 <write_zahl>
		write_zahl(0,19,zahl_1++%10,1,0,0);
 820:	89 81       	ldd	r24, Y+1	; 0x01
 822:	91 e0       	ldi	r25, 0x01	; 1
 824:	98 0f       	add	r25, r24
 826:	99 83       	std	Y+1, r25	; 0x01
 828:	9a e0       	ldi	r25, 0x0A	; 10
 82a:	69 2f       	mov	r22, r25
 82c:	0f d0       	rcall	.+30     	; 0x84c <__udivmodqi4>
 82e:	89 2f       	mov	r24, r25
 830:	88 2f       	mov	r24, r24
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	a0 e0       	ldi	r26, 0x00	; 0
 836:	b0 e0       	ldi	r27, 0x00	; 0
 838:	c1 2c       	mov	r12, r1
 83a:	e1 2c       	mov	r14, r1
 83c:	01 e0       	ldi	r16, 0x01	; 1
 83e:	9c 01       	movw	r18, r24
 840:	ad 01       	movw	r20, r26
 842:	63 e1       	ldi	r22, 0x13	; 19
 844:	80 e0       	ldi	r24, 0x00	; 0
 846:	d5 dc       	rcall	.-1622   	; 0x1f2 <write_zahl>
			write_zahl(3, 9,2,			3,0,0);
			write_zahl(3,14,3,	1,0,0);*/
		}
		

	}
 848:	bf cf       	rjmp	.-130    	; 0x7c8 <main+0x208>
 84a:	be cf       	rjmp	.-132    	; 0x7c8 <main+0x208>

0000084c <__udivmodqi4>:
 84c:	99 1b       	sub	r25, r25
 84e:	79 e0       	ldi	r23, 0x09	; 9
 850:	04 c0       	rjmp	.+8      	; 0x85a <__udivmodqi4_ep>

00000852 <__udivmodqi4_loop>:
 852:	99 1f       	adc	r25, r25
 854:	96 17       	cp	r25, r22
 856:	08 f0       	brcs	.+2      	; 0x85a <__udivmodqi4_ep>
 858:	96 1b       	sub	r25, r22

0000085a <__udivmodqi4_ep>:
 85a:	88 1f       	adc	r24, r24
 85c:	7a 95       	dec	r23
 85e:	c9 f7       	brne	.-14     	; 0x852 <__udivmodqi4_loop>
 860:	80 95       	com	r24
 862:	08 95       	ret

00000864 <__udivmodhi4>:
 864:	aa 1b       	sub	r26, r26
 866:	bb 1b       	sub	r27, r27
 868:	51 e1       	ldi	r21, 0x11	; 17
 86a:	07 c0       	rjmp	.+14     	; 0x87a <__udivmodhi4_ep>

0000086c <__udivmodhi4_loop>:
 86c:	aa 1f       	adc	r26, r26
 86e:	bb 1f       	adc	r27, r27
 870:	a6 17       	cp	r26, r22
 872:	b7 07       	cpc	r27, r23
 874:	10 f0       	brcs	.+4      	; 0x87a <__udivmodhi4_ep>
 876:	a6 1b       	sub	r26, r22
 878:	b7 0b       	sbc	r27, r23

0000087a <__udivmodhi4_ep>:
 87a:	88 1f       	adc	r24, r24
 87c:	99 1f       	adc	r25, r25
 87e:	5a 95       	dec	r21
 880:	a9 f7       	brne	.-22     	; 0x86c <__udivmodhi4_loop>
 882:	80 95       	com	r24
 884:	90 95       	com	r25
 886:	bc 01       	movw	r22, r24
 888:	cd 01       	movw	r24, r26
 88a:	08 95       	ret

0000088c <__udivmodsi4>:
 88c:	a1 e2       	ldi	r26, 0x21	; 33
 88e:	1a 2e       	mov	r1, r26
 890:	aa 1b       	sub	r26, r26
 892:	bb 1b       	sub	r27, r27
 894:	fd 01       	movw	r30, r26
 896:	0d c0       	rjmp	.+26     	; 0x8b2 <__udivmodsi4_ep>

00000898 <__udivmodsi4_loop>:
 898:	aa 1f       	adc	r26, r26
 89a:	bb 1f       	adc	r27, r27
 89c:	ee 1f       	adc	r30, r30
 89e:	ff 1f       	adc	r31, r31
 8a0:	a2 17       	cp	r26, r18
 8a2:	b3 07       	cpc	r27, r19
 8a4:	e4 07       	cpc	r30, r20
 8a6:	f5 07       	cpc	r31, r21
 8a8:	20 f0       	brcs	.+8      	; 0x8b2 <__udivmodsi4_ep>
 8aa:	a2 1b       	sub	r26, r18
 8ac:	b3 0b       	sbc	r27, r19
 8ae:	e4 0b       	sbc	r30, r20
 8b0:	f5 0b       	sbc	r31, r21

000008b2 <__udivmodsi4_ep>:
 8b2:	66 1f       	adc	r22, r22
 8b4:	77 1f       	adc	r23, r23
 8b6:	88 1f       	adc	r24, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	1a 94       	dec	r1
 8bc:	69 f7       	brne	.-38     	; 0x898 <__udivmodsi4_loop>
 8be:	60 95       	com	r22
 8c0:	70 95       	com	r23
 8c2:	80 95       	com	r24
 8c4:	90 95       	com	r25
 8c6:	9b 01       	movw	r18, r22
 8c8:	ac 01       	movw	r20, r24
 8ca:	bd 01       	movw	r22, r26
 8cc:	cf 01       	movw	r24, r30
 8ce:	08 95       	ret

000008d0 <_exit>:
 8d0:	f8 94       	cli

000008d2 <__stop_program>:
 8d2:	ff cf       	rjmp	.-2      	; 0x8d2 <__stop_program>
